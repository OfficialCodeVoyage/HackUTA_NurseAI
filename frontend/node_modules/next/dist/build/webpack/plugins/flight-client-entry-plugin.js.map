{"version":3,"sources":["../../../../src/build/webpack/plugins/flight-client-entry-plugin.ts"],"sourcesContent":["import type {\n  CssImports,\n  ClientComponentImports,\n  FlightClientEntryModuleItem,\n} from '../loaders/next-flight-client-entry-loader'\n\nimport { webpack } from 'next/dist/compiled/webpack/webpack'\nimport { stringify } from 'querystring'\nimport path from 'path'\nimport { sources } from 'next/dist/compiled/webpack/webpack'\nimport {\n  getInvalidator,\n  getEntries,\n  EntryTypes,\n  getEntryKey,\n} from '../../../server/dev/on-demand-entry-handler'\nimport { WEBPACK_LAYERS } from '../../../lib/constants'\nimport {\n  APP_CLIENT_INTERNALS,\n  BARREL_OPTIMIZATION_PREFIX,\n  COMPILER_NAMES,\n  DEFAULT_RUNTIME_WEBPACK,\n  EDGE_RUNTIME_WEBPACK,\n  SERVER_REFERENCE_MANIFEST,\n  UNDERSCORE_NOT_FOUND_ROUTE_ENTRY,\n} from '../../../shared/lib/constants'\nimport {\n  getActions,\n  generateActionId,\n  isClientComponentEntryModule,\n  isCSSMod,\n  regexCSS,\n} from '../loaders/utils'\nimport {\n  traverseModules,\n  forEachEntryModule,\n  formatBarrelOptimizedResource,\n  getModuleReferencesInOrder,\n} from '../utils'\nimport { normalizePathSep } from '../../../shared/lib/page-path/normalize-path-sep'\nimport { getProxiedPluginState } from '../../build-context'\nimport { PAGE_TYPES } from '../../../lib/page-types'\nimport { isWebpackServerOnlyLayer } from '../../utils'\nimport { getModuleBuildInfo } from '../loaders/get-module-build-info'\nimport { getAssumedSourceType } from '../loaders/next-flight-loader'\n\ninterface Options {\n  dev: boolean\n  appDir: string\n  isEdgeServer: boolean\n  encryptionKey: string\n}\n\nconst PLUGIN_NAME = 'FlightClientEntryPlugin'\n\ntype Actions = {\n  [actionId: string]: {\n    workers: {\n      [name: string]: string | number\n    }\n    // Record which layer the action is in (rsc or sc_action), in the specific entry.\n    layer: {\n      [name: string]: string\n    }\n  }\n}\n\nexport type ActionManifest = {\n  // Assign a unique encryption key during production build.\n  encryptionKey: string\n  node: Actions\n  edge: Actions\n}\n\nconst pluginState = getProxiedPluginState({\n  // A map to track \"action\" -> \"list of bundles\".\n  serverActions: {} as ActionManifest['node'],\n  edgeServerActions: {} as ActionManifest['edge'],\n\n  actionModServerId: {} as Record<\n    string,\n    {\n      server?: string | number\n      client?: string | number\n    }\n  >,\n  actionModEdgeServerId: {} as Record<\n    string,\n    {\n      server?: string | number\n      client?: string | number\n    }\n  >,\n\n  // Mapping of resource path to module id for server/edge server.\n  serverModuleIds: {} as Record<string, string | number>,\n  edgeServerModuleIds: {} as Record<string, string | number>,\n\n  // Collect modules from server/edge compiler in client layer,\n  // and detect if it's been used, and mark it as `async: true` for react.\n  // So that react could unwrap the async module from promise and render module itself.\n  // Use an object to simulate Set lookup\n  ASYNC_CLIENT_MODULES: {} as Record<string, boolean>,\n\n  injectedClientEntries: {} as Record<string, string>,\n})\n\nfunction deduplicateCSSImportsForEntry(mergedCSSimports: CssImports) {\n  // If multiple entry module connections are having the same CSS import,\n  // we only need to have one module to keep track of that CSS import.\n  // It is based on the fact that if a page or a layout is rendered in the\n  // given entry, all its parent layouts are always rendered too.\n  // This can avoid duplicate CSS imports in the generated CSS manifest,\n  // for example, if a page and its parent layout are both using the same\n  // CSS import, we only need to have the layout to keep track of that CSS\n  // import.\n  // To achieve this, we need to first collect all the CSS imports from\n  // every connection, and deduplicate them in the order of layers from\n  // top to bottom. The implementation can be generally described as:\n  // - Sort by number of `/` in the request path (the more `/`, the deeper)\n  // - When in the same depth, sort by the filename (template < layout < page and others)\n\n  // Sort the connections as described above.\n  const sortedCSSImports = Object.entries(mergedCSSimports).sort((a, b) => {\n    const [aPath] = a\n    const [bPath] = b\n\n    const aDepth = aPath.split('/').length\n    const bDepth = bPath.split('/').length\n\n    if (aDepth !== bDepth) {\n      return aDepth - bDepth\n    }\n\n    const aName = path.parse(aPath).name\n    const bName = path.parse(bPath).name\n\n    const indexA = ['template', 'layout'].indexOf(aName)\n    const indexB = ['template', 'layout'].indexOf(bName)\n\n    if (indexA === -1) return 1\n    if (indexB === -1) return -1\n    return indexA - indexB\n  })\n\n  const dedupedCSSImports: CssImports = {}\n  const trackedCSSImports = new Set<string>()\n  for (const [entryName, cssImports] of sortedCSSImports) {\n    for (const cssImport of cssImports) {\n      if (trackedCSSImports.has(cssImport)) continue\n\n      // Only track CSS imports that are in files that can inherit CSS.\n      const filename = path.parse(entryName).name\n      if (['template', 'layout'].includes(filename)) {\n        trackedCSSImports.add(cssImport)\n      }\n\n      if (!dedupedCSSImports[entryName]) {\n        dedupedCSSImports[entryName] = []\n      }\n      dedupedCSSImports[entryName].push(cssImport)\n    }\n  }\n\n  return dedupedCSSImports\n}\n\nexport class FlightClientEntryPlugin {\n  dev: boolean\n  appDir: string\n  encryptionKey: string\n  isEdgeServer: boolean\n  assetPrefix: string\n\n  constructor(options: Options) {\n    this.dev = options.dev\n    this.appDir = options.appDir\n    this.isEdgeServer = options.isEdgeServer\n    this.assetPrefix = !this.dev && !this.isEdgeServer ? '../' : ''\n    this.encryptionKey = options.encryptionKey\n  }\n\n  apply(compiler: webpack.Compiler) {\n    compiler.hooks.compilation.tap(\n      PLUGIN_NAME,\n      (compilation, { normalModuleFactory }) => {\n        compilation.dependencyFactories.set(\n          webpack.dependencies.ModuleDependency,\n          normalModuleFactory\n        )\n        compilation.dependencyTemplates.set(\n          webpack.dependencies.ModuleDependency,\n          new webpack.dependencies.NullDependency.Template()\n        )\n      }\n    )\n\n    compiler.hooks.finishMake.tapPromise(PLUGIN_NAME, (compilation) =>\n      this.createClientEntries(compiler, compilation)\n    )\n\n    compiler.hooks.afterCompile.tap(PLUGIN_NAME, (compilation) => {\n      const recordModule = (modId: string, mod: any) => {\n        // Match Resource is undefined unless an import is using the inline match resource syntax\n        // https://webpack.js.org/api/loaders/#inline-matchresource\n        const modPath = mod.matchResource || mod.resourceResolveData?.path\n        const modQuery = mod.resourceResolveData?.query || ''\n        // query is already part of mod.resource\n        // so it's only necessary to add it for matchResource or mod.resourceResolveData\n        const modResource = modPath\n          ? modPath.startsWith(BARREL_OPTIMIZATION_PREFIX)\n            ? formatBarrelOptimizedResource(mod.resource, modPath)\n            : modPath + modQuery\n          : mod.resource\n\n        if (mod.layer !== WEBPACK_LAYERS.serverSideRendering) {\n          return\n        }\n\n        // Check mod resource to exclude the empty resource module like virtual module created by next-flight-client-entry-loader\n        if (typeof modId !== 'undefined' && modResource) {\n          // Note that this isn't that reliable as webpack is still possible to assign\n          // additional queries to make sure there's no conflict even using the `named`\n          // module ID strategy.\n          let ssrNamedModuleId = path.relative(compiler.context, modResource)\n\n          if (!ssrNamedModuleId.startsWith('.')) {\n            // TODO use getModuleId instead\n            ssrNamedModuleId = `./${normalizePathSep(ssrNamedModuleId)}`\n          }\n\n          if (this.isEdgeServer) {\n            pluginState.edgeServerModuleIds[\n              ssrNamedModuleId.replace(/\\/next\\/dist\\/esm\\//, '/next/dist/')\n            ] = modId\n          } else {\n            pluginState.serverModuleIds[ssrNamedModuleId] = modId\n          }\n        }\n      }\n\n      traverseModules(compilation, (mod, _chunk, _chunkGroup, modId) => {\n        if (mod && mod.resource && !isWebpackServerOnlyLayer(mod.layer)) {\n          if (compilation.moduleGraph.isAsync(mod)) {\n            // The module must has resolved resource path so it's not a new entry created with loader.\n            // Checking the module layer to make sure it's from client layers (SSR or browser, not RSC).\n            pluginState.ASYNC_CLIENT_MODULES[mod.resource] = true\n          }\n        }\n\n        if (modId) recordModule(modId, mod)\n      })\n    })\n\n    compiler.hooks.make.tap(PLUGIN_NAME, (compilation) => {\n      compilation.hooks.processAssets.tapPromise(\n        {\n          name: PLUGIN_NAME,\n          stage: webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_HASH,\n        },\n        (assets) => this.createActionAssets(compilation, assets)\n      )\n    })\n  }\n\n  async createClientEntries(\n    compiler: webpack.Compiler,\n    compilation: webpack.Compilation\n  ) {\n    const addClientEntryAndSSRModulesList: Array<\n      ReturnType<typeof this.injectClientEntryAndSSRModules>\n    > = []\n    const createdSSRDependenciesForEntry: Record<\n      string,\n      ReturnType<typeof this.injectClientEntryAndSSRModules>[2][]\n    > = {}\n\n    const addActionEntryList: Array<ReturnType<typeof this.injectActionEntry>> =\n      []\n    const actionMapsPerEntry: Record<string, Map<string, string[]>> = {}\n    const createdActions = new Set<string>()\n\n    // For each SC server compilation entry, we need to create its corresponding\n    // client component entry.\n    forEachEntryModule(compilation, ({ name, entryModule }) => {\n      const internalClientComponentEntryImports: ClientComponentImports = {}\n      const actionEntryImports = new Map<string, string[]>()\n      const clientEntriesToInject = []\n      const mergedCSSimports: CssImports = {}\n\n      for (const connection of getModuleReferencesInOrder(\n        entryModule,\n        compilation.moduleGraph\n      )) {\n        // Entry can be any user defined entry files such as layout, page, error, loading, etc.\n        const entryRequest = (\n          connection.dependency as unknown as webpack.NormalModule\n        ).request\n\n        const { clientComponentImports, actionImports, cssImports } =\n          this.collectComponentInfoFromServerEntryDependency({\n            entryRequest,\n            compilation,\n            resolvedModule: connection.resolvedModule,\n          })\n\n        actionImports.forEach(([dep, names]) =>\n          actionEntryImports.set(dep, names)\n        )\n\n        const isAbsoluteRequest = path.isAbsolute(entryRequest)\n\n        // Next.js internals are put into a separate entry.\n        if (!isAbsoluteRequest) {\n          Object.keys(clientComponentImports).forEach(\n            (value) => (internalClientComponentEntryImports[value] = new Set())\n          )\n          continue\n        }\n\n        // TODO-APP: Enable these lines. This ensures no entrypoint is created for layout/page when there are no client components.\n        // Currently disabled because it causes test failures in CI.\n        // if (clientImports.length === 0 && actionImports.length === 0) {\n        //   continue\n        // }\n\n        const relativeRequest = isAbsoluteRequest\n          ? path.relative(compilation.options.context!, entryRequest)\n          : entryRequest\n\n        // Replace file suffix as `.js` will be added.\n        const bundlePath = normalizePathSep(\n          relativeRequest.replace(/\\.[^.\\\\/]+$/, '').replace(/^src[\\\\/]/, '')\n        )\n\n        Object.assign(mergedCSSimports, cssImports)\n        clientEntriesToInject.push({\n          compiler,\n          compilation,\n          entryName: name,\n          clientComponentImports,\n          bundlePath,\n          absolutePagePath: entryRequest,\n        })\n\n        // The webpack implementation of writing the client reference manifest relies on all entrypoints writing a page.js even when there is no client components in the page.\n        // It needs the file in order to write the reference manifest for the path in the `.next/server` folder.\n        // TODO-APP: This could be better handled, however Turbopack does not have the same problem as we resolve client components in a single graph.\n        if (\n          name === `app${UNDERSCORE_NOT_FOUND_ROUTE_ENTRY}` &&\n          bundlePath === 'app/not-found'\n        ) {\n          clientEntriesToInject.push({\n            compiler,\n            compilation,\n            entryName: name,\n            clientComponentImports: {},\n            bundlePath: `app${UNDERSCORE_NOT_FOUND_ROUTE_ENTRY}`,\n            absolutePagePath: entryRequest,\n          })\n        }\n      }\n\n      // Make sure CSS imports are deduplicated before injecting the client entry\n      // and SSR modules.\n      const dedupedCSSImports = deduplicateCSSImportsForEntry(mergedCSSimports)\n      for (const clientEntryToInject of clientEntriesToInject) {\n        const injected = this.injectClientEntryAndSSRModules({\n          ...clientEntryToInject,\n          clientImports: {\n            ...clientEntryToInject.clientComponentImports,\n            ...(\n              dedupedCSSImports[clientEntryToInject.absolutePagePath] || []\n            ).reduce((res, curr) => {\n              res[curr] = new Set()\n              return res\n            }, {} as ClientComponentImports),\n          },\n        })\n\n        // Track all created SSR dependencies for each entry from the server layer.\n        if (!createdSSRDependenciesForEntry[clientEntryToInject.entryName]) {\n          createdSSRDependenciesForEntry[clientEntryToInject.entryName] = []\n        }\n        createdSSRDependenciesForEntry[clientEntryToInject.entryName].push(\n          injected[2]\n        )\n\n        addClientEntryAndSSRModulesList.push(injected)\n      }\n\n      // Create internal app\n      addClientEntryAndSSRModulesList.push(\n        this.injectClientEntryAndSSRModules({\n          compiler,\n          compilation,\n          entryName: name,\n          clientImports: { ...internalClientComponentEntryImports },\n          bundlePath: APP_CLIENT_INTERNALS,\n        })\n      )\n\n      if (actionEntryImports.size > 0) {\n        if (!actionMapsPerEntry[name]) {\n          actionMapsPerEntry[name] = new Map()\n        }\n        actionMapsPerEntry[name] = new Map([\n          ...actionMapsPerEntry[name],\n          ...actionEntryImports,\n        ])\n      }\n    })\n\n    for (const [name, actionEntryImports] of Object.entries(\n      actionMapsPerEntry\n    )) {\n      for (const [dep, actionNames] of actionEntryImports) {\n        for (const actionName of actionNames) {\n          createdActions.add(name + '@' + dep + '@' + actionName)\n        }\n      }\n      addActionEntryList.push(\n        this.injectActionEntry({\n          compiler,\n          compilation,\n          actions: actionEntryImports,\n          entryName: name,\n          bundlePath: name,\n        })\n      )\n    }\n\n    // Invalidate in development to trigger recompilation\n    const invalidator = getInvalidator(compiler.outputPath)\n    // Check if any of the entry injections need an invalidation\n    if (\n      invalidator &&\n      addClientEntryAndSSRModulesList.some(\n        ([shouldInvalidate]) => shouldInvalidate === true\n      )\n    ) {\n      invalidator.invalidate([COMPILER_NAMES.client])\n    }\n\n    // Client compiler is invalidated before awaiting the compilation of the SSR client component entries\n    // so that the client compiler is running in parallel to the server compiler.\n    await Promise.all(\n      addClientEntryAndSSRModulesList.map(\n        (addClientEntryAndSSRModules) => addClientEntryAndSSRModules[1]\n      )\n    )\n\n    // Wait for action entries to be added.\n    await Promise.all(addActionEntryList)\n\n    const addedClientActionEntryList: Promise<any>[] = []\n    const actionMapsPerClientEntry: Record<string, Map<string, string[]>> = {}\n\n    // We need to create extra action entries that are created from the\n    // client layer.\n    // Start from each entry's created SSR dependency from our previous step.\n    for (const [name, ssrEntryDependencies] of Object.entries(\n      createdSSRDependenciesForEntry\n    )) {\n      // Collect from all entries, e.g. layout.js, page.js, loading.js, ...\n      // add aggregate them.\n      const actionEntryImports = this.collectClientActionsFromDependencies({\n        compilation,\n        dependencies: ssrEntryDependencies,\n      })\n\n      if (actionEntryImports.size > 0) {\n        if (!actionMapsPerClientEntry[name]) {\n          actionMapsPerClientEntry[name] = new Map()\n        }\n        actionMapsPerClientEntry[name] = new Map([\n          ...actionMapsPerClientEntry[name],\n          ...actionEntryImports,\n        ])\n      }\n    }\n\n    for (const [name, actionEntryImports] of Object.entries(\n      actionMapsPerClientEntry\n    )) {\n      // If an action method is already created in the server layer, we don't\n      // need to create it again in the action layer.\n      // This is to avoid duplicate action instances and make sure the module\n      // state is shared.\n      let remainingClientImportedActions = false\n      const remainingActionEntryImports = new Map<string, string[]>()\n      for (const [dep, actionNames] of actionEntryImports) {\n        const remainingActionNames = []\n        for (const actionName of actionNames) {\n          const id = name + '@' + dep + '@' + actionName\n          if (!createdActions.has(id)) {\n            remainingActionNames.push(actionName)\n          }\n        }\n        if (remainingActionNames.length > 0) {\n          remainingActionEntryImports.set(dep, remainingActionNames)\n          remainingClientImportedActions = true\n        }\n      }\n\n      if (remainingClientImportedActions) {\n        addedClientActionEntryList.push(\n          this.injectActionEntry({\n            compiler,\n            compilation,\n            actions: remainingActionEntryImports,\n            entryName: name,\n            bundlePath: name,\n            fromClient: true,\n          })\n        )\n      }\n    }\n\n    await Promise.all(addedClientActionEntryList)\n  }\n\n  collectClientActionsFromDependencies({\n    compilation,\n    dependencies,\n  }: {\n    compilation: webpack.Compilation\n    dependencies: ReturnType<typeof webpack.EntryPlugin.createDependency>[]\n  }) {\n    // action file path -> action names\n    const collectedActions = new Map<string, string[]>()\n\n    // Keep track of checked modules to avoid infinite loops with recursive imports.\n    const visitedModule = new Set<string>()\n    const visitedEntry = new Set<string>()\n\n    const collectActions = ({\n      entryRequest,\n      resolvedModule,\n    }: {\n      entryRequest: string\n      resolvedModule: any\n    }) => {\n      const collectActionsInDep = (mod: webpack.NormalModule): void => {\n        if (!mod) return\n\n        const modPath: string = mod.resourceResolveData?.path || ''\n        // We have to always use the resolved request here to make sure the\n        // server and client are using the same module path (required by RSC), as\n        // the server compiler and client compiler have different resolve configs.\n        let modRequest: string =\n          modPath + (mod.resourceResolveData?.query || '')\n\n        // For the barrel optimization, we need to use the match resource instead\n        // because there will be 2 modules for the same file (same resource path)\n        // but they're different modules and can't be deduped via `visitedModule`.\n        // The first module is a virtual re-export module created by the loader.\n        if (mod.matchResource?.startsWith(BARREL_OPTIMIZATION_PREFIX)) {\n          modRequest = mod.matchResource + ':' + modRequest\n        }\n\n        if (!modRequest || visitedModule.has(modRequest)) return\n        visitedModule.add(modRequest)\n\n        const actions = getActions(mod)\n        if (actions) {\n          collectedActions.set(modRequest, actions)\n        }\n\n        getModuleReferencesInOrder(mod, compilation.moduleGraph).forEach(\n          (connection) => {\n            collectActionsInDep(\n              connection.resolvedModule as webpack.NormalModule\n            )\n          }\n        )\n      }\n\n      // Don't traverse the module graph anymore once hitting the action layer.\n      if (\n        entryRequest &&\n        !entryRequest.includes('next-flight-action-entry-loader')\n      ) {\n        // Traverse the module graph to find all client components.\n        collectActionsInDep(resolvedModule)\n      }\n    }\n\n    for (const entryDependency of dependencies) {\n      const ssrEntryModule =\n        compilation.moduleGraph.getResolvedModule(entryDependency)!\n      for (const connection of getModuleReferencesInOrder(\n        ssrEntryModule,\n        compilation.moduleGraph\n      )) {\n        const dependency = connection.dependency!\n        const request = (dependency as unknown as webpack.NormalModule).request\n\n        // It is possible that the same entry is added multiple times in the\n        // connection graph. We can just skip these to speed up the process.\n        if (visitedEntry.has(request)) continue\n        visitedEntry.add(request)\n\n        collectActions({\n          entryRequest: request,\n          resolvedModule: connection.resolvedModule,\n        })\n      }\n    }\n\n    return collectedActions\n  }\n\n  collectComponentInfoFromServerEntryDependency({\n    entryRequest,\n    compilation,\n    resolvedModule,\n  }: {\n    entryRequest: string\n    compilation: webpack.Compilation\n    resolvedModule: any /* Dependency */\n  }): {\n    cssImports: CssImports\n    clientComponentImports: ClientComponentImports\n    actionImports: [string, string[]][]\n  } {\n    // Keep track of checked modules to avoid infinite loops with recursive imports.\n    const visited = new Set()\n\n    // Info to collect.\n    const clientComponentImports: ClientComponentImports = {}\n    const actionImports: [string, string[]][] = []\n    const CSSImports = new Set<string>()\n\n    const filterClientComponents = (\n      mod: webpack.NormalModule,\n      importedIdentifiers: string[]\n    ): void => {\n      if (!mod) return\n\n      const isCSS = isCSSMod(mod)\n\n      const modPath: string = mod.resourceResolveData?.path || ''\n      // We have to always use the resolved request here to make sure the\n      // server and client are using the same module path (required by RSC), as\n      // the server compiler and client compiler have different resolve configs.\n      let modRequest: string | undefined =\n        modPath + mod.resourceResolveData?.query\n\n      // Context modules don't have a resource path, we use the identifier instead.\n      if (mod.constructor.name === 'ContextModule') {\n        modRequest = (mod as any)._identifier\n      }\n\n      // For the barrel optimization, we need to use the match resource instead\n      // because there will be 2 modules for the same file (same resource path)\n      // but they're different modules and can't be deduped via `visitedModule`.\n      // The first module is a virtual re-export module created by the loader.\n      if (mod.matchResource?.startsWith(BARREL_OPTIMIZATION_PREFIX)) {\n        modRequest = mod.matchResource + ':' + modRequest\n      }\n\n      if (!modRequest) return\n      if (visited.has(modRequest)) {\n        if (clientComponentImports[modRequest]) {\n          addClientImport(\n            mod,\n            modRequest,\n            clientComponentImports,\n            importedIdentifiers,\n            false\n          )\n        }\n        return\n      }\n      visited.add(modRequest)\n\n      const actions = getActions(mod)\n      if (actions) {\n        actionImports.push([modRequest, actions])\n      }\n\n      const webpackRuntime = this.isEdgeServer\n        ? EDGE_RUNTIME_WEBPACK\n        : DEFAULT_RUNTIME_WEBPACK\n\n      if (isCSS) {\n        const sideEffectFree =\n          mod.factoryMeta && (mod.factoryMeta as any).sideEffectFree\n\n        if (sideEffectFree) {\n          const unused = !compilation.moduleGraph\n            .getExportsInfo(mod)\n            .isModuleUsed(webpackRuntime)\n\n          if (unused) return\n        }\n\n        CSSImports.add(modRequest)\n      } else if (isClientComponentEntryModule(mod)) {\n        if (!clientComponentImports[modRequest]) {\n          clientComponentImports[modRequest] = new Set()\n        }\n        addClientImport(\n          mod,\n          modRequest,\n          clientComponentImports,\n          importedIdentifiers,\n          true\n        )\n\n        return\n      }\n\n      getModuleReferencesInOrder(mod, compilation.moduleGraph).forEach(\n        (connection: any) => {\n          let dependencyIds: string[] = []\n          const depModule = connection.resolvedModule\n\n          // `ids` are the identifiers that are imported from the dependency,\n          // if it's present, it's an array of strings.\n          if (connection.dependency?.ids) {\n            dependencyIds.push(...connection.dependency.ids)\n          } else {\n            dependencyIds = ['*']\n          }\n\n          filterClientComponents(depModule, dependencyIds)\n        }\n      )\n    }\n\n    // Traverse the module graph to find all client components.\n    filterClientComponents(resolvedModule, [])\n\n    return {\n      clientComponentImports,\n      cssImports: CSSImports.size\n        ? {\n            [entryRequest]: Array.from(CSSImports),\n          }\n        : {},\n      actionImports,\n    }\n  }\n\n  injectClientEntryAndSSRModules({\n    compiler,\n    compilation,\n    entryName,\n    clientImports,\n    bundlePath,\n    absolutePagePath,\n  }: {\n    compiler: webpack.Compiler\n    compilation: webpack.Compilation\n    entryName: string\n    clientImports: ClientComponentImports\n    bundlePath: string\n    absolutePagePath?: string\n  }): [\n    shouldInvalidate: boolean,\n    addEntryPromise: Promise<void>,\n    ssrDep: ReturnType<typeof webpack.EntryPlugin.createDependency>,\n  ] {\n    let shouldInvalidate = false\n\n    const loaderOptions: {\n      modules: FlightClientEntryModuleItem[]\n      server: boolean\n    } = {\n      modules: Object.keys(clientImports)\n        .sort((a, b) => (regexCSS.test(b) ? 1 : a.localeCompare(b)))\n        .map((clientImportPath) => ({\n          request: clientImportPath,\n          ids: [...clientImports[clientImportPath]],\n        })),\n      server: false,\n    }\n\n    // For the client entry, we always use the CJS build of Next.js. If the\n    // server is using the ESM build (when using the Edge runtime), we need to\n    // replace them.\n    const clientBrowserLoader = `next-flight-client-entry-loader?${stringify({\n      modules: (this.isEdgeServer\n        ? loaderOptions.modules.map(({ request, ids }) => ({\n            request: request.replace(\n              /[\\\\/]next[\\\\/]dist[\\\\/]esm[\\\\/]/,\n              '/next/dist/'.replace(/\\//g, path.sep)\n            ),\n            ids,\n          }))\n        : loaderOptions.modules\n      ).map((x) => JSON.stringify(x)),\n      server: false,\n    })}!`\n\n    const clientSSRLoader = `next-flight-client-entry-loader?${stringify({\n      modules: loaderOptions.modules.map((x) => JSON.stringify(x)),\n      server: true,\n    })}!`\n\n    // Add for the client compilation\n    // Inject the entry to the client compiler.\n    if (this.dev) {\n      const entries = getEntries(compiler.outputPath)\n      const pageKey = getEntryKey(\n        COMPILER_NAMES.client,\n        PAGE_TYPES.APP,\n        bundlePath\n      )\n\n      if (!entries[pageKey]) {\n        entries[pageKey] = {\n          type: EntryTypes.CHILD_ENTRY,\n          parentEntries: new Set([entryName]),\n          absoluteEntryFilePath: absolutePagePath,\n          bundlePath,\n          request: clientBrowserLoader,\n          dispose: false,\n          lastActiveTime: Date.now(),\n        }\n        shouldInvalidate = true\n      } else {\n        const entryData = entries[pageKey]\n        // New version of the client loader\n        if (entryData.request !== clientBrowserLoader) {\n          entryData.request = clientBrowserLoader\n          shouldInvalidate = true\n        }\n        if (entryData.type === EntryTypes.CHILD_ENTRY) {\n          entryData.parentEntries.add(entryName)\n        }\n        entryData.dispose = false\n        entryData.lastActiveTime = Date.now()\n      }\n    } else {\n      pluginState.injectedClientEntries[bundlePath] = clientBrowserLoader\n    }\n\n    // Inject the entry to the server compiler (__ssr__).\n    const clientComponentEntryDep = webpack.EntryPlugin.createDependency(\n      clientSSRLoader,\n      {\n        name: bundlePath,\n      }\n    )\n\n    return [\n      shouldInvalidate,\n      // Add the dependency to the server compiler.\n      // This promise is awaited later using `Promise.all` in order to parallelize adding the entries.\n      // It ensures we can parallelize the SSR and Client compiler entries.\n      this.addEntry(\n        compilation,\n        // Reuse compilation context.\n        compiler.context,\n        clientComponentEntryDep,\n        {\n          // By using the same entry name\n          name: entryName,\n          // Layer should be client for the SSR modules\n          // This ensures the client components are bundled on client layer\n          layer: WEBPACK_LAYERS.serverSideRendering,\n        }\n      ),\n      clientComponentEntryDep,\n    ]\n  }\n\n  injectActionEntry({\n    compiler,\n    compilation,\n    actions,\n    entryName,\n    bundlePath,\n    fromClient,\n  }: {\n    compiler: webpack.Compiler\n    compilation: webpack.Compilation\n    actions: Map<string, string[]>\n    entryName: string\n    bundlePath: string\n    fromClient?: boolean\n  }) {\n    const actionsArray = Array.from(actions.entries())\n\n    const actionLoader = `next-flight-action-entry-loader?${stringify({\n      actions: JSON.stringify(actionsArray),\n      __client_imported__: fromClient,\n    })}!`\n\n    const currentCompilerServerActions = this.isEdgeServer\n      ? pluginState.edgeServerActions\n      : pluginState.serverActions\n    for (const [p, names] of actionsArray) {\n      for (const name of names) {\n        const id = generateActionId(p, name)\n        if (typeof currentCompilerServerActions[id] === 'undefined') {\n          currentCompilerServerActions[id] = {\n            workers: {},\n            layer: {},\n          }\n        }\n        currentCompilerServerActions[id].workers[bundlePath] = ''\n        currentCompilerServerActions[id].layer[bundlePath] = fromClient\n          ? WEBPACK_LAYERS.actionBrowser\n          : WEBPACK_LAYERS.reactServerComponents\n      }\n    }\n\n    // Inject the entry to the server compiler\n    const actionEntryDep = webpack.EntryPlugin.createDependency(actionLoader, {\n      name: bundlePath,\n    })\n\n    return this.addEntry(\n      compilation,\n      // Reuse compilation context.\n      compiler.context,\n      actionEntryDep,\n      {\n        name: entryName,\n        layer: fromClient\n          ? WEBPACK_LAYERS.actionBrowser\n          : WEBPACK_LAYERS.reactServerComponents,\n      }\n    )\n  }\n\n  addEntry(\n    compilation: any,\n    context: string,\n    dependency: webpack.Dependency,\n    options: webpack.EntryOptions\n  ): Promise<any> /* Promise<module> */ {\n    return new Promise((resolve, reject) => {\n      const entry = compilation.entries.get(options.name)\n      entry.includeDependencies.push(dependency)\n      compilation.hooks.addEntry.call(entry, options)\n      compilation.addModuleTree(\n        {\n          context,\n          dependency,\n          contextInfo: { issuerLayer: options.layer },\n        },\n        (err: Error | undefined, module: any) => {\n          if (err) {\n            compilation.hooks.failedEntry.call(dependency, options, err)\n            return reject(err)\n          }\n\n          compilation.hooks.succeedEntry.call(dependency, options, module)\n          return resolve(module)\n        }\n      )\n    })\n  }\n\n  async createActionAssets(\n    compilation: webpack.Compilation,\n    assets: webpack.Compilation['assets']\n  ) {\n    const serverActions: ActionManifest['node'] = {}\n    const edgeServerActions: ActionManifest['edge'] = {}\n\n    traverseModules(compilation, (mod, _chunk, chunkGroup, modId) => {\n      // Go through all action entries and record the module ID for each entry.\n      if (\n        chunkGroup.name &&\n        mod.request &&\n        modId &&\n        /next-flight-action-entry-loader/.test(mod.request)\n      ) {\n        const fromClient = /&__client_imported__=true/.test(mod.request)\n\n        const mapping = this.isEdgeServer\n          ? pluginState.actionModEdgeServerId\n          : pluginState.actionModServerId\n\n        if (!mapping[chunkGroup.name]) {\n          mapping[chunkGroup.name] = {}\n        }\n        mapping[chunkGroup.name][fromClient ? 'client' : 'server'] = modId\n      }\n    })\n\n    for (let id in pluginState.serverActions) {\n      const action = pluginState.serverActions[id]\n      for (let name in action.workers) {\n        const modId =\n          pluginState.actionModServerId[name][\n            action.layer[name] === WEBPACK_LAYERS.actionBrowser\n              ? 'client'\n              : 'server'\n          ]\n        action.workers[name] = modId!\n      }\n      serverActions[id] = action\n    }\n\n    for (let id in pluginState.edgeServerActions) {\n      const action = pluginState.edgeServerActions[id]\n      for (let name in action.workers) {\n        const modId =\n          pluginState.actionModEdgeServerId[name][\n            action.layer[name] === WEBPACK_LAYERS.actionBrowser\n              ? 'client'\n              : 'server'\n          ]\n        action.workers[name] = modId!\n      }\n      edgeServerActions[id] = action\n    }\n\n    const serverManifest = {\n      node: serverActions,\n      edge: edgeServerActions,\n      encryptionKey: this.encryptionKey,\n    }\n    const edgeServerManifest = {\n      ...serverManifest,\n      encryptionKey: 'process.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY',\n    }\n\n    const json = JSON.stringify(serverManifest, null, this.dev ? 2 : undefined)\n    const edgeJson = JSON.stringify(\n      edgeServerManifest,\n      null,\n      this.dev ? 2 : undefined\n    )\n\n    assets[`${this.assetPrefix}${SERVER_REFERENCE_MANIFEST}.js`] =\n      new sources.RawSource(\n        `self.__RSC_SERVER_MANIFEST=${JSON.stringify(edgeJson)}`\n      ) as unknown as webpack.sources.RawSource\n    assets[`${this.assetPrefix}${SERVER_REFERENCE_MANIFEST}.json`] =\n      new sources.RawSource(json) as unknown as webpack.sources.RawSource\n  }\n}\n\nfunction addClientImport(\n  mod: webpack.NormalModule,\n  modRequest: string,\n  clientComponentImports: ClientComponentImports,\n  importedIdentifiers: string[],\n  isFirstImport: boolean\n) {\n  const clientEntryType = getModuleBuildInfo(mod).rsc?.clientEntryType\n  const isCjsModule = clientEntryType === 'cjs'\n  const assumedSourceType = getAssumedSourceType(\n    mod,\n    isCjsModule ? 'commonjs' : 'auto'\n  )\n\n  const clientImportsSet = clientComponentImports[modRequest]\n\n  if (importedIdentifiers[0] === '*') {\n    // If there's collected import path with named import identifiers,\n    // or there's nothing in collected imports are empty.\n    // we should include the whole module.\n    if (!isFirstImport && [...clientImportsSet][0] !== '*') {\n      clientComponentImports[modRequest] = new Set(['*'])\n    }\n  } else {\n    const isAutoModuleSourceType = assumedSourceType === 'auto'\n    if (isAutoModuleSourceType) {\n      clientComponentImports[modRequest] = new Set(['*'])\n    } else {\n      // If it's not analyzed as named ESM exports, e.g. if it's mixing `export *` with named exports,\n      // We'll include all modules since it's not able to do tree-shaking.\n      for (const name of importedIdentifiers) {\n        // For cjs module default import, we include the whole module since\n        const isCjsDefaultImport = isCjsModule && name === 'default'\n\n        // Always include __esModule along with cjs module default export,\n        // to make sure it work with client module proxy from React.\n        if (isCjsDefaultImport) {\n          clientComponentImports[modRequest].add('__esModule')\n        }\n\n        clientComponentImports[modRequest].add(name)\n      }\n    }\n  }\n}\n"],"names":["FlightClientEntryPlugin","PLUGIN_NAME","pluginState","getProxiedPluginState","serverActions","edgeServerActions","actionModServerId","actionModEdgeServerId","serverModuleIds","edgeServerModuleIds","ASYNC_CLIENT_MODULES","injectedClientEntries","deduplicateCSSImportsForEntry","mergedCSSimports","sortedCSSImports","Object","entries","sort","a","b","aPath","bPath","aDepth","split","length","bDepth","aName","path","parse","name","bName","indexA","indexOf","indexB","dedupedCSSImports","trackedCSSImports","Set","entryName","cssImports","cssImport","has","filename","includes","add","push","constructor","options","dev","appDir","isEdgeServer","assetPrefix","encryptionKey","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","webpack","dependencies","ModuleDependency","dependencyTemplates","NullDependency","Template","finishMake","tapPromise","createClientEntries","afterCompile","recordModule","modId","mod","modPath","matchResource","resourceResolveData","modQuery","query","modResource","startsWith","BARREL_OPTIMIZATION_PREFIX","formatBarrelOptimizedResource","resource","layer","WEBPACK_LAYERS","serverSideRendering","ssrNamedModuleId","relative","context","normalizePathSep","replace","traverseModules","_chunk","_chunkGroup","isWebpackServerOnlyLayer","moduleGraph","isAsync","make","processAssets","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_HASH","assets","createActionAssets","addClientEntryAndSSRModulesList","createdSSRDependenciesForEntry","addActionEntryList","actionMapsPerEntry","createdActions","forEachEntryModule","entryModule","internalClientComponentEntryImports","actionEntryImports","Map","clientEntriesToInject","connection","getModuleReferencesInOrder","entryRequest","dependency","request","clientComponentImports","actionImports","collectComponentInfoFromServerEntryDependency","resolvedModule","forEach","dep","names","isAbsoluteRequest","isAbsolute","keys","value","relativeRequest","bundlePath","assign","absolutePagePath","UNDERSCORE_NOT_FOUND_ROUTE_ENTRY","clientEntryToInject","injected","injectClientEntryAndSSRModules","clientImports","reduce","res","curr","APP_CLIENT_INTERNALS","size","actionNames","actionName","injectActionEntry","actions","invalidator","getInvalidator","outputPath","some","shouldInvalidate","invalidate","COMPILER_NAMES","client","Promise","all","map","addClientEntryAndSSRModules","addedClientActionEntryList","actionMapsPerClientEntry","ssrEntryDependencies","collectClientActionsFromDependencies","remainingClientImportedActions","remainingActionEntryImports","remainingActionNames","id","fromClient","collectedActions","visitedModule","visitedEntry","collectActions","collectActionsInDep","modRequest","getActions","entryDependency","ssrEntryModule","getResolvedModule","visited","CSSImports","filterClientComponents","importedIdentifiers","isCSS","isCSSMod","_identifier","addClientImport","webpackRuntime","EDGE_RUNTIME_WEBPACK","DEFAULT_RUNTIME_WEBPACK","sideEffectFree","factoryMeta","unused","getExportsInfo","isModuleUsed","isClientComponentEntryModule","dependencyIds","depModule","ids","Array","from","loaderOptions","modules","regexCSS","test","localeCompare","clientImportPath","server","clientBrowserLoader","stringify","sep","x","JSON","clientSSRLoader","getEntries","pageKey","getEntryKey","PAGE_TYPES","APP","type","EntryTypes","CHILD_ENTRY","parentEntries","absoluteEntryFilePath","dispose","lastActiveTime","Date","now","entryData","clientComponentEntryDep","EntryPlugin","createDependency","addEntry","actionsArray","actionLoader","__client_imported__","currentCompilerServerActions","p","generateActionId","workers","actionBrowser","reactServerComponents","actionEntryDep","resolve","reject","entry","get","includeDependencies","call","addModuleTree","contextInfo","issuerLayer","err","module","failedEntry","succeedEntry","chunkGroup","mapping","action","serverManifest","node","edge","edgeServerManifest","json","undefined","edgeJson","SERVER_REFERENCE_MANIFEST","sources","RawSource","isFirstImport","getModuleBuildInfo","clientEntryType","rsc","isCjsModule","assumedSourceType","getAssumedSourceType","clientImportsSet","isAutoModuleSourceType","isCjsDefaultImport"],"mappings":"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"}