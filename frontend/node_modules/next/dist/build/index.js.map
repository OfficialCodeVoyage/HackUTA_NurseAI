{"version":3,"sources":["../../src/build/index.ts"],"sourcesContent":["import type { AppBuildManifest } from './webpack/plugins/app-build-manifest-plugin'\nimport type { PagesManifest } from './webpack/plugins/pages-manifest-plugin'\nimport type { ExportPathMap, NextConfigComplete } from '../server/config-shared'\nimport type { MiddlewareManifest } from './webpack/plugins/middleware-plugin'\nimport type { ActionManifest } from './webpack/plugins/flight-client-entry-plugin'\nimport type { ExportAppOptions } from '../export/types'\nimport type { Revalidate } from '../server/lib/revalidate'\n\nimport '../lib/setup-exception-listeners'\n\nimport { loadEnvConfig, type LoadedEnvFiles } from '@next/env'\nimport { bold, yellow } from '../lib/picocolors'\nimport crypto from 'crypto'\nimport { makeRe } from 'next/dist/compiled/picomatch'\nimport { existsSync, promises as fs } from 'fs'\nimport os from 'os'\nimport { Worker } from '../lib/worker'\nimport { defaultConfig } from '../server/config-shared'\nimport devalue from 'next/dist/compiled/devalue'\nimport findUp from 'next/dist/compiled/find-up'\nimport { nanoid } from 'next/dist/compiled/nanoid/index.cjs'\nimport { Sema } from 'next/dist/compiled/async-sema'\nimport path from 'path'\nimport {\n  STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR,\n  PUBLIC_DIR_MIDDLEWARE_CONFLICT,\n  MIDDLEWARE_FILENAME,\n  PAGES_DIR_ALIAS,\n  INSTRUMENTATION_HOOK_FILENAME,\n  RSC_PREFETCH_SUFFIX,\n  RSC_SUFFIX,\n} from '../lib/constants'\nimport { FileType, fileExists } from '../lib/file-exists'\nimport { findPagesDir } from '../lib/find-pages-dir'\nimport loadCustomRoutes, {\n  normalizeRouteRegex,\n} from '../lib/load-custom-routes'\nimport type {\n  CustomRoutes,\n  Header,\n  Redirect,\n  Rewrite,\n  RouteHas,\n} from '../lib/load-custom-routes'\nimport { nonNullable } from '../lib/non-nullable'\nimport { recursiveDelete } from '../lib/recursive-delete'\nimport { verifyPartytownSetup } from '../lib/verify-partytown-setup'\nimport { validateTurboNextConfig } from '../lib/turbopack-warning'\nimport {\n  BUILD_ID_FILE,\n  BUILD_MANIFEST,\n  CLIENT_STATIC_FILES_PATH,\n  EXPORT_DETAIL,\n  EXPORT_MARKER,\n  AUTOMATIC_FONT_OPTIMIZATION_MANIFEST,\n  IMAGES_MANIFEST,\n  PAGES_MANIFEST,\n  PHASE_PRODUCTION_BUILD,\n  PRERENDER_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  ROUTES_MANIFEST,\n  SERVER_DIRECTORY,\n  SERVER_FILES_MANIFEST,\n  STATIC_STATUS_PAGES,\n  MIDDLEWARE_MANIFEST,\n  APP_PATHS_MANIFEST,\n  APP_PATH_ROUTES_MANIFEST,\n  APP_BUILD_MANIFEST,\n  RSC_MODULE_TYPES,\n  NEXT_FONT_MANIFEST,\n  SUBRESOURCE_INTEGRITY_MANIFEST,\n  MIDDLEWARE_BUILD_MANIFEST,\n  MIDDLEWARE_REACT_LOADABLE_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n  FUNCTIONS_CONFIG_MANIFEST,\n  UNDERSCORE_NOT_FOUND_ROUTE_ENTRY,\n  UNDERSCORE_NOT_FOUND_ROUTE,\n} from '../shared/lib/constants'\nimport { getSortedRoutes, isDynamicRoute } from '../shared/lib/router/utils'\nimport type { __ApiPreviewProps } from '../server/api-utils'\nimport loadConfig from '../server/config'\nimport type { BuildManifest } from '../server/get-page-files'\nimport { normalizePagePath } from '../shared/lib/page-path/normalize-page-path'\nimport { getPagePath } from '../server/require'\nimport * as ciEnvironment from '../telemetry/ci-info'\nimport {\n  turborepoTraceAccess,\n  TurborepoAccessTraceResult,\n  writeTurborepoAccessTraceResult,\n} from './turborepo-access-trace'\n\nimport {\n  eventBuildOptimize,\n  eventCliSession,\n  eventBuildFeatureUsage,\n  eventNextPlugins,\n  EVENT_BUILD_FEATURE_USAGE,\n  eventPackageUsedInGetServerSideProps,\n  eventBuildCompleted,\n} from '../telemetry/events'\nimport type { EventBuildFeatureUsage } from '../telemetry/events'\nimport { Telemetry } from '../telemetry/storage'\nimport { getPageStaticInfo } from './analysis/get-page-static-info'\nimport { createPagesMapping, getPageFromPath, sortByPageExts } from './entries'\nimport { PAGE_TYPES } from '../lib/page-types'\nimport { generateBuildId } from './generate-build-id'\nimport { isWriteable } from './is-writeable'\nimport * as Log from './output/log'\nimport createSpinner from './spinner'\nimport { trace, flushAllTraces, setGlobal, type Span } from '../trace'\nimport {\n  detectConflictingPaths,\n  computeFromManifest,\n  getJsPageSizeInKb,\n  printCustomRoutes,\n  printTreeView,\n  copyTracedFiles,\n  isReservedPage,\n  isAppBuiltinNotFoundPage,\n  collectRoutesUsingEdgeRuntime,\n} from './utils'\nimport type { PageInfo, PageInfos, AppConfig } from './utils'\nimport { writeBuildId } from './write-build-id'\nimport { normalizeLocalePath } from '../shared/lib/i18n/normalize-locale-path'\nimport isError from '../lib/is-error'\nimport type { NextError } from '../lib/is-error'\nimport { isEdgeRuntime } from '../lib/is-edge-runtime'\nimport { recursiveCopy } from '../lib/recursive-copy'\nimport { recursiveReadDir } from '../lib/recursive-readdir'\nimport {\n  loadBindings,\n  lockfilePatchPromise,\n  teardownTraceSubscriber,\n  teardownHeapProfiler,\n  createDefineEnv,\n} from './swc'\nimport { getNamedRouteRegex } from '../shared/lib/router/utils/route-regex'\nimport { getFilesInDir } from '../lib/get-files-in-dir'\nimport { eventSwcPlugins } from '../telemetry/events/swc-plugins'\nimport { normalizeAppPath } from '../shared/lib/router/utils/app-paths'\nimport {\n  ACTION_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  RSC_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n} from '../client/components/app-router-headers'\nimport { webpackBuild } from './webpack-build'\nimport { NextBuildContext, type MappedPages } from './build-context'\nimport { normalizePathSep } from '../shared/lib/page-path/normalize-path-sep'\nimport { isAppRouteRoute } from '../lib/is-app-route-route'\nimport { createClientRouterFilter } from '../lib/create-client-router-filter'\nimport { createValidFileMatcher } from '../server/lib/find-page-file'\nimport { startTypeChecking } from './type-check'\nimport { generateInterceptionRoutesRewrites } from '../lib/generate-interception-routes-rewrites'\n\nimport { buildDataRoute } from '../server/lib/router-utils/build-data-route'\nimport { collectBuildTraces } from './collect-build-traces'\nimport type { BuildTraceContext } from './webpack/plugins/next-trace-entrypoints-plugin'\nimport { formatManifest } from './manifests/formatter/format-manifest'\nimport {\n  recordFrameworkVersion,\n  updateBuildDiagnostics,\n} from '../diagnostics/build-diagnostics'\nimport { getStartServerInfo, logStartInfo } from '../server/lib/app-info-log'\nimport type { NextEnabledDirectories } from '../server/base-server'\nimport { hasCustomExportOutput } from '../export/utils'\nimport {\n  getTurbopackJsConfig,\n  handleEntrypoints,\n  type EntryIssuesMap,\n  handleRouteType,\n  handlePagesErrorRoute,\n  formatIssue,\n  isRelevantWarning,\n} from '../server/dev/turbopack-utils'\nimport { TurbopackManifestLoader } from '../server/dev/turbopack/manifest-loader'\nimport type { Entrypoints } from '../server/dev/turbopack/types'\nimport { buildCustomRoute } from '../lib/build-custom-route'\nimport { createProgress } from './progress'\nimport { traceMemoryUsage } from '../lib/memory/trace'\nimport { generateEncryptionKeyBase64 } from '../server/app-render/encryption-utils'\nimport type { DeepReadonly } from '../shared/lib/deep-readonly'\nimport uploadTrace from '../trace/upload-trace'\nimport {\n  checkIsAppPPREnabled,\n  checkIsRoutePPREnabled,\n} from '../server/lib/experimental/ppr'\nimport {\n  detectChangedEntries,\n  type DetectedEntriesResult,\n} from './flying-shuttle/detect-changed-entries'\nimport { storeShuttle } from './flying-shuttle/store-shuttle'\nimport { stitchBuilds } from './flying-shuttle/stitch-builds'\n\ninterface ExperimentalBypassForInfo {\n  experimentalBypassFor?: RouteHas[]\n}\n\ninterface ExperimentalPPRInfo {\n  experimentalPPR: boolean | undefined\n}\n\ninterface DataRouteRouteInfo {\n  dataRoute: string | null\n  prefetchDataRoute: string | null | undefined\n}\n\nexport interface SsgRoute\n  extends ExperimentalBypassForInfo,\n    DataRouteRouteInfo,\n    ExperimentalPPRInfo {\n  initialRevalidateSeconds: Revalidate\n  srcRoute: string | null\n  initialStatus?: number\n  initialHeaders?: Record<string, string>\n}\n\nexport interface DynamicSsgRoute\n  extends ExperimentalBypassForInfo,\n    DataRouteRouteInfo,\n    ExperimentalPPRInfo {\n  fallback: string | null | false\n  routeRegex: string\n  dataRouteRegex: string | null\n  prefetchDataRouteRegex: string | null | undefined\n}\n\nexport type PrerenderManifest = {\n  version: 4\n  routes: { [route: string]: SsgRoute }\n  dynamicRoutes: { [route: string]: DynamicSsgRoute }\n  notFoundRoutes: string[]\n  preview: __ApiPreviewProps\n}\n\ntype ManifestBuiltRoute = {\n  /**\n   * The route pattern used to match requests for this route.\n   */\n  regex: string\n}\n\nexport type ManifestRewriteRoute = ManifestBuiltRoute & Rewrite\nexport type ManifestRedirectRoute = ManifestBuiltRoute & Redirect\nexport type ManifestHeaderRoute = ManifestBuiltRoute & Header\n\nexport type ManifestRoute = ManifestBuiltRoute & {\n  page: string\n  namedRegex?: string\n  routeKeys?: { [key: string]: string }\n}\n\nexport type ManifestDataRoute = {\n  page: string\n  routeKeys?: { [key: string]: string }\n  dataRouteRegex: string\n  namedDataRouteRegex?: string\n}\n\nexport type RoutesManifest = {\n  version: number\n  pages404: boolean\n  basePath: string\n  redirects: Array<Redirect>\n  rewrites?:\n    | Array<ManifestRewriteRoute>\n    | {\n        beforeFiles: Array<ManifestRewriteRoute>\n        afterFiles: Array<ManifestRewriteRoute>\n        fallback: Array<ManifestRewriteRoute>\n      }\n  headers: Array<ManifestHeaderRoute>\n  staticRoutes: Array<ManifestRoute>\n  dynamicRoutes: Array<ManifestRoute>\n  dataRoutes: Array<ManifestDataRoute>\n  i18n?: {\n    domains?: Array<{\n      http?: true\n      domain: string\n      locales?: string[]\n      defaultLocale: string\n    }>\n    locales: string[]\n    defaultLocale: string\n    localeDetection?: false\n  }\n  rsc: {\n    header: typeof RSC_HEADER\n    didPostponeHeader: typeof NEXT_DID_POSTPONE_HEADER\n    varyHeader: string\n    prefetchHeader: typeof NEXT_ROUTER_PREFETCH_HEADER\n    suffix: typeof RSC_SUFFIX\n    prefetchSuffix: typeof RSC_PREFETCH_SUFFIX\n  }\n  skipMiddlewareUrlNormalize?: boolean\n  caseSensitive?: boolean\n}\n\nfunction pageToRoute(page: string) {\n  const routeRegex = getNamedRouteRegex(page, true)\n  return {\n    page,\n    regex: normalizeRouteRegex(routeRegex.re.source),\n    routeKeys: routeRegex.routeKeys,\n    namedRegex: routeRegex.namedRegex,\n  }\n}\n\nfunction getCacheDir(distDir: string): string {\n  const cacheDir = path.join(distDir, 'cache')\n  if (ciEnvironment.isCI && !ciEnvironment.hasNextSupport) {\n    const hasCache = existsSync(cacheDir)\n\n    if (!hasCache) {\n      // Intentionally not piping to stderr which is what `Log.warn` does in case people fail in CI when\n      // stderr is detected.\n      console.log(\n        `${Log.prefixes.warn} No build cache found. Please configure build caching for faster rebuilds. Read more: https://nextjs.org/docs/messages/no-cache`\n      )\n    }\n  }\n  return cacheDir\n}\n\nasync function writeFileUtf8(filePath: string, content: string): Promise<void> {\n  await fs.writeFile(filePath, content, 'utf-8')\n}\n\nfunction readFileUtf8(filePath: string): Promise<string> {\n  return fs.readFile(filePath, 'utf8')\n}\n\nasync function writeManifest<T extends object>(\n  filePath: string,\n  manifest: T\n): Promise<void> {\n  await writeFileUtf8(filePath, formatManifest(manifest))\n}\n\nasync function readManifest<T extends object>(filePath: string): Promise<T> {\n  return JSON.parse(await readFileUtf8(filePath))\n}\n\nasync function writePrerenderManifest(\n  distDir: string,\n  manifest: DeepReadonly<PrerenderManifest>\n): Promise<void> {\n  await writeManifest(path.join(distDir, PRERENDER_MANIFEST), manifest)\n}\n\nasync function writeClientSsgManifest(\n  prerenderManifest: DeepReadonly<PrerenderManifest>,\n  {\n    buildId,\n    distDir,\n    locales,\n  }: { buildId: string; distDir: string; locales: string[] }\n) {\n  const ssgPages = new Set<string>(\n    [\n      ...Object.entries(prerenderManifest.routes)\n        // Filter out dynamic routes\n        .filter(([, { srcRoute }]) => srcRoute == null)\n        .map(([route]) => normalizeLocalePath(route, locales).pathname),\n      ...Object.keys(prerenderManifest.dynamicRoutes),\n    ].sort()\n  )\n\n  const clientSsgManifestContent = `self.__SSG_MANIFEST=${devalue(\n    ssgPages\n  )};self.__SSG_MANIFEST_CB&&self.__SSG_MANIFEST_CB()`\n\n  await writeFileUtf8(\n    path.join(distDir, CLIENT_STATIC_FILES_PATH, buildId, '_ssgManifest.js'),\n    clientSsgManifestContent\n  )\n}\n\ninterface FunctionsConfigManifest {\n  version: number\n  functions: Record<string, Record<string, string | number>>\n}\n\nasync function writeFunctionsConfigManifest(\n  distDir: string,\n  manifest: FunctionsConfigManifest\n): Promise<void> {\n  await writeManifest(\n    path.join(distDir, SERVER_DIRECTORY, FUNCTIONS_CONFIG_MANIFEST),\n    manifest\n  )\n}\n\ninterface RequiredServerFilesManifest {\n  version: number\n  config: NextConfigComplete\n  appDir: string\n  relativeAppDir: string\n  files: string[]\n  ignore: string[]\n}\n\nasync function writeRequiredServerFilesManifest(\n  distDir: string,\n  requiredServerFiles: RequiredServerFilesManifest\n) {\n  await writeManifest(\n    path.join(distDir, SERVER_FILES_MANIFEST),\n    requiredServerFiles\n  )\n}\n\nasync function writeImagesManifest(\n  distDir: string,\n  config: NextConfigComplete\n): Promise<void> {\n  const images = { ...config.images }\n  const { deviceSizes, imageSizes } = images\n  ;(images as any).sizes = [...deviceSizes, ...imageSizes]\n  images.remotePatterns = (config?.images?.remotePatterns || []).map((p) => ({\n    // Should be the same as matchRemotePattern()\n    protocol: p.protocol,\n    hostname: makeRe(p.hostname).source,\n    port: p.port,\n    pathname: makeRe(p.pathname ?? '**', { dot: true }).source,\n  }))\n\n  await writeManifest(path.join(distDir, IMAGES_MANIFEST), {\n    version: 1,\n    images,\n  })\n}\n\nconst STANDALONE_DIRECTORY = 'standalone' as const\nasync function writeStandaloneDirectory(\n  nextBuildSpan: Span,\n  distDir: string,\n  pageKeys: { pages: string[]; app: string[] | undefined },\n  denormalizedAppPages: string[] | undefined,\n  outputFileTracingRoot: string,\n  requiredServerFiles: RequiredServerFilesManifest,\n  middlewareManifest: MiddlewareManifest,\n  hasInstrumentationHook: boolean,\n  staticPages: Set<string>,\n  loadedEnvFiles: LoadedEnvFiles,\n  appDir: string | undefined\n) {\n  await nextBuildSpan\n    .traceChild('write-standalone-directory')\n    .traceAsyncFn(async () => {\n      await copyTracedFiles(\n        // requiredServerFiles.appDir Refers to the application directory, not App Router.\n        requiredServerFiles.appDir,\n        distDir,\n        pageKeys.pages,\n        denormalizedAppPages,\n        outputFileTracingRoot,\n        requiredServerFiles.config,\n        middlewareManifest,\n        hasInstrumentationHook,\n        staticPages\n      )\n\n      for (const file of [\n        ...requiredServerFiles.files,\n        path.join(requiredServerFiles.config.distDir, SERVER_FILES_MANIFEST),\n        ...loadedEnvFiles.reduce<string[]>((acc, envFile) => {\n          if (['.env', '.env.production'].includes(envFile.path)) {\n            acc.push(envFile.path)\n          }\n          return acc\n        }, []),\n      ]) {\n        // requiredServerFiles.appDir Refers to the application directory, not App Router.\n        const filePath = path.join(requiredServerFiles.appDir, file)\n        const outputPath = path.join(\n          distDir,\n          STANDALONE_DIRECTORY,\n          path.relative(outputFileTracingRoot, filePath)\n        )\n        await fs.mkdir(path.dirname(outputPath), {\n          recursive: true,\n        })\n        await fs.copyFile(filePath, outputPath)\n      }\n      await recursiveCopy(\n        path.join(distDir, SERVER_DIRECTORY, 'pages'),\n        path.join(\n          distDir,\n          STANDALONE_DIRECTORY,\n          path.relative(outputFileTracingRoot, distDir),\n          SERVER_DIRECTORY,\n          'pages'\n        ),\n        { overwrite: true }\n      )\n      if (appDir) {\n        const originalServerApp = path.join(distDir, SERVER_DIRECTORY, 'app')\n        if (existsSync(originalServerApp)) {\n          await recursiveCopy(\n            originalServerApp,\n            path.join(\n              distDir,\n              STANDALONE_DIRECTORY,\n              path.relative(outputFileTracingRoot, distDir),\n              SERVER_DIRECTORY,\n              'app'\n            ),\n            { overwrite: true }\n          )\n        }\n      }\n    })\n}\n\nfunction getNumberOfWorkers(config: NextConfigComplete) {\n  if (\n    config.experimental.cpus &&\n    config.experimental.cpus !== defaultConfig.experimental!.cpus\n  ) {\n    return config.experimental.cpus\n  }\n\n  if (config.experimental.memoryBasedWorkersCount) {\n    return Math.max(\n      Math.min(config.experimental.cpus || 1, Math.floor(os.freemem() / 1e9)),\n      // enforce a minimum of 4 workers\n      4\n    )\n  }\n\n  if (config.experimental.cpus) {\n    return config.experimental.cpus\n  }\n\n  // Fall back to 4 workers if a count is not specified\n  return 4\n}\n\nconst staticWorkerPath = require.resolve('./worker')\nconst staticWorkerExposedMethods = [\n  'hasCustomGetInitialProps',\n  'isPageStatic',\n  'getDefinedNamedExports',\n  'exportPage',\n] as const\ntype StaticWorker = typeof import('./worker') & Worker\ntype PageDataCollectionKeys = Exclude<\n  (typeof staticWorkerExposedMethods)[number],\n  'exportPage'\n>\n\nfunction createStaticWorker(config: NextConfigComplete): StaticWorker {\n  let infoPrinted = false\n  const timeout = config.staticPageGenerationTimeout || 0\n\n  return new Worker(staticWorkerPath, {\n    timeout: timeout * 1000,\n    logger: Log,\n    onRestart: (method, args, attempts) => {\n      if (method === 'exportPage') {\n        const [arg] = args as Parameters<StaticWorker['exportPage']>\n        const pagePath = arg.path\n        if (attempts >= 3) {\n          throw new Error(\n            `Static page generation for ${pagePath} is still timing out after 3 attempts. See more info here https://nextjs.org/docs/messages/static-page-generation-timeout`\n          )\n        }\n        Log.warn(\n          `Restarted static page generation for ${pagePath} because it took more than ${timeout} seconds`\n        )\n      } else {\n        const [arg] = args as Parameters<StaticWorker[PageDataCollectionKeys]>\n        const pagePath = arg.page\n        if (attempts >= 2) {\n          throw new Error(\n            `Collecting page data for ${pagePath} is still timing out after 2 attempts. See more info here https://nextjs.org/docs/messages/page-data-collection-timeout`\n          )\n        }\n        Log.warn(\n          `Restarted collecting page data for ${pagePath} because it took more than ${timeout} seconds`\n        )\n      }\n      if (!infoPrinted) {\n        Log.warn(\n          'See more info here https://nextjs.org/docs/messages/static-page-generation-timeout'\n        )\n        infoPrinted = true\n      }\n    },\n    numWorkers: getNumberOfWorkers(config),\n    forkOptions: {\n      env: process.env,\n    },\n    enableWorkerThreads: config.experimental.workerThreads,\n    exposedMethods: staticWorkerExposedMethods,\n  }) as StaticWorker\n}\n\nasync function writeFullyStaticExport(\n  config: NextConfigComplete,\n  dir: string,\n  enabledDirectories: NextEnabledDirectories,\n  configOutDir: string,\n  nextBuildSpan: Span\n): Promise<void> {\n  const exportApp = require('../export')\n    .default as typeof import('../export').default\n\n  const pagesWorker = createStaticWorker(config)\n  const appWorker = createStaticWorker(config)\n\n  await exportApp(\n    dir,\n    {\n      buildExport: false,\n      nextConfig: config,\n      enabledDirectories,\n      silent: true,\n      outdir: path.join(dir, configOutDir),\n      // The worker already explicitly binds `this` to each of the\n      // exposed methods.\n      exportAppPageWorker: appWorker?.exportPage,\n      exportPageWorker: pagesWorker?.exportPage,\n      endWorker: async () => {\n        await pagesWorker.end()\n        await appWorker.end()\n      },\n    },\n    nextBuildSpan\n  )\n\n  // ensure the worker is not left hanging\n  pagesWorker.close()\n  appWorker.close()\n}\n\nasync function getBuildId(\n  isGenerateMode: boolean,\n  distDir: string,\n  nextBuildSpan: Span,\n  config: NextConfigComplete\n) {\n  if (isGenerateMode) {\n    return await fs.readFile(path.join(distDir, 'BUILD_ID'), 'utf8')\n  }\n  return await nextBuildSpan\n    .traceChild('generate-buildid')\n    .traceAsyncFn(() => generateBuildId(config.generateBuildId, nanoid))\n}\n\nconst IS_TURBOPACK_BUILD = process.env.TURBOPACK && process.env.TURBOPACK_BUILD\n\nexport default async function build(\n  dir: string,\n  reactProductionProfiling = false,\n  debugOutput = false,\n  runLint = true,\n  noMangling = false,\n  appDirOnly = false,\n  turboNextBuild = false,\n  experimentalBuildMode: 'default' | 'compile' | 'generate',\n  traceUploadUrl: string | undefined\n): Promise<void> {\n  const isCompileMode = experimentalBuildMode === 'compile'\n  const isGenerateMode = experimentalBuildMode === 'generate'\n\n  let loadedConfig: NextConfigComplete | undefined\n  try {\n    const nextBuildSpan = trace('next-build', undefined, {\n      buildMode: experimentalBuildMode,\n      isTurboBuild: String(turboNextBuild),\n      version: process.env.__NEXT_VERSION as string,\n    })\n\n    NextBuildContext.nextBuildSpan = nextBuildSpan\n    NextBuildContext.dir = dir\n    NextBuildContext.appDirOnly = appDirOnly\n    NextBuildContext.reactProductionProfiling = reactProductionProfiling\n    NextBuildContext.noMangling = noMangling\n\n    await nextBuildSpan.traceAsyncFn(async () => {\n      // attempt to load global env values so they are available in next.config.js\n      const { loadedEnvFiles } = nextBuildSpan\n        .traceChild('load-dotenv')\n        .traceFn(() => loadEnvConfig(dir, false, Log))\n      NextBuildContext.loadedEnvFiles = loadedEnvFiles\n\n      const turborepoAccessTraceResult = new TurborepoAccessTraceResult()\n      const config: NextConfigComplete = await nextBuildSpan\n        .traceChild('load-next-config')\n        .traceAsyncFn(() =>\n          turborepoTraceAccess(\n            () =>\n              loadConfig(PHASE_PRODUCTION_BUILD, dir, {\n                // Log for next.config loading process\n                silent: false,\n              }),\n            turborepoAccessTraceResult\n          )\n        )\n      loadedConfig = config\n\n      process.env.NEXT_DEPLOYMENT_ID = config.deploymentId || ''\n      NextBuildContext.config = config\n\n      let configOutDir = 'out'\n      if (hasCustomExportOutput(config)) {\n        configOutDir = config.distDir\n        config.distDir = '.next'\n      }\n      const distDir = path.join(dir, config.distDir)\n      setGlobal('phase', PHASE_PRODUCTION_BUILD)\n      setGlobal('distDir', distDir)\n\n      const buildId = await getBuildId(\n        isGenerateMode,\n        distDir,\n        nextBuildSpan,\n        config\n      )\n      NextBuildContext.buildId = buildId\n\n      const shuttleDir = path.join(distDir, 'cache', 'shuttle')\n\n      if (config.experimental.flyingShuttle) {\n        await fs.mkdir(shuttleDir, {\n          recursive: true,\n        })\n      }\n\n      const customRoutes: CustomRoutes = await nextBuildSpan\n        .traceChild('load-custom-routes')\n        .traceAsyncFn(() => loadCustomRoutes(config))\n\n      const { headers, rewrites, redirects } = customRoutes\n      const combinedRewrites: Rewrite[] = [\n        ...rewrites.beforeFiles,\n        ...rewrites.afterFiles,\n        ...rewrites.fallback,\n      ]\n      const hasRewrites = combinedRewrites.length > 0\n\n      NextBuildContext.originalRewrites = config._originalRewrites\n      NextBuildContext.originalRedirects = config._originalRedirects\n\n      const cacheDir = getCacheDir(distDir)\n\n      const telemetry = new Telemetry({ distDir })\n\n      setGlobal('telemetry', telemetry)\n\n      const publicDir = path.join(dir, 'public')\n      const { pagesDir, appDir } = findPagesDir(dir)\n      NextBuildContext.pagesDir = pagesDir\n      NextBuildContext.appDir = appDir\n\n      const enabledDirectories: NextEnabledDirectories = {\n        app: typeof appDir === 'string',\n        pages: typeof pagesDir === 'string',\n      }\n\n      // Generate a random encryption key for this build.\n      // This key is used to encrypt cross boundary values and can be used to generate hashes.\n      const encryptionKey = await generateEncryptionKeyBase64()\n      NextBuildContext.encryptionKey = encryptionKey\n\n      const isSrcDir = path\n        .relative(dir, pagesDir || appDir || '')\n        .startsWith('src')\n      const hasPublicDir = existsSync(publicDir)\n\n      telemetry.record(\n        eventCliSession(dir, config, {\n          webpackVersion: 5,\n          cliCommand: 'build',\n          isSrcDir,\n          hasNowJson: !!(await findUp('now.json', { cwd: dir })),\n          isCustomServer: null,\n          turboFlag: false,\n          pagesDir: !!pagesDir,\n          appDir: !!appDir,\n        })\n      )\n\n      eventNextPlugins(path.resolve(dir)).then((events) =>\n        telemetry.record(events)\n      )\n\n      eventSwcPlugins(path.resolve(dir), config).then((events) =>\n        telemetry.record(events)\n      )\n\n      // Always log next version first then start rest jobs\n      const { envInfo, expFeatureInfo } = await getStartServerInfo(dir, false)\n      logStartInfo({\n        networkUrl: null,\n        appUrl: null,\n        envInfo,\n        expFeatureInfo,\n      })\n\n      const ignoreESLint = Boolean(config.eslint.ignoreDuringBuilds)\n      const shouldLint = !ignoreESLint && runLint\n\n      const typeCheckingOptions: Parameters<typeof startTypeChecking>[0] = {\n        dir,\n        appDir,\n        pagesDir,\n        runLint,\n        shouldLint,\n        ignoreESLint,\n        telemetry,\n        nextBuildSpan,\n        config,\n        cacheDir,\n      }\n\n      // For app directory, we run type checking after build. That's because\n      // we dynamically generate types for each layout and page in the app\n      // directory.\n      if (!appDir && !isCompileMode)\n        await startTypeChecking(typeCheckingOptions)\n\n      if (appDir && 'exportPathMap' in config) {\n        Log.error(\n          'The \"exportPathMap\" configuration cannot be used with the \"app\" directory. Please use generateStaticParams() instead.'\n        )\n        await telemetry.flush()\n        process.exit(1)\n      }\n\n      const buildLintEvent: EventBuildFeatureUsage = {\n        featureName: 'build-lint',\n        invocationCount: shouldLint ? 1 : 0,\n      }\n      telemetry.record({\n        eventName: EVENT_BUILD_FEATURE_USAGE,\n        payload: buildLintEvent,\n      })\n\n      const validFileMatcher = createValidFileMatcher(\n        config.pageExtensions,\n        appDir\n      )\n\n      let pagesPaths =\n        !appDirOnly && pagesDir\n          ? await nextBuildSpan.traceChild('collect-pages').traceAsyncFn(() =>\n              recursiveReadDir(pagesDir, {\n                pathnameFilter: validFileMatcher.isPageFile,\n              })\n            )\n          : []\n\n      let changedPagePathsResult:\n        | undefined\n        | {\n            changed: DetectedEntriesResult\n            unchanged: DetectedEntriesResult\n          }\n\n      if (pagesPaths && config.experimental.flyingShuttle) {\n        changedPagePathsResult = await detectChangedEntries({\n          pagesPaths,\n          pageExtensions: config.pageExtensions,\n          distDir,\n          shuttleDir,\n        })\n        console.log({ changedPagePathsResult })\n        pagesPaths = changedPagePathsResult.changed.pages\n      }\n\n      const middlewareDetectionRegExp = new RegExp(\n        `^${MIDDLEWARE_FILENAME}\\\\.(?:${config.pageExtensions.join('|')})$`\n      )\n\n      const instrumentationHookDetectionRegExp = new RegExp(\n        `^${INSTRUMENTATION_HOOK_FILENAME}\\\\.(?:${config.pageExtensions.join(\n          '|'\n        )})$`\n      )\n\n      const rootDir = path.join((pagesDir || appDir)!, '..')\n      const instrumentationHookEnabled = Boolean(\n        config.experimental.instrumentationHook\n      )\n\n      const includes = [\n        middlewareDetectionRegExp,\n        ...(instrumentationHookEnabled\n          ? [instrumentationHookDetectionRegExp]\n          : []),\n      ]\n\n      const rootPaths = (await getFilesInDir(rootDir))\n        .filter((file) => includes.some((include) => include.test(file)))\n        .sort(sortByPageExts(config.pageExtensions))\n        .map((file) => path.join(rootDir, file).replace(dir, ''))\n\n      const hasInstrumentationHook = rootPaths.some((p) =>\n        p.includes(INSTRUMENTATION_HOOK_FILENAME)\n      )\n      const hasMiddlewareFile = rootPaths.some((p) =>\n        p.includes(MIDDLEWARE_FILENAME)\n      )\n\n      NextBuildContext.hasInstrumentationHook = hasInstrumentationHook\n\n      const previewProps: __ApiPreviewProps = {\n        previewModeId: crypto.randomBytes(16).toString('hex'),\n        previewModeSigningKey: crypto.randomBytes(32).toString('hex'),\n        previewModeEncryptionKey: crypto.randomBytes(32).toString('hex'),\n      }\n      NextBuildContext.previewProps = previewProps\n\n      const mappedPages = await nextBuildSpan\n        .traceChild('create-pages-mapping')\n        .traceAsyncFn(() =>\n          createPagesMapping({\n            isDev: false,\n            pageExtensions: config.pageExtensions,\n            pagesType: PAGE_TYPES.PAGES,\n            pagePaths: pagesPaths,\n            pagesDir,\n            appDir,\n          })\n        )\n      NextBuildContext.mappedPages = mappedPages\n\n      let mappedAppPages: MappedPages | undefined\n      let denormalizedAppPages: string[] | undefined\n      let changedAppPathsResult:\n        | undefined\n        | {\n            changed: DetectedEntriesResult\n            unchanged: DetectedEntriesResult\n          }\n\n      if (appDir) {\n        let appPaths = await nextBuildSpan\n          .traceChild('collect-app-paths')\n          .traceAsyncFn(() =>\n            recursiveReadDir(appDir, {\n              pathnameFilter: (absolutePath) =>\n                validFileMatcher.isAppRouterPage(absolutePath) ||\n                // For now we only collect the root /not-found page in the app\n                // directory as the 404 fallback\n                validFileMatcher.isRootNotFound(absolutePath),\n              ignorePartFilter: (part) => part.startsWith('_'),\n            })\n          )\n\n        if (appPaths && config.experimental.flyingShuttle) {\n          changedAppPathsResult = await detectChangedEntries({\n            appPaths,\n            pageExtensions: config.pageExtensions,\n            distDir,\n            shuttleDir,\n          })\n          console.log({ changedAppPathsResult })\n          appPaths = changedAppPathsResult.changed.app\n        }\n\n        mappedAppPages = await nextBuildSpan\n          .traceChild('create-app-mapping')\n          .traceAsyncFn(() =>\n            createPagesMapping({\n              pagePaths: appPaths,\n              isDev: false,\n              pagesType: PAGE_TYPES.APP,\n              pageExtensions: config.pageExtensions,\n              pagesDir,\n              appDir,\n            })\n          )\n\n        NextBuildContext.mappedAppPages = mappedAppPages\n      }\n\n      const mappedRootPaths = await createPagesMapping({\n        isDev: false,\n        pageExtensions: config.pageExtensions,\n        pagePaths: rootPaths,\n        pagesType: PAGE_TYPES.ROOT,\n        pagesDir: pagesDir,\n        appDir,\n      })\n      NextBuildContext.mappedRootPaths = mappedRootPaths\n\n      const pagesPageKeys = Object.keys(mappedPages)\n\n      const conflictingAppPagePaths: [pagePath: string, appPath: string][] = []\n      const appPageKeys = new Set<string>()\n      if (mappedAppPages) {\n        denormalizedAppPages = Object.keys(mappedAppPages)\n        for (const appKey of denormalizedAppPages) {\n          const normalizedAppPageKey = normalizeAppPath(appKey)\n          const pagePath = mappedPages[normalizedAppPageKey]\n          if (pagePath) {\n            const appPath = mappedAppPages[appKey]\n            conflictingAppPagePaths.push([\n              pagePath.replace(/^private-next-pages/, 'pages'),\n              appPath.replace(/^private-next-app-dir/, 'app'),\n            ])\n          }\n          appPageKeys.add(normalizedAppPageKey)\n        }\n      }\n\n      const appPaths = Array.from(appPageKeys)\n      // Interception routes are modelled as beforeFiles rewrites\n      rewrites.beforeFiles.push(\n        ...generateInterceptionRoutesRewrites(appPaths, config.basePath)\n      )\n\n      NextBuildContext.rewrites = rewrites\n\n      const totalAppPagesCount = appPaths.length\n\n      const pageKeys = {\n        pages: pagesPageKeys,\n        app: appPaths.length > 0 ? appPaths : undefined,\n      }\n\n      // Turbopack already handles conflicting app and page routes.\n      if (!IS_TURBOPACK_BUILD) {\n        const numConflictingAppPaths = conflictingAppPagePaths.length\n        if (mappedAppPages && numConflictingAppPaths > 0) {\n          Log.error(\n            `Conflicting app and page file${\n              numConflictingAppPaths === 1 ? ' was' : 's were'\n            } found, please remove the conflicting files to continue:`\n          )\n          for (const [pagePath, appPath] of conflictingAppPagePaths) {\n            Log.error(`  \"${pagePath}\" - \"${appPath}\"`)\n          }\n          await telemetry.flush()\n          process.exit(1)\n        }\n      }\n\n      const conflictingPublicFiles: string[] = []\n      const hasPages404 = mappedPages['/404']?.startsWith(PAGES_DIR_ALIAS)\n      const hasApp404 = !!mappedAppPages?.[UNDERSCORE_NOT_FOUND_ROUTE_ENTRY]\n      const hasCustomErrorPage =\n        mappedPages['/_error'].startsWith(PAGES_DIR_ALIAS)\n\n      if (hasPublicDir) {\n        const hasPublicUnderScoreNextDir = existsSync(\n          path.join(publicDir, '_next')\n        )\n        if (hasPublicUnderScoreNextDir) {\n          throw new Error(PUBLIC_DIR_MIDDLEWARE_CONFLICT)\n        }\n      }\n\n      await nextBuildSpan\n        .traceChild('public-dir-conflict-check')\n        .traceAsyncFn(async () => {\n          // Check if pages conflict with files in `public`\n          // Only a page of public file can be served, not both.\n          for (const page in mappedPages) {\n            const hasPublicPageFile = await fileExists(\n              path.join(publicDir, page === '/' ? '/index' : page),\n              FileType.File\n            )\n            if (hasPublicPageFile) {\n              conflictingPublicFiles.push(page)\n            }\n          }\n\n          const numConflicting = conflictingPublicFiles.length\n\n          if (numConflicting) {\n            throw new Error(\n              `Conflicting public and page file${\n                numConflicting === 1 ? ' was' : 's were'\n              } found. https://nextjs.org/docs/messages/conflicting-public-file-page\\n${conflictingPublicFiles.join(\n                '\\n'\n              )}`\n            )\n          }\n        })\n\n      const nestedReservedPages = pageKeys.pages.filter((page) => {\n        return (\n          page.match(/\\/(_app|_document|_error)$/) && path.dirname(page) !== '/'\n        )\n      })\n\n      if (nestedReservedPages.length) {\n        Log.warn(\n          `The following reserved Next.js pages were detected not directly under the pages directory:\\n` +\n            nestedReservedPages.join('\\n') +\n            `\\nSee more info here: https://nextjs.org/docs/messages/nested-reserved-page\\n`\n        )\n      }\n\n      const restrictedRedirectPaths = ['/_next'].map((p) =>\n        config.basePath ? `${config.basePath}${p}` : p\n      )\n\n      const routesManifestPath = path.join(distDir, ROUTES_MANIFEST)\n      const routesManifest: RoutesManifest = nextBuildSpan\n        .traceChild('generate-routes-manifest')\n        .traceFn(() => {\n          const sortedRoutes = getSortedRoutes([\n            ...pageKeys.pages,\n            ...(pageKeys.app ?? []),\n          ])\n          const dynamicRoutes: Array<ReturnType<typeof pageToRoute>> = []\n          const staticRoutes: typeof dynamicRoutes = []\n\n          for (const route of sortedRoutes) {\n            if (isDynamicRoute(route)) {\n              dynamicRoutes.push(pageToRoute(route))\n            } else if (!isReservedPage(route)) {\n              staticRoutes.push(pageToRoute(route))\n            }\n          }\n\n          return {\n            version: 3,\n            pages404: true,\n            caseSensitive: !!config.experimental.caseSensitiveRoutes,\n            basePath: config.basePath,\n            redirects: redirects.map((r) =>\n              buildCustomRoute('redirect', r, restrictedRedirectPaths)\n            ),\n            headers: headers.map((r) => buildCustomRoute('header', r)),\n            dynamicRoutes,\n            staticRoutes,\n            dataRoutes: [],\n            i18n: config.i18n || undefined,\n            rsc: {\n              header: RSC_HEADER,\n              // This vary header is used as a default. It is technically re-assigned in `base-server`,\n              // and may include an additional Vary option for `Next-URL`.\n              varyHeader: `${RSC_HEADER}, ${NEXT_ROUTER_STATE_TREE_HEADER}, ${NEXT_ROUTER_PREFETCH_HEADER}`,\n              prefetchHeader: NEXT_ROUTER_PREFETCH_HEADER,\n              didPostponeHeader: NEXT_DID_POSTPONE_HEADER,\n              contentTypeHeader: RSC_CONTENT_TYPE_HEADER,\n              suffix: RSC_SUFFIX,\n              prefetchSuffix: RSC_PREFETCH_SUFFIX,\n            },\n            skipMiddlewareUrlNormalize: config.skipMiddlewareUrlNormalize,\n          } as RoutesManifest\n        })\n\n      if (rewrites.beforeFiles.length === 0 && rewrites.fallback.length === 0) {\n        routesManifest.rewrites = rewrites.afterFiles.map((r) =>\n          buildCustomRoute('rewrite', r)\n        )\n      } else {\n        routesManifest.rewrites = {\n          beforeFiles: rewrites.beforeFiles.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n          afterFiles: rewrites.afterFiles.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n          fallback: rewrites.fallback.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n        }\n      }\n      let clientRouterFilters:\n        | undefined\n        | ReturnType<typeof createClientRouterFilter>\n\n      if (config.experimental.clientRouterFilter) {\n        const nonInternalRedirects = (config._originalRedirects || []).filter(\n          (r: any) => !r.internal\n        )\n        const filterPaths: string[] = []\n\n        if (config.experimental.flyingShuttle) {\n          filterPaths.push(\n            ...[\n              // client filter always has all app paths\n              ...(changedAppPathsResult?.unchanged?.app || []),\n              ...(changedAppPathsResult?.changed?.app || []),\n            ].map((entry) =>\n              normalizeAppPath(getPageFromPath(entry, config.pageExtensions))\n            ),\n            ...(changedPagePathsResult?.unchanged.pages.length\n              ? changedPagePathsResult.changed?.pages || []\n              : []\n            ).map((item) => getPageFromPath(item, config.pageExtensions))\n          )\n        } else {\n          filterPaths.push(...appPaths)\n        }\n\n        clientRouterFilters = createClientRouterFilter(\n          filterPaths,\n          config.experimental.clientRouterFilterRedirects\n            ? nonInternalRedirects\n            : [],\n          config.experimental.clientRouterFilterAllowedRate\n        )\n        NextBuildContext.clientRouterFilters = clientRouterFilters\n      }\n\n      const distDirCreated = await nextBuildSpan\n        .traceChild('create-dist-dir')\n        .traceAsyncFn(async () => {\n          try {\n            await fs.mkdir(distDir, { recursive: true })\n            return true\n          } catch (err) {\n            if (isError(err) && err.code === 'EPERM') {\n              return false\n            }\n            throw err\n          }\n        })\n\n      if (!distDirCreated || !(await isWriteable(distDir))) {\n        throw new Error(\n          '> Build directory is not writeable. https://nextjs.org/docs/messages/build-dir-not-writeable'\n        )\n      }\n\n      if (config.cleanDistDir && !isGenerateMode) {\n        await recursiveDelete(distDir, /^cache/)\n      }\n\n      // Ensure commonjs handling is used for files in the distDir (generally .next)\n      // Files outside of the distDir can be \"type\": \"module\"\n      await writeFileUtf8(\n        path.join(distDir, 'package.json'),\n        '{\"type\": \"commonjs\"}'\n      )\n\n      // These are written to distDir, so they need to come after creating and cleaning distDr.\n      await recordFrameworkVersion(process.env.__NEXT_VERSION as string)\n      await updateBuildDiagnostics({\n        buildStage: 'start',\n      })\n\n      const outputFileTracingRoot =\n        config.experimental.outputFileTracingRoot || dir\n\n      const pagesManifestPath = path.join(\n        distDir,\n        SERVER_DIRECTORY,\n        PAGES_MANIFEST\n      )\n\n      const { cacheHandler } = config\n\n      const requiredServerFilesManifest = nextBuildSpan\n        .traceChild('generate-required-server-files')\n        .traceFn(() => {\n          const serverFilesManifest: RequiredServerFilesManifest = {\n            version: 1,\n            config: {\n              ...config,\n              configFile: undefined,\n              ...(ciEnvironment.hasNextSupport\n                ? {\n                    compress: false,\n                  }\n                : {}),\n              cacheHandler: cacheHandler\n                ? path.relative(distDir, cacheHandler)\n                : config.cacheHandler,\n              experimental: {\n                ...config.experimental,\n                trustHostHeader: ciEnvironment.hasNextSupport,\n\n                // @ts-expect-error internal field TODO: fix this, should use a separate mechanism to pass the info.\n                isExperimentalCompile: isCompileMode,\n              },\n            },\n            appDir: dir,\n            relativeAppDir: path.relative(outputFileTracingRoot, dir),\n            files: [\n              ROUTES_MANIFEST,\n              path.relative(distDir, pagesManifestPath),\n              BUILD_MANIFEST,\n              PRERENDER_MANIFEST,\n              path.join(SERVER_DIRECTORY, MIDDLEWARE_MANIFEST),\n              path.join(SERVER_DIRECTORY, MIDDLEWARE_BUILD_MANIFEST + '.js'),\n              path.join(\n                SERVER_DIRECTORY,\n                MIDDLEWARE_REACT_LOADABLE_MANIFEST + '.js'\n              ),\n              ...(appDir\n                ? [\n                    ...(config.experimental.sri\n                      ? [\n                          path.join(\n                            SERVER_DIRECTORY,\n                            SUBRESOURCE_INTEGRITY_MANIFEST + '.js'\n                          ),\n                          path.join(\n                            SERVER_DIRECTORY,\n                            SUBRESOURCE_INTEGRITY_MANIFEST + '.json'\n                          ),\n                        ]\n                      : []),\n                    path.join(SERVER_DIRECTORY, APP_PATHS_MANIFEST),\n                    path.join(APP_PATH_ROUTES_MANIFEST),\n                    APP_BUILD_MANIFEST,\n                    path.join(\n                      SERVER_DIRECTORY,\n                      SERVER_REFERENCE_MANIFEST + '.js'\n                    ),\n                    path.join(\n                      SERVER_DIRECTORY,\n                      SERVER_REFERENCE_MANIFEST + '.json'\n                    ),\n                  ]\n                : []),\n              REACT_LOADABLE_MANIFEST,\n              config.optimizeFonts\n                ? path.join(\n                    SERVER_DIRECTORY,\n                    AUTOMATIC_FONT_OPTIMIZATION_MANIFEST\n                  )\n                : null,\n              BUILD_ID_FILE,\n              path.join(SERVER_DIRECTORY, NEXT_FONT_MANIFEST + '.js'),\n              path.join(SERVER_DIRECTORY, NEXT_FONT_MANIFEST + '.json'),\n              ...(hasInstrumentationHook\n                ? [\n                    path.join(\n                      SERVER_DIRECTORY,\n                      `${INSTRUMENTATION_HOOK_FILENAME}.js`\n                    ),\n                    path.join(\n                      SERVER_DIRECTORY,\n                      `edge-${INSTRUMENTATION_HOOK_FILENAME}.js`\n                    ),\n                  ]\n                : []),\n            ]\n              .filter(nonNullable)\n              .map((file) => path.join(config.distDir, file)),\n            ignore: [] as string[],\n          }\n\n          return serverFilesManifest\n        })\n\n      async function turbopackBuild(): Promise<{\n        duration: number\n        buildTraceContext: undefined\n      }> {\n        if (!IS_TURBOPACK_BUILD) {\n          throw new Error(\"next build doesn't support turbopack yet\")\n        }\n\n        await validateTurboNextConfig({\n          dir,\n          isDev: false,\n        })\n\n        const startTime = process.hrtime()\n        const bindings = await loadBindings(config?.experimental?.useWasmBinary)\n        const dev = false\n        const project = await bindings.turbo.createProject(\n          {\n            projectPath: dir,\n            rootPath: config.experimental.outputFileTracingRoot || dir,\n            nextConfig: config,\n            jsConfig: await getTurbopackJsConfig(dir, config),\n            watch: false,\n            dev,\n            env: process.env as Record<string, string>,\n            defineEnv: createDefineEnv({\n              isTurbopack: true,\n              clientRouterFilters,\n              config,\n              dev,\n              distDir,\n              fetchCacheKeyPrefix: config.experimental.fetchCacheKeyPrefix,\n              hasRewrites,\n              // Implemented separately in Turbopack, doesn't have to be passed here.\n              middlewareMatchers: undefined,\n            }),\n            buildId: NextBuildContext.buildId!,\n            encryptionKey: NextBuildContext.encryptionKey!,\n            previewProps: NextBuildContext.previewProps!,\n          },\n          {\n            memoryLimit: config.experimental.turbo?.memoryLimit,\n          }\n        )\n\n        await fs.mkdir(path.join(distDir, 'server'), { recursive: true })\n        await fs.mkdir(path.join(distDir, 'static', buildId), {\n          recursive: true,\n        })\n        await fs.writeFile(\n          path.join(distDir, 'package.json'),\n          JSON.stringify(\n            {\n              type: 'commonjs',\n            },\n            null,\n            2\n          )\n        )\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const entrypointsSubscription = project.entrypointsSubscribe()\n        const currentEntrypoints: Entrypoints = {\n          global: {\n            app: undefined,\n            document: undefined,\n            error: undefined,\n\n            middleware: undefined,\n            instrumentation: undefined,\n          },\n\n          app: new Map(),\n          page: new Map(),\n        }\n\n        const currentEntryIssues: EntryIssuesMap = new Map()\n\n        const manifestLoader = new TurbopackManifestLoader({\n          buildId,\n          distDir,\n          encryptionKey,\n        })\n\n        const entrypointsResult = await entrypointsSubscription.next()\n        if (entrypointsResult.done) {\n          throw new Error('Turbopack did not return any entrypoints')\n        }\n        entrypointsSubscription.return?.().catch(() => {})\n\n        const entrypoints = entrypointsResult.value\n\n        const topLevelErrors: {\n          message: string\n        }[] = []\n        for (const issue of entrypoints.issues) {\n          topLevelErrors.push({\n            message: formatIssue(issue),\n          })\n        }\n\n        if (topLevelErrors.length > 0) {\n          throw new Error(\n            `Turbopack build failed with ${\n              topLevelErrors.length\n            } issues:\\n${topLevelErrors.map((e) => e.message).join('\\n')}`\n          )\n        }\n\n        await handleEntrypoints({\n          entrypoints,\n          currentEntrypoints,\n          currentEntryIssues,\n          manifestLoader,\n          nextConfig: config,\n          devRewrites: undefined,\n          productionRewrites: customRoutes.rewrites,\n          logErrors: false,\n        })\n\n        const progress = createProgress(\n          currentEntrypoints.page.size + currentEntrypoints.app.size + 1,\n          'Building'\n        )\n        const promises: Promise<any>[] = []\n        const sema = new Sema(10)\n        const enqueue = (fn: () => Promise<void>) => {\n          promises.push(\n            (async () => {\n              await sema.acquire()\n              try {\n                await fn()\n              } finally {\n                sema.release()\n                progress()\n              }\n            })()\n          )\n        }\n\n        for (const [page, route] of currentEntrypoints.page) {\n          enqueue(() =>\n            handleRouteType({\n              dev,\n              page,\n              pathname: page,\n              route,\n\n              currentEntryIssues,\n              entrypoints: currentEntrypoints,\n              manifestLoader,\n              devRewrites: undefined,\n              productionRewrites: customRoutes.rewrites,\n              logErrors: false,\n            })\n          )\n        }\n\n        for (const [page, route] of currentEntrypoints.app) {\n          enqueue(() =>\n            handleRouteType({\n              page,\n              dev: false,\n              pathname: normalizeAppPath(page),\n              route,\n              currentEntryIssues,\n              entrypoints: currentEntrypoints,\n              manifestLoader,\n              devRewrites: undefined,\n              productionRewrites: customRoutes.rewrites,\n              logErrors: false,\n            })\n          )\n        }\n\n        enqueue(() =>\n          handlePagesErrorRoute({\n            currentEntryIssues,\n            entrypoints: currentEntrypoints,\n            manifestLoader,\n            devRewrites: undefined,\n            productionRewrites: customRoutes.rewrites,\n            logErrors: false,\n          })\n        )\n        await Promise.all(promises)\n\n        await manifestLoader.writeManifests({\n          devRewrites: undefined,\n          productionRewrites: customRoutes.rewrites,\n          entrypoints: currentEntrypoints,\n        })\n\n        const errors: {\n          page: string\n          message: string\n        }[] = []\n        const warnings: {\n          page: string\n          message: string\n        }[] = []\n        for (const [page, entryIssues] of currentEntryIssues) {\n          for (const issue of entryIssues.values()) {\n            if (issue.severity !== 'warning') {\n              errors.push({\n                page,\n                message: formatIssue(issue),\n              })\n            } else {\n              if (isRelevantWarning(issue)) {\n                warnings.push({\n                  page,\n                  message: formatIssue(issue),\n                })\n              }\n            }\n          }\n        }\n\n        if (warnings.length > 0) {\n          Log.warn(\n            `Turbopack build collected ${warnings.length} warnings:\\n${warnings\n              .map((e) => {\n                return 'Page: ' + e.page + '\\n' + e.message\n              })\n              .join('\\n')}`\n          )\n        }\n\n        if (errors.length > 0) {\n          throw new Error(\n            `Turbopack build failed with ${errors.length} errors:\\n${errors\n              .map((e) => {\n                return 'Page: ' + e.page + '\\n' + e.message\n              })\n              .join('\\n')}`\n          )\n        }\n\n        return {\n          duration: process.hrtime(startTime)[0],\n          buildTraceContext: undefined,\n        }\n      }\n\n      let buildTraceContext: undefined | BuildTraceContext\n      let buildTracesPromise: Promise<any> | undefined = undefined\n\n      // If there's has a custom webpack config and disable the build worker.\n      // Otherwise respect the option if it's set.\n      const useBuildWorker =\n        config.experimental.webpackBuildWorker ||\n        (config.experimental.webpackBuildWorker === undefined &&\n          !config.webpack)\n      const runServerAndEdgeInParallel =\n        config.experimental.parallelServerCompiles\n      const collectServerBuildTracesInParallel =\n        config.experimental.parallelServerBuildTraces ||\n        (config.experimental.parallelServerBuildTraces === undefined &&\n          isCompileMode)\n\n      nextBuildSpan.setAttribute(\n        'has-custom-webpack-config',\n        String(!!config.webpack)\n      )\n      nextBuildSpan.setAttribute('use-build-worker', String(useBuildWorker))\n\n      if (\n        !useBuildWorker &&\n        (runServerAndEdgeInParallel || collectServerBuildTracesInParallel)\n      ) {\n        throw new Error(\n          'The \"parallelServerBuildTraces\" and \"parallelServerCompiles\" options may only be used when build workers can be used. Read more: https://nextjs.org/docs/messages/parallel-build-without-worker'\n        )\n      }\n\n      Log.info('Creating an optimized production build ...')\n      traceMemoryUsage('Starting build', nextBuildSpan)\n\n      await updateBuildDiagnostics({\n        buildStage: 'compile',\n        buildOptions: {\n          useBuildWorker: String(useBuildWorker),\n        },\n      })\n\n      if (!isGenerateMode) {\n        if (turboNextBuild) {\n          const { duration: compilerDuration, ...rest } = await turbopackBuild()\n          traceMemoryUsage('Finished build', nextBuildSpan)\n\n          buildTraceContext = rest.buildTraceContext\n\n          Log.event('Compiled successfully')\n\n          telemetry.record(\n            eventBuildCompleted(pagesPaths, {\n              durationInSeconds: compilerDuration,\n              totalAppPagesCount,\n            })\n          )\n        } else {\n          if (\n            runServerAndEdgeInParallel ||\n            collectServerBuildTracesInParallel\n          ) {\n            let durationInSeconds = 0\n\n            await updateBuildDiagnostics({\n              buildStage: 'compile-server',\n            })\n\n            const serverBuildPromise = webpackBuild(useBuildWorker, [\n              'server',\n            ]).then((res) => {\n              traceMemoryUsage('Finished server compilation', nextBuildSpan)\n              buildTraceContext = res.buildTraceContext\n              durationInSeconds += res.duration\n\n              if (collectServerBuildTracesInParallel) {\n                const buildTraceWorker = new Worker(\n                  require.resolve('./collect-build-traces'),\n                  {\n                    numWorkers: 1,\n                    exposedMethods: ['collectBuildTraces'],\n                  }\n                ) as Worker & typeof import('./collect-build-traces')\n\n                buildTracesPromise = buildTraceWorker\n                  .collectBuildTraces({\n                    dir,\n                    config,\n                    distDir,\n                    // Serialize Map as this is sent to the worker.\n                    edgeRuntimeRoutes: collectRoutesUsingEdgeRuntime(new Map()),\n                    staticPages: [],\n                    hasSsrAmpPages: false,\n                    buildTraceContext,\n                    outputFileTracingRoot,\n                    isFlyingShuttle: !!config.experimental.flyingShuttle,\n                  })\n                  .catch((err) => {\n                    console.error(err)\n                    process.exit(1)\n                  })\n              }\n            })\n            if (!runServerAndEdgeInParallel) {\n              await serverBuildPromise\n              await updateBuildDiagnostics({\n                buildStage: 'webpack-compile-edge-server',\n              })\n            }\n\n            const edgeBuildPromise = webpackBuild(useBuildWorker, [\n              'edge-server',\n            ]).then((res) => {\n              durationInSeconds += res.duration\n              traceMemoryUsage(\n                'Finished edge-server compilation',\n                nextBuildSpan\n              )\n            })\n            if (runServerAndEdgeInParallel) {\n              await serverBuildPromise\n              await updateBuildDiagnostics({\n                buildStage: 'webpack-compile-edge-server',\n              })\n            }\n            await edgeBuildPromise\n\n            await updateBuildDiagnostics({\n              buildStage: 'webpack-compile-client',\n            })\n\n            await webpackBuild(useBuildWorker, ['client']).then((res) => {\n              durationInSeconds += res.duration\n              traceMemoryUsage('Finished client compilation', nextBuildSpan)\n            })\n\n            Log.event('Compiled successfully')\n\n            telemetry.record(\n              eventBuildCompleted(pagesPaths, {\n                durationInSeconds,\n                totalAppPagesCount,\n              })\n            )\n          } else {\n            const { duration: compilerDuration, ...rest } = await webpackBuild(\n              useBuildWorker,\n              null\n            )\n            traceMemoryUsage('Finished build', nextBuildSpan)\n\n            buildTraceContext = rest.buildTraceContext\n\n            telemetry.record(\n              eventBuildCompleted(pagesPaths, {\n                durationInSeconds: compilerDuration,\n                totalAppPagesCount,\n              })\n            )\n          }\n        }\n      }\n\n      // For app directory, we run type checking after build.\n      if (appDir && !isCompileMode && !isGenerateMode) {\n        await updateBuildDiagnostics({\n          buildStage: 'type-checking',\n        })\n        await startTypeChecking(typeCheckingOptions)\n        traceMemoryUsage('Finished type checking', nextBuildSpan)\n      }\n\n      const postCompileSpinner = createSpinner('Collecting page data')\n\n      const buildManifestPath = path.join(distDir, BUILD_MANIFEST)\n      const appBuildManifestPath = path.join(distDir, APP_BUILD_MANIFEST)\n\n      let staticAppPagesCount = 0\n      let serverAppPagesCount = 0\n      let edgeRuntimeAppCount = 0\n      let edgeRuntimePagesCount = 0\n      const ssgPages = new Set<string>()\n      const ssgStaticFallbackPages = new Set<string>()\n      const ssgBlockingFallbackPages = new Set<string>()\n      const staticPages = new Set<string>()\n      const invalidPages = new Set<string>()\n      const hybridAmpPages = new Set<string>()\n      const serverPropsPages = new Set<string>()\n      const additionalSsgPaths = new Map<string, Array<string>>()\n      const additionalSsgPathsEncoded = new Map<string, Array<string>>()\n      const appStaticPaths = new Map<string, Array<string>>()\n      const appStaticPathsEncoded = new Map<string, Array<string>>()\n      const appNormalizedPaths = new Map<string, string>()\n      const appDynamicParamPaths = new Set<string>()\n      const appDefaultConfigs = new Map<string, AppConfig>()\n      const pageInfos: PageInfos = new Map<string, PageInfo>()\n      let pagesManifest = await readManifest<PagesManifest>(pagesManifestPath)\n      const buildManifest = await readManifest<BuildManifest>(buildManifestPath)\n      const appBuildManifest = appDir\n        ? await readManifest<AppBuildManifest>(appBuildManifestPath)\n        : undefined\n\n      const isAppPPREnabled = checkIsAppPPREnabled(config.experimental.ppr)\n\n      const appPathRoutes: Record<string, string> = {}\n\n      if (appDir) {\n        const appPathsManifest = await readManifest<Record<string, string>>(\n          path.join(distDir, SERVER_DIRECTORY, APP_PATHS_MANIFEST)\n        )\n\n        for (const key in appPathsManifest) {\n          appPathRoutes[key] = normalizeAppPath(key)\n        }\n\n        await writeManifest(\n          path.join(distDir, APP_PATH_ROUTES_MANIFEST),\n          appPathRoutes\n        )\n      }\n\n      process.env.NEXT_PHASE = PHASE_PRODUCTION_BUILD\n\n      const pagesStaticWorkers = createStaticWorker(config)\n      const appStaticWorkers = appDir ? createStaticWorker(config) : undefined\n\n      const analysisBegin = process.hrtime()\n      const staticCheckSpan = nextBuildSpan.traceChild('static-check')\n\n      const functionsConfigManifest: FunctionsConfigManifest = {\n        version: 1,\n        functions: {},\n      }\n\n      const {\n        customAppGetInitialProps,\n        namedExports,\n        isNextImageImported,\n        hasSsrAmpPages,\n        hasNonStaticErrorPage,\n      } = await staticCheckSpan.traceAsyncFn(async () => {\n        if (isCompileMode) {\n          return {\n            customAppGetInitialProps: false,\n            namedExports: [],\n            isNextImageImported: true,\n            hasSsrAmpPages: !!pagesDir,\n            hasNonStaticErrorPage: true,\n          }\n        }\n\n        const { configFileName, publicRuntimeConfig, serverRuntimeConfig } =\n          config\n        const runtimeEnvConfig = { publicRuntimeConfig, serverRuntimeConfig }\n\n        const nonStaticErrorPageSpan = staticCheckSpan.traceChild(\n          'check-static-error-page'\n        )\n        const errorPageHasCustomGetInitialProps =\n          nonStaticErrorPageSpan.traceAsyncFn(\n            async () =>\n              hasCustomErrorPage &&\n              (await pagesStaticWorkers.hasCustomGetInitialProps({\n                page: '/_error',\n                distDir,\n                runtimeEnvConfig,\n                checkingApp: false,\n              }))\n          )\n\n        const errorPageStaticResult = nonStaticErrorPageSpan.traceAsyncFn(\n          async () =>\n            hasCustomErrorPage &&\n            pagesStaticWorkers.isPageStatic({\n              dir,\n              page: '/_error',\n              distDir,\n              configFileName,\n              runtimeEnvConfig,\n              httpAgentOptions: config.httpAgentOptions,\n              locales: config.i18n?.locales,\n              defaultLocale: config.i18n?.defaultLocale,\n              nextConfigOutput: config.output,\n              pprConfig: config.experimental.ppr,\n            })\n        )\n\n        const appPageToCheck = '/_app'\n\n        const customAppGetInitialPropsPromise =\n          pagesStaticWorkers.hasCustomGetInitialProps({\n            page: appPageToCheck,\n            distDir,\n            runtimeEnvConfig,\n            checkingApp: true,\n          })\n\n        const namedExportsPromise = pagesStaticWorkers.getDefinedNamedExports({\n          page: appPageToCheck,\n          distDir,\n          runtimeEnvConfig,\n        })\n\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        let isNextImageImported: boolean | undefined\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        let hasSsrAmpPages = false\n\n        const computedManifestData = await computeFromManifest(\n          { build: buildManifest, app: appBuildManifest },\n          distDir,\n          config.experimental.gzipSize\n        )\n\n        const middlewareManifest: MiddlewareManifest = require(\n          path.join(distDir, SERVER_DIRECTORY, MIDDLEWARE_MANIFEST)\n        )\n\n        const actionManifest = appDir\n          ? (require(\n              path.join(\n                distDir,\n                SERVER_DIRECTORY,\n                SERVER_REFERENCE_MANIFEST + '.json'\n              )\n            ) as ActionManifest)\n          : null\n        const entriesWithAction = actionManifest ? new Set() : null\n        if (actionManifest && entriesWithAction) {\n          for (const id in actionManifest.node) {\n            for (const entry in actionManifest.node[id].workers) {\n              entriesWithAction.add(entry)\n            }\n          }\n          for (const id in actionManifest.edge) {\n            for (const entry in actionManifest.edge[id].workers) {\n              entriesWithAction.add(entry)\n            }\n          }\n        }\n\n        for (const key of Object.keys(middlewareManifest?.functions)) {\n          if (key.startsWith('/api')) {\n            edgeRuntimePagesCount++\n          }\n        }\n\n        await Promise.all(\n          Object.entries(pageKeys)\n            .reduce<Array<{ pageType: keyof typeof pageKeys; page: string }>>(\n              (acc, [key, files]) => {\n                if (!files) {\n                  return acc\n                }\n\n                const pageType = key as keyof typeof pageKeys\n\n                for (const page of files) {\n                  acc.push({ pageType, page })\n                }\n\n                return acc\n              },\n              []\n            )\n            .map(({ pageType, page }) => {\n              const checkPageSpan = staticCheckSpan.traceChild('check-page', {\n                page,\n              })\n              return checkPageSpan.traceAsyncFn(async () => {\n                const actualPage = normalizePagePath(page)\n                const [size, totalSize] = await getJsPageSizeInKb(\n                  pageType,\n                  actualPage,\n                  distDir,\n                  buildManifest,\n                  appBuildManifest,\n                  config.experimental.gzipSize,\n                  computedManifestData\n                )\n\n                let isRoutePPREnabled = false\n                let isSSG = false\n                let isStatic = false\n                let isServerComponent = false\n                let isHybridAmp = false\n                let ssgPageRoutes: string[] | null = null\n                let pagePath = ''\n\n                if (pageType === 'pages') {\n                  pagePath =\n                    pagesPaths.find((p) => {\n                      p = normalizePathSep(p)\n                      return (\n                        p.startsWith(actualPage + '.') ||\n                        p.startsWith(actualPage + '/index.')\n                      )\n                    }) || ''\n                }\n                let originalAppPath: string | undefined\n\n                if (pageType === 'app' && mappedAppPages) {\n                  for (const [originalPath, normalizedPath] of Object.entries(\n                    appPathRoutes\n                  )) {\n                    if (normalizedPath === page) {\n                      pagePath = mappedAppPages[originalPath].replace(\n                        /^private-next-app-dir/,\n                        ''\n                      )\n                      originalAppPath = originalPath\n                      break\n                    }\n                  }\n                }\n\n                const pageFilePath = isAppBuiltinNotFoundPage(pagePath)\n                  ? require.resolve(\n                      'next/dist/client/components/not-found-error'\n                    )\n                  : path.join(\n                      (pageType === 'pages' ? pagesDir : appDir) || '',\n                      pagePath\n                    )\n\n                const staticInfo = pagePath\n                  ? await getPageStaticInfo({\n                      pageFilePath,\n                      nextConfig: config,\n                      // TODO: fix type mismatch\n                      pageType:\n                        pageType === 'app' ? PAGE_TYPES.APP : PAGE_TYPES.PAGES,\n                    })\n                  : undefined\n\n                if (staticInfo?.extraConfig) {\n                  functionsConfigManifest.functions[page] =\n                    staticInfo.extraConfig\n                }\n\n                const pageRuntime = middlewareManifest.functions[\n                  originalAppPath || page\n                ]\n                  ? 'edge'\n                  : staticInfo?.runtime\n\n                if (!isCompileMode) {\n                  isServerComponent =\n                    pageType === 'app' &&\n                    staticInfo?.rsc !== RSC_MODULE_TYPES.client\n\n                  if (pageType === 'app' || !isReservedPage(page)) {\n                    try {\n                      let edgeInfo: any\n\n                      if (isEdgeRuntime(pageRuntime)) {\n                        if (pageType === 'app') {\n                          edgeRuntimeAppCount++\n                        } else {\n                          edgeRuntimePagesCount++\n                        }\n\n                        const manifestKey =\n                          pageType === 'pages' ? page : originalAppPath || ''\n\n                        edgeInfo = middlewareManifest.functions[manifestKey]\n                      }\n\n                      let isPageStaticSpan =\n                        checkPageSpan.traceChild('is-page-static')\n                      let workerResult = await isPageStaticSpan.traceAsyncFn(\n                        () => {\n                          return (\n                            pageType === 'app'\n                              ? appStaticWorkers\n                              : pagesStaticWorkers\n                          )!.isPageStatic({\n                            dir,\n                            page,\n                            originalAppPath,\n                            distDir,\n                            configFileName,\n                            runtimeEnvConfig,\n                            httpAgentOptions: config.httpAgentOptions,\n                            locales: config.i18n?.locales,\n                            defaultLocale: config.i18n?.defaultLocale,\n                            parentId: isPageStaticSpan.getId(),\n                            pageRuntime,\n                            edgeInfo,\n                            pageType,\n                            cacheHandler: config.cacheHandler,\n                            isrFlushToDisk: ciEnvironment.hasNextSupport\n                              ? false\n                              : config.experimental.isrFlushToDisk,\n                            maxMemoryCacheSize: config.cacheMaxMemorySize,\n                            nextConfigOutput: config.output,\n                            pprConfig: config.experimental.ppr,\n                          })\n                        }\n                      )\n\n                      if (pageType === 'app' && originalAppPath) {\n                        appNormalizedPaths.set(originalAppPath, page)\n                        // TODO-APP: handle prerendering with edge\n                        if (isEdgeRuntime(pageRuntime)) {\n                          isStatic = false\n                          isSSG = false\n\n                          Log.warnOnce(\n                            `Using edge runtime on a page currently disables static generation for that page`\n                          )\n                        } else {\n                          // If this route can be partially pre-rendered, then\n                          // mark it as such and mark that it can be\n                          // generated server-side.\n                          if (workerResult.isRoutePPREnabled) {\n                            isRoutePPREnabled = workerResult.isRoutePPREnabled\n                            isSSG = true\n                            isStatic = true\n\n                            appStaticPaths.set(originalAppPath, [])\n                            appStaticPathsEncoded.set(originalAppPath, [])\n                          }\n\n                          if (\n                            workerResult.encodedPrerenderRoutes &&\n                            workerResult.prerenderRoutes\n                          ) {\n                            appStaticPaths.set(\n                              originalAppPath,\n                              workerResult.prerenderRoutes\n                            )\n                            appStaticPathsEncoded.set(\n                              originalAppPath,\n                              workerResult.encodedPrerenderRoutes\n                            )\n                            ssgPageRoutes = workerResult.prerenderRoutes\n                            isSSG = true\n                          }\n\n                          const appConfig = workerResult.appConfig || {}\n                          if (appConfig.revalidate !== 0) {\n                            const isDynamic = isDynamicRoute(page)\n                            const hasGenerateStaticParams =\n                              !!workerResult.prerenderRoutes?.length\n\n                            if (\n                              config.output === 'export' &&\n                              isDynamic &&\n                              !hasGenerateStaticParams\n                            ) {\n                              throw new Error(\n                                `Page \"${page}\" is missing \"generateStaticParams()\" so it cannot be used with \"output: export\" config.`\n                              )\n                            }\n\n                            // Mark the app as static if:\n                            // - It has no dynamic param\n                            // - It doesn't have generateStaticParams but `dynamic` is set to\n                            //   `error` or `force-static`\n                            if (!isDynamic) {\n                              appStaticPaths.set(originalAppPath, [page])\n                              appStaticPathsEncoded.set(originalAppPath, [page])\n                              isStatic = true\n                            } else if (\n                              !hasGenerateStaticParams &&\n                              (appConfig.dynamic === 'error' ||\n                                appConfig.dynamic === 'force-static')\n                            ) {\n                              appStaticPaths.set(originalAppPath, [])\n                              appStaticPathsEncoded.set(originalAppPath, [])\n                              isStatic = true\n                              isRoutePPREnabled = false\n                            }\n                          }\n\n                          if (workerResult.prerenderFallback) {\n                            // whether or not to allow requests for paths not\n                            // returned from generateStaticParams\n                            appDynamicParamPaths.add(originalAppPath)\n                          }\n                          appDefaultConfigs.set(originalAppPath, appConfig)\n                        }\n                      } else {\n                        if (isEdgeRuntime(pageRuntime)) {\n                          if (workerResult.hasStaticProps) {\n                            console.warn(\n                              `\"getStaticProps\" is not yet supported fully with \"experimental-edge\", detected on ${page}`\n                            )\n                          }\n                          // TODO: add handling for statically rendering edge\n                          // pages and allow edge with Prerender outputs\n                          workerResult.isStatic = false\n                          workerResult.hasStaticProps = false\n                        }\n\n                        if (\n                          workerResult.isStatic === false &&\n                          (workerResult.isHybridAmp || workerResult.isAmpOnly)\n                        ) {\n                          hasSsrAmpPages = true\n                        }\n\n                        if (workerResult.isHybridAmp) {\n                          isHybridAmp = true\n                          hybridAmpPages.add(page)\n                        }\n\n                        if (workerResult.isNextImageImported) {\n                          isNextImageImported = true\n                        }\n\n                        if (workerResult.hasStaticProps) {\n                          ssgPages.add(page)\n                          isSSG = true\n\n                          if (\n                            workerResult.prerenderRoutes &&\n                            workerResult.encodedPrerenderRoutes\n                          ) {\n                            additionalSsgPaths.set(\n                              page,\n                              workerResult.prerenderRoutes\n                            )\n                            additionalSsgPathsEncoded.set(\n                              page,\n                              workerResult.encodedPrerenderRoutes\n                            )\n                            ssgPageRoutes = workerResult.prerenderRoutes\n                          }\n\n                          if (workerResult.prerenderFallback === 'blocking') {\n                            ssgBlockingFallbackPages.add(page)\n                          } else if (workerResult.prerenderFallback === true) {\n                            ssgStaticFallbackPages.add(page)\n                          }\n                        } else if (workerResult.hasServerProps) {\n                          serverPropsPages.add(page)\n                        } else if (\n                          workerResult.isStatic &&\n                          !isServerComponent &&\n                          (await customAppGetInitialPropsPromise) === false\n                        ) {\n                          staticPages.add(page)\n                          isStatic = true\n                        } else if (isServerComponent) {\n                          // This is a static server component page that doesn't have\n                          // gSP or gSSP. We still treat it as a SSG page.\n                          ssgPages.add(page)\n                          isSSG = true\n                        }\n\n                        if (hasPages404 && page === '/404') {\n                          if (\n                            !workerResult.isStatic &&\n                            !workerResult.hasStaticProps\n                          ) {\n                            throw new Error(\n                              `\\`pages/404\\` ${STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`\n                            )\n                          }\n                          // we need to ensure the 404 lambda is present since we use\n                          // it when _app has getInitialProps\n                          if (\n                            (await customAppGetInitialPropsPromise) &&\n                            !workerResult.hasStaticProps\n                          ) {\n                            staticPages.delete(page)\n                          }\n                        }\n\n                        if (\n                          STATIC_STATUS_PAGES.includes(page) &&\n                          !workerResult.isStatic &&\n                          !workerResult.hasStaticProps\n                        ) {\n                          throw new Error(\n                            `\\`pages${page}\\` ${STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`\n                          )\n                        }\n                      }\n                    } catch (err) {\n                      if (\n                        !isError(err) ||\n                        err.message !== 'INVALID_DEFAULT_EXPORT'\n                      )\n                        throw err\n                      invalidPages.add(page)\n                    }\n                  }\n\n                  if (pageType === 'app') {\n                    if (isSSG || isStatic) {\n                      staticAppPagesCount++\n                    } else {\n                      serverAppPagesCount++\n                    }\n                  }\n                }\n\n                pageInfos.set(page, {\n                  size,\n                  totalSize,\n                  isStatic,\n                  isSSG,\n                  isRoutePPREnabled,\n                  isHybridAmp,\n                  ssgPageRoutes,\n                  initialRevalidateSeconds: false,\n                  runtime: pageRuntime,\n                  pageDuration: undefined,\n                  ssgPageDurations: undefined,\n                  hasEmptyPrelude: undefined,\n                })\n              })\n            })\n        )\n\n        const errorPageResult = await errorPageStaticResult\n        const nonStaticErrorPage =\n          (await errorPageHasCustomGetInitialProps) ||\n          (errorPageResult && errorPageResult.hasServerProps)\n\n        const returnValue = {\n          customAppGetInitialProps: await customAppGetInitialPropsPromise,\n          namedExports: await namedExportsPromise,\n          isNextImageImported,\n          hasSsrAmpPages,\n          hasNonStaticErrorPage: nonStaticErrorPage,\n        }\n\n        return returnValue\n      })\n\n      if (postCompileSpinner) postCompileSpinner.stopAndPersist()\n      traceMemoryUsage('Finished collecting page data', nextBuildSpan)\n\n      if (customAppGetInitialProps) {\n        console.warn(\n          bold(yellow(`Warning: `)) +\n            yellow(\n              `You have opted-out of Automatic Static Optimization due to \\`getInitialProps\\` in \\`pages/_app\\`. This does not opt-out pages with \\`getStaticProps\\``\n            )\n        )\n        console.warn(\n          'Read more: https://nextjs.org/docs/messages/opt-out-auto-static-optimization\\n'\n        )\n      }\n\n      if (!hasSsrAmpPages) {\n        requiredServerFilesManifest.ignore.push(\n          path.relative(\n            dir,\n            path.join(\n              path.dirname(\n                require.resolve(\n                  'next/dist/compiled/@ampproject/toolbox-optimizer'\n                )\n              ),\n              '**/*'\n            )\n          )\n        )\n      }\n\n      await writeFunctionsConfigManifest(distDir, functionsConfigManifest)\n\n      if (!isGenerateMode && !buildTracesPromise) {\n        buildTracesPromise = collectBuildTraces({\n          dir,\n          config,\n          distDir,\n          edgeRuntimeRoutes: collectRoutesUsingEdgeRuntime(pageInfos),\n          staticPages: [...staticPages],\n          nextBuildSpan,\n          hasSsrAmpPages,\n          buildTraceContext,\n          outputFileTracingRoot,\n          isFlyingShuttle: !!config.experimental.flyingShuttle,\n        }).catch((err) => {\n          console.error(err)\n          process.exit(1)\n        })\n      }\n\n      if (serverPropsPages.size > 0 || ssgPages.size > 0) {\n        // We update the routes manifest after the build with the\n        // data routes since we can't determine these until after build\n        routesManifest.dataRoutes = getSortedRoutes([\n          ...serverPropsPages,\n          ...ssgPages,\n        ]).map((page) => {\n          return buildDataRoute(page, buildId)\n        })\n\n        // await writeManifest(routesManifestPath, routesManifest)\n      }\n\n      // We need to write the manifest with rewrites before build\n      await nextBuildSpan\n        .traceChild('write-routes-manifest')\n        .traceAsyncFn(() => writeManifest(routesManifestPath, routesManifest))\n\n      // Since custom _app.js can wrap the 404 page we have to opt-out of static optimization if it has getInitialProps\n      // Only export the static 404 when there is no /_error present\n      const useStaticPages404 =\n        !customAppGetInitialProps && (!hasNonStaticErrorPage || hasPages404)\n\n      if (invalidPages.size > 0) {\n        const err = new Error(\n          `Build optimization failed: found page${\n            invalidPages.size === 1 ? '' : 's'\n          } without a React Component as default export in \\n${[...invalidPages]\n            .map((pg) => `pages${pg}`)\n            .join(\n              '\\n'\n            )}\\n\\nSee https://nextjs.org/docs/messages/page-without-valid-component for more info.\\n`\n        ) as NextError\n        err.code = 'BUILD_OPTIMIZATION_FAILED'\n        throw err\n      }\n\n      await writeBuildId(distDir, buildId)\n\n      if (config.experimental.optimizeCss) {\n        const globOrig =\n          require('next/dist/compiled/glob') as typeof import('next/dist/compiled/glob')\n\n        const cssFilePaths = await new Promise<string[]>((resolve, reject) => {\n          globOrig(\n            '**/*.css',\n            { cwd: path.join(distDir, 'static') },\n            (err, files) => {\n              if (err) {\n                return reject(err)\n              }\n              resolve(files)\n            }\n          )\n        })\n\n        requiredServerFilesManifest.files.push(\n          ...cssFilePaths.map((filePath) =>\n            path.join(config.distDir, 'static', filePath)\n          )\n        )\n      }\n\n      const features: EventBuildFeatureUsage[] = [\n        {\n          featureName: 'experimental/optimizeCss',\n          invocationCount: config.experimental.optimizeCss ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/nextScriptWorkers',\n          invocationCount: config.experimental.nextScriptWorkers ? 1 : 0,\n        },\n        {\n          featureName: 'optimizeFonts',\n          invocationCount: config.optimizeFonts ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/ppr',\n          invocationCount: config.experimental.ppr ? 1 : 0,\n        },\n      ]\n      telemetry.record(\n        features.map((feature) => {\n          return {\n            eventName: EVENT_BUILD_FEATURE_USAGE,\n            payload: feature,\n          }\n        })\n      )\n\n      await writeRequiredServerFilesManifest(\n        distDir,\n        requiredServerFilesManifest\n      )\n\n      const middlewareManifest: MiddlewareManifest = await readManifest(\n        path.join(distDir, SERVER_DIRECTORY, MIDDLEWARE_MANIFEST)\n      )\n\n      if (!isGenerateMode) {\n        if (config.experimental.flyingShuttle) {\n          console.log('stitching builds...')\n          const stitchResult = await stitchBuilds(\n            {\n              buildId,\n              distDir,\n              shuttleDir,\n              rewrites,\n              redirects,\n              edgePreviewProps: {\n                __NEXT_PREVIEW_MODE_ID:\n                  NextBuildContext.previewProps!.previewModeId,\n                __NEXT_PREVIEW_MODE_ENCRYPTION_KEY:\n                  NextBuildContext.previewProps!.previewModeEncryptionKey,\n                __NEXT_PREVIEW_MODE_SIGNING_KEY:\n                  NextBuildContext.previewProps!.previewModeSigningKey,\n              },\n              encryptionKey,\n              allowedErrorRate:\n                config.experimental.clientRouterFilterAllowedRate,\n            },\n            {\n              changed: {\n                pages: changedPagePathsResult?.changed.pages || [],\n                app: changedAppPathsResult?.changed.app || [],\n              },\n              unchanged: {\n                pages: changedPagePathsResult?.unchanged.pages || [],\n                app: changedAppPathsResult?.unchanged.app || [],\n              },\n              pageExtensions: config.pageExtensions,\n            }\n          )\n          // reload pagesManifest since it's been updated on disk\n          if (stitchResult.pagesManifest) {\n            pagesManifest = stitchResult.pagesManifest\n          }\n\n          console.log('storing shuttle')\n          await storeShuttle({\n            distDir,\n            shuttleDir,\n          })\n        }\n      }\n\n      const finalPrerenderRoutes: { [route: string]: SsgRoute } = {}\n      const finalDynamicRoutes: PrerenderManifest['dynamicRoutes'] = {}\n      const tbdPrerenderRoutes: string[] = []\n      let ssgNotFoundPaths: string[] = []\n\n      const { i18n } = config\n\n      const usedStaticStatusPages = STATIC_STATUS_PAGES.filter(\n        (page) =>\n          mappedPages[page] &&\n          mappedPages[page].startsWith('private-next-pages')\n      )\n      usedStaticStatusPages.forEach((page) => {\n        if (!ssgPages.has(page) && !customAppGetInitialProps) {\n          staticPages.add(page)\n        }\n      })\n\n      const hasPages500 = usedStaticStatusPages.includes('/500')\n      const useDefaultStatic500 =\n        !hasPages500 && !hasNonStaticErrorPage && !customAppGetInitialProps\n\n      const combinedPages = [...staticPages, ...ssgPages]\n      const isApp404Static = appStaticPaths.has(\n        UNDERSCORE_NOT_FOUND_ROUTE_ENTRY\n      )\n      const hasStaticApp404 = hasApp404 && isApp404Static\n\n      await updateBuildDiagnostics({\n        buildStage: 'static-generation',\n      })\n\n      // we need to trigger automatic exporting when we have\n      // - static 404/500\n      // - getStaticProps paths\n      // - experimental app is enabled\n      if (\n        !isCompileMode &&\n        (combinedPages.length > 0 ||\n          useStaticPages404 ||\n          useDefaultStatic500 ||\n          appDir)\n      ) {\n        const staticGenerationSpan =\n          nextBuildSpan.traceChild('static-generation')\n        await staticGenerationSpan.traceAsyncFn(async () => {\n          detectConflictingPaths(\n            [\n              ...combinedPages,\n              ...pageKeys.pages.filter((page) => !combinedPages.includes(page)),\n            ],\n            ssgPages,\n            additionalSsgPaths\n          )\n          const exportApp = require('../export')\n            .default as typeof import('../export').default\n\n          const exportConfig: NextConfigComplete = {\n            ...config,\n            // Default map will be the collection of automatic statically exported\n            // pages and incremental pages.\n            // n.b. we cannot handle this above in combinedPages because the dynamic\n            // page must be in the `pages` array, but not in the mapping.\n            exportPathMap: (defaultMap: ExportPathMap) => {\n              // Dynamically routed pages should be prerendered to be used as\n              // a client-side skeleton (fallback) while data is being fetched.\n              // This ensures the end-user never sees a 500 or slow response from the\n              // server.\n              //\n              // Note: prerendering disables automatic static optimization.\n              ssgPages.forEach((page) => {\n                if (isDynamicRoute(page)) {\n                  tbdPrerenderRoutes.push(page)\n\n                  if (ssgStaticFallbackPages.has(page)) {\n                    // Override the rendering for the dynamic page to be treated as a\n                    // fallback render.\n                    if (i18n) {\n                      defaultMap[`/${i18n.defaultLocale}${page}`] = {\n                        page,\n                        query: { __nextFallback: 'true' },\n                      }\n                    } else {\n                      defaultMap[page] = {\n                        page,\n                        query: { __nextFallback: 'true' },\n                      }\n                    }\n                  } else {\n                    // Remove dynamically routed pages from the default path map when\n                    // fallback behavior is disabled.\n                    delete defaultMap[page]\n                  }\n                }\n              })\n\n              // Append the \"well-known\" routes we should prerender for, e.g. blog\n              // post slugs.\n              additionalSsgPaths.forEach((routes, page) => {\n                const encodedRoutes = additionalSsgPathsEncoded.get(page)\n\n                routes.forEach((route, routeIdx) => {\n                  defaultMap[route] = {\n                    page,\n                    query: { __nextSsgPath: encodedRoutes?.[routeIdx] },\n                  }\n                })\n              })\n\n              if (useStaticPages404) {\n                defaultMap['/404'] = {\n                  page: hasPages404 ? '/404' : '/_error',\n                }\n              }\n\n              if (useDefaultStatic500) {\n                defaultMap['/500'] = {\n                  page: '/_error',\n                }\n              }\n\n              // TODO: output manifest specific to app paths and their\n              // revalidate periods and dynamicParams settings\n              appStaticPaths.forEach((routes, originalAppPath) => {\n                const encodedRoutes = appStaticPathsEncoded.get(originalAppPath)\n                const appConfig = appDefaultConfigs.get(originalAppPath)\n\n                routes.forEach((route, routeIdx) => {\n                  defaultMap[route] = {\n                    page: originalAppPath,\n                    query: { __nextSsgPath: encodedRoutes?.[routeIdx] },\n                    _isDynamicError: appConfig?.dynamic === 'error',\n                    _isAppDir: true,\n                    _isRoutePPREnabled: appConfig\n                      ? checkIsRoutePPREnabled(\n                          config.experimental.ppr,\n                          appConfig\n                        )\n                      : undefined,\n                  }\n                })\n              })\n\n              if (i18n) {\n                for (const page of [\n                  ...staticPages,\n                  ...ssgPages,\n                  ...(useStaticPages404 ? ['/404'] : []),\n                  ...(useDefaultStatic500 ? ['/500'] : []),\n                ]) {\n                  const isSsg = ssgPages.has(page)\n                  const isDynamic = isDynamicRoute(page)\n                  const isFallback = isSsg && ssgStaticFallbackPages.has(page)\n\n                  for (const locale of i18n.locales) {\n                    // skip fallback generation for SSG pages without fallback mode\n                    if (isSsg && isDynamic && !isFallback) continue\n                    const outputPath = `/${locale}${page === '/' ? '' : page}`\n\n                    defaultMap[outputPath] = {\n                      page: defaultMap[page]?.page || page,\n                      query: {\n                        __nextLocale: locale,\n                        __nextFallback: isFallback ? 'true' : undefined,\n                      },\n                    }\n                  }\n\n                  if (isSsg) {\n                    // remove non-locale prefixed variant from defaultMap\n                    delete defaultMap[page]\n                  }\n                }\n              }\n\n              return defaultMap\n            },\n          }\n\n          const exportOptions: ExportAppOptions = {\n            nextConfig: exportConfig,\n            enabledDirectories,\n            silent: false,\n            buildExport: true,\n            debugOutput,\n            pages: combinedPages,\n            outdir: path.join(distDir, 'export'),\n            statusMessage: 'Generating static pages',\n            // The worker already explicitly binds `this` to each of the\n            // exposed methods.\n            exportAppPageWorker: appStaticWorkers?.exportPage,\n            exportPageWorker: pagesStaticWorkers?.exportPage,\n            endWorker: async () => {\n              await pagesStaticWorkers.end()\n              await appStaticWorkers?.end()\n            },\n          }\n\n          const exportResult = await exportApp(\n            dir,\n            exportOptions,\n            nextBuildSpan\n          )\n\n          // If there was no result, there's nothing more to do.\n          if (!exportResult) return\n\n          writeTurborepoAccessTraceResult({\n            distDir: config.distDir,\n            traces: [\n              turborepoAccessTraceResult,\n              ...exportResult.turborepoAccessTraceResults.values(),\n            ],\n          })\n\n          ssgNotFoundPaths = Array.from(exportResult.ssgNotFoundPaths)\n\n          // remove server bundles that were exported\n          for (const page of staticPages) {\n            const serverBundle = getPagePath(page, distDir, undefined, false)\n            await fs.unlink(serverBundle)\n          }\n\n          for (const [originalAppPath, routes] of appStaticPaths) {\n            const page = appNormalizedPaths.get(originalAppPath) || ''\n            const appConfig = appDefaultConfigs.get(originalAppPath) || {}\n            let hasDynamicData =\n              appConfig.revalidate === 0 ||\n              exportResult.byPath.get(page)?.revalidate === 0\n\n            if (hasDynamicData && pageInfos.get(page)?.isStatic) {\n              // if the page was marked as being static, but it contains dynamic data\n              // (ie, in the case of a static generation bailout), then it should be marked dynamic\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                isStatic: false,\n                isSSG: false,\n              })\n            }\n\n            const isRouteHandler = isAppRouteRoute(originalAppPath)\n\n            // When this is an app page and PPR is enabled, the route supports\n            // partial pre-rendering.\n            const experimentalPPR: true | undefined =\n              !isRouteHandler &&\n              checkIsRoutePPREnabled(config.experimental.ppr, appConfig)\n                ? true\n                : undefined\n\n            // this flag is used to selectively bypass the static cache and invoke the lambda directly\n            // to enable server actions on static routes\n            const bypassFor: RouteHas[] = [\n              { type: 'header', key: ACTION_HEADER },\n              {\n                type: 'header',\n                key: 'content-type',\n                value: 'multipart/form-data;.*',\n              },\n            ]\n\n            // Always sort the routes to get consistent output in manifests\n            getSortedRoutes(routes).forEach((route) => {\n              if (isDynamicRoute(page) && route === page) return\n              if (route === UNDERSCORE_NOT_FOUND_ROUTE) return\n\n              const {\n                revalidate = appConfig.revalidate ?? false,\n                metadata = {},\n                hasEmptyPrelude,\n                hasPostponed,\n              } = exportResult.byPath.get(route) ?? {}\n\n              pageInfos.set(route, {\n                ...(pageInfos.get(route) as PageInfo),\n                hasPostponed,\n                hasEmptyPrelude,\n              })\n\n              // update the page (eg /blog/[slug]) to also have the postpone metadata\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                hasPostponed,\n                hasEmptyPrelude,\n              })\n\n              if (revalidate !== 0) {\n                const normalizedRoute = normalizePagePath(route)\n\n                let dataRoute: string | null\n                if (isRouteHandler) {\n                  dataRoute = null\n                } else {\n                  dataRoute = path.posix.join(`${normalizedRoute}${RSC_SUFFIX}`)\n                }\n\n                let prefetchDataRoute: string | null | undefined\n                // While we may only write the `.rsc` when the route does not\n                // have PPR enabled, we still want to generate the route when\n                // deployed so it doesn't 404. If the app has PPR enabled, we\n                // should add this key.\n                if (!isRouteHandler && isAppPPREnabled) {\n                  prefetchDataRoute = path.posix.join(\n                    `${normalizedRoute}${RSC_PREFETCH_SUFFIX}`\n                  )\n                }\n\n                const routeMeta: Partial<SsgRoute> = {}\n\n                if (metadata.status !== 200) {\n                  routeMeta.initialStatus = metadata.status\n                }\n\n                const exportHeaders = metadata.headers\n                const headerKeys = Object.keys(exportHeaders || {})\n\n                if (exportHeaders && headerKeys.length) {\n                  routeMeta.initialHeaders = {}\n\n                  // normalize header values as initialHeaders\n                  // must be Record<string, string>\n                  for (const key of headerKeys) {\n                    // set-cookie is already handled - the middleware cookie setting case\n                    // isn't needed for the prerender manifest since it can't read cookies\n                    if (key === 'x-middleware-set-cookie') continue\n\n                    let value = exportHeaders[key]\n\n                    if (Array.isArray(value)) {\n                      if (key === 'set-cookie') {\n                        value = value.join(',')\n                      } else {\n                        value = value[value.length - 1]\n                      }\n                    }\n\n                    if (typeof value === 'string') {\n                      routeMeta.initialHeaders[key] = value\n                    }\n                  }\n                }\n\n                finalPrerenderRoutes[route] = {\n                  ...routeMeta,\n                  experimentalPPR,\n                  experimentalBypassFor: bypassFor,\n                  initialRevalidateSeconds: revalidate,\n                  srcRoute: page,\n                  dataRoute,\n                  prefetchDataRoute,\n                }\n              } else {\n                hasDynamicData = true\n                // we might have determined during prerendering that this page\n                // used dynamic data\n                pageInfos.set(route, {\n                  ...(pageInfos.get(route) as PageInfo),\n                  isSSG: false,\n                  isStatic: false,\n                })\n              }\n            })\n\n            if (!hasDynamicData && isDynamicRoute(originalAppPath)) {\n              const normalizedRoute = normalizePagePath(page)\n\n              let dataRoute: string | null = null\n              if (!isRouteHandler) {\n                dataRoute = path.posix.join(`${normalizedRoute}${RSC_SUFFIX}`)\n              }\n\n              let prefetchDataRoute: string | undefined\n\n              // While we may only write the `.rsc` when the route does not\n              // have PPR enabled, we still want to generate the route when\n              // deployed so it doesn't 404. If the app has PPR enabled, we\n              // should add this key.\n              if (!isRouteHandler && isAppPPREnabled) {\n                prefetchDataRoute = path.posix.join(\n                  `${normalizedRoute}${RSC_PREFETCH_SUFFIX}`\n                )\n              }\n\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                isDynamicAppRoute: true,\n                // if PPR is turned on and the route contains a dynamic segment,\n                // we assume it'll be partially prerendered\n                hasPostponed: experimentalPPR,\n              })\n\n              // TODO: create a separate manifest to allow enforcing\n              // dynamicParams for non-static paths?\n              finalDynamicRoutes[page] = {\n                experimentalPPR,\n                experimentalBypassFor: bypassFor,\n                routeRegex: normalizeRouteRegex(\n                  getNamedRouteRegex(page, false).re.source\n                ),\n                dataRoute,\n                // if dynamicParams are enabled treat as fallback:\n                // 'blocking' if not it's fallback: false\n                fallback: appDynamicParamPaths.has(originalAppPath)\n                  ? null\n                  : false,\n                dataRouteRegex: !dataRoute\n                  ? null\n                  : normalizeRouteRegex(\n                      getNamedRouteRegex(\n                        dataRoute.replace(/\\.rsc$/, ''),\n                        false\n                      ).re.source.replace(/\\(\\?:\\\\\\/\\)\\?\\$$/, '\\\\.rsc$')\n                    ),\n                prefetchDataRoute,\n                prefetchDataRouteRegex: !prefetchDataRoute\n                  ? undefined\n                  : normalizeRouteRegex(\n                      getNamedRouteRegex(\n                        prefetchDataRoute.replace(/\\.prefetch\\.rsc$/, ''),\n                        false\n                      ).re.source.replace(\n                        /\\(\\?:\\\\\\/\\)\\?\\$$/,\n                        '\\\\.prefetch\\\\.rsc$'\n                      )\n                    ),\n              }\n            }\n          }\n\n          const moveExportedPage = async (\n            originPage: string,\n            page: string,\n            file: string,\n            isSsg: boolean,\n            ext: 'html' | 'json',\n            additionalSsgFile = false\n          ) => {\n            return staticGenerationSpan\n              .traceChild('move-exported-page')\n              .traceAsyncFn(async () => {\n                file = `${file}.${ext}`\n                const orig = path.join(exportOptions.outdir, file)\n                const pagePath = getPagePath(\n                  originPage,\n                  distDir,\n                  undefined,\n                  false\n                )\n\n                const relativeDest = path\n                  .relative(\n                    path.join(distDir, SERVER_DIRECTORY),\n                    path.join(\n                      path.join(\n                        pagePath,\n                        // strip leading / and then recurse number of nested dirs\n                        // to place from base folder\n                        originPage\n                          .slice(1)\n                          .split('/')\n                          .map(() => '..')\n                          .join('/')\n                      ),\n                      file\n                    )\n                  )\n                  .replace(/\\\\/g, '/')\n\n                if (\n                  !isSsg &&\n                  !(\n                    // don't add static status page to manifest if it's\n                    // the default generated version e.g. no pages/500\n                    (\n                      STATIC_STATUS_PAGES.includes(page) &&\n                      !usedStaticStatusPages.includes(page)\n                    )\n                  )\n                ) {\n                  pagesManifest[page] = relativeDest\n                }\n\n                const dest = path.join(distDir, SERVER_DIRECTORY, relativeDest)\n                const isNotFound = ssgNotFoundPaths.includes(page)\n\n                // for SSG files with i18n the non-prerendered variants are\n                // output with the locale prefixed so don't attempt moving\n                // without the prefix\n                if ((!i18n || additionalSsgFile) && !isNotFound) {\n                  await fs.mkdir(path.dirname(dest), { recursive: true })\n                  await fs.rename(orig, dest)\n                } else if (i18n && !isSsg) {\n                  // this will be updated with the locale prefixed variant\n                  // since all files are output with the locale prefix\n                  delete pagesManifest[page]\n                }\n\n                if (i18n) {\n                  if (additionalSsgFile) return\n\n                  const localeExt = page === '/' ? path.extname(file) : ''\n                  const relativeDestNoPages = relativeDest.slice(\n                    'pages/'.length\n                  )\n\n                  for (const locale of i18n.locales) {\n                    const curPath = `/${locale}${page === '/' ? '' : page}`\n\n                    if (isSsg && ssgNotFoundPaths.includes(curPath)) {\n                      continue\n                    }\n\n                    const updatedRelativeDest = path\n                      .join(\n                        'pages',\n                        locale + localeExt,\n                        // if it's the top-most index page we want it to be locale.EXT\n                        // instead of locale/index.html\n                        page === '/' ? '' : relativeDestNoPages\n                      )\n                      .replace(/\\\\/g, '/')\n\n                    const updatedOrig = path.join(\n                      exportOptions.outdir,\n                      locale + localeExt,\n                      page === '/' ? '' : file\n                    )\n                    const updatedDest = path.join(\n                      distDir,\n                      SERVER_DIRECTORY,\n                      updatedRelativeDest\n                    )\n\n                    if (!isSsg) {\n                      pagesManifest[curPath] = updatedRelativeDest\n                    }\n                    await fs.mkdir(path.dirname(updatedDest), {\n                      recursive: true,\n                    })\n                    await fs.rename(updatedOrig, updatedDest)\n                  }\n                }\n              })\n          }\n\n          async function moveExportedAppNotFoundTo404() {\n            return staticGenerationSpan\n              .traceChild('move-exported-app-not-found-')\n              .traceAsyncFn(async () => {\n                const orig = path.join(\n                  distDir,\n                  'server',\n                  'app',\n                  '_not-found.html'\n                )\n                const updatedRelativeDest = path\n                  .join('pages', '404.html')\n                  .replace(/\\\\/g, '/')\n\n                if (existsSync(orig)) {\n                  await fs.copyFile(\n                    orig,\n                    path.join(distDir, 'server', updatedRelativeDest)\n                  )\n                  pagesManifest['/404'] = updatedRelativeDest\n                }\n              })\n          }\n\n          // If there's /not-found inside app, we prefer it over the pages 404\n          if (hasStaticApp404) {\n            await moveExportedAppNotFoundTo404()\n          } else {\n            // Only move /404 to /404 when there is no custom 404 as in that case we don't know about the 404 page\n            if (!hasPages404 && !hasApp404 && useStaticPages404) {\n              await moveExportedPage('/_error', '/404', '/404', false, 'html')\n            }\n          }\n\n          if (useDefaultStatic500) {\n            await moveExportedPage('/_error', '/500', '/500', false, 'html')\n          }\n\n          for (const page of combinedPages) {\n            const isSsg = ssgPages.has(page)\n            const isStaticSsgFallback = ssgStaticFallbackPages.has(page)\n            const isDynamic = isDynamicRoute(page)\n            const hasAmp = hybridAmpPages.has(page)\n            const file = normalizePagePath(page)\n\n            const pageInfo = pageInfos.get(page)\n            const durationInfo = exportResult.byPage.get(page)\n            if (pageInfo && durationInfo) {\n              // Set Build Duration\n              if (pageInfo.ssgPageRoutes) {\n                pageInfo.ssgPageDurations = pageInfo.ssgPageRoutes.map(\n                  (pagePath) => {\n                    const duration = durationInfo.durationsByPath.get(pagePath)\n                    if (typeof duration === 'undefined') {\n                      throw new Error(\"Invariant: page wasn't built\")\n                    }\n\n                    return duration\n                  }\n                )\n              }\n              pageInfo.pageDuration = durationInfo.durationsByPath.get(page)\n            }\n\n            // The dynamic version of SSG pages are only prerendered if the\n            // fallback is enabled. Below, we handle the specific prerenders\n            // of these.\n            const hasHtmlOutput = !(isSsg && isDynamic && !isStaticSsgFallback)\n\n            if (hasHtmlOutput) {\n              await moveExportedPage(page, page, file, isSsg, 'html')\n            }\n\n            if (hasAmp && (!isSsg || (isSsg && !isDynamic))) {\n              const ampPage = `${file}.amp`\n              await moveExportedPage(page, ampPage, ampPage, isSsg, 'html')\n\n              if (isSsg) {\n                await moveExportedPage(page, ampPage, ampPage, isSsg, 'json')\n              }\n            }\n\n            if (isSsg) {\n              // For a non-dynamic SSG page, we must copy its data file\n              // from export, we already moved the HTML file above\n              if (!isDynamic) {\n                await moveExportedPage(page, page, file, isSsg, 'json')\n\n                if (i18n) {\n                  // TODO: do we want to show all locale variants in build output\n                  for (const locale of i18n.locales) {\n                    const localePage = `/${locale}${page === '/' ? '' : page}`\n\n                    finalPrerenderRoutes[localePage] = {\n                      initialRevalidateSeconds:\n                        exportResult.byPath.get(localePage)?.revalidate ??\n                        false,\n                      experimentalPPR: undefined,\n                      srcRoute: null,\n                      dataRoute: path.posix.join(\n                        '/_next/data',\n                        buildId,\n                        `${file}.json`\n                      ),\n                      prefetchDataRoute: undefined,\n                    }\n                  }\n                } else {\n                  finalPrerenderRoutes[page] = {\n                    initialRevalidateSeconds:\n                      exportResult.byPath.get(page)?.revalidate ?? false,\n                    experimentalPPR: undefined,\n                    srcRoute: null,\n                    dataRoute: path.posix.join(\n                      '/_next/data',\n                      buildId,\n                      `${file}.json`\n                    ),\n                    // Pages does not have a prefetch data route.\n                    prefetchDataRoute: undefined,\n                  }\n                }\n                // Set Page Revalidation Interval\n                if (pageInfo) {\n                  pageInfo.initialRevalidateSeconds =\n                    exportResult.byPath.get(page)?.revalidate ?? false\n                }\n              } else {\n                // For a dynamic SSG page, we did not copy its data exports and only\n                // copy the fallback HTML file (if present).\n                // We must also copy specific versions of this page as defined by\n                // `getStaticPaths` (additionalSsgPaths).\n                const extraRoutes = additionalSsgPaths.get(page) || []\n                for (const route of extraRoutes) {\n                  const pageFile = normalizePagePath(route)\n                  await moveExportedPage(\n                    page,\n                    route,\n                    pageFile,\n                    isSsg,\n                    'html',\n                    true\n                  )\n                  await moveExportedPage(\n                    page,\n                    route,\n                    pageFile,\n                    isSsg,\n                    'json',\n                    true\n                  )\n\n                  if (hasAmp) {\n                    const ampPage = `${pageFile}.amp`\n                    await moveExportedPage(\n                      page,\n                      ampPage,\n                      ampPage,\n                      isSsg,\n                      'html',\n                      true\n                    )\n                    await moveExportedPage(\n                      page,\n                      ampPage,\n                      ampPage,\n                      isSsg,\n                      'json',\n                      true\n                    )\n                  }\n\n                  const initialRevalidateSeconds =\n                    exportResult.byPath.get(route)?.revalidate ?? false\n\n                  if (typeof initialRevalidateSeconds === 'undefined') {\n                    throw new Error(\"Invariant: page wasn't built\")\n                  }\n\n                  finalPrerenderRoutes[route] = {\n                    initialRevalidateSeconds,\n                    experimentalPPR: undefined,\n                    srcRoute: page,\n                    dataRoute: path.posix.join(\n                      '/_next/data',\n                      buildId,\n                      `${normalizePagePath(route)}.json`\n                    ),\n                    // Pages does not have a prefetch data route.\n                    prefetchDataRoute: undefined,\n                  }\n\n                  // Set route Revalidation Interval\n                  if (pageInfo) {\n                    pageInfo.initialRevalidateSeconds = initialRevalidateSeconds\n                  }\n                }\n              }\n            }\n          }\n\n          // remove temporary export folder\n          await fs.rm(exportOptions.outdir, { recursive: true, force: true })\n          await writeManifest(pagesManifestPath, pagesManifest)\n        })\n      }\n\n      const postBuildSpinner = createSpinner('Finalizing page optimization')\n      let buildTracesSpinner = createSpinner(`Collecting build traces`)\n\n      // ensure the worker is not left hanging\n      pagesStaticWorkers.close()\n      appStaticWorkers?.close()\n\n      const analysisEnd = process.hrtime(analysisBegin)\n      telemetry.record(\n        eventBuildOptimize(pagesPaths, {\n          durationInSeconds: analysisEnd[0],\n          staticPageCount: staticPages.size,\n          staticPropsPageCount: ssgPages.size,\n          serverPropsPageCount: serverPropsPages.size,\n          ssrPageCount:\n            pagesPaths.length -\n            (staticPages.size + ssgPages.size + serverPropsPages.size),\n          hasStatic404: useStaticPages404,\n          hasReportWebVitals:\n            namedExports?.includes('reportWebVitals') ?? false,\n          rewritesCount: combinedRewrites.length,\n          headersCount: headers.length,\n          redirectsCount: redirects.length - 1, // reduce one for trailing slash\n          headersWithHasCount: headers.filter((r: any) => !!r.has).length,\n          rewritesWithHasCount: combinedRewrites.filter((r: any) => !!r.has)\n            .length,\n          redirectsWithHasCount: redirects.filter((r: any) => !!r.has).length,\n          middlewareCount: hasMiddlewareFile ? 1 : 0,\n          totalAppPagesCount,\n          staticAppPagesCount,\n          serverAppPagesCount,\n          edgeRuntimeAppCount,\n          edgeRuntimePagesCount,\n        })\n      )\n\n      if (NextBuildContext.telemetryState) {\n        const events = eventBuildFeatureUsage(\n          NextBuildContext.telemetryState.usages\n        )\n        telemetry.record(events)\n        telemetry.record(\n          eventPackageUsedInGetServerSideProps(\n            NextBuildContext.telemetryState.packagesUsedInServerSideProps\n          )\n        )\n      }\n\n      if (ssgPages.size > 0 || appDir) {\n        tbdPrerenderRoutes.forEach((tbdRoute) => {\n          const normalizedRoute = normalizePagePath(tbdRoute)\n          const dataRoute = path.posix.join(\n            '/_next/data',\n            buildId,\n            `${normalizedRoute}.json`\n          )\n\n          finalDynamicRoutes[tbdRoute] = {\n            routeRegex: normalizeRouteRegex(\n              getNamedRouteRegex(tbdRoute, false).re.source\n            ),\n            experimentalPPR: undefined,\n            dataRoute,\n            fallback: ssgBlockingFallbackPages.has(tbdRoute)\n              ? null\n              : ssgStaticFallbackPages.has(tbdRoute)\n                ? `${normalizedRoute}.html`\n                : false,\n            dataRouteRegex: normalizeRouteRegex(\n              getNamedRouteRegex(\n                dataRoute.replace(/\\.json$/, ''),\n                false\n              ).re.source.replace(/\\(\\?:\\\\\\/\\)\\?\\$$/, '\\\\.json$')\n            ),\n            // Pages does not have a prefetch data route.\n            prefetchDataRoute: undefined,\n            prefetchDataRouteRegex: undefined,\n          }\n        })\n\n        NextBuildContext.previewModeId = previewProps.previewModeId\n        NextBuildContext.fetchCacheKeyPrefix =\n          config.experimental.fetchCacheKeyPrefix\n        NextBuildContext.allowedRevalidateHeaderKeys =\n          config.experimental.allowedRevalidateHeaderKeys\n\n        const prerenderManifest: DeepReadonly<PrerenderManifest> = {\n          version: 4,\n          routes: finalPrerenderRoutes,\n          dynamicRoutes: finalDynamicRoutes,\n          notFoundRoutes: ssgNotFoundPaths,\n          preview: previewProps,\n        }\n        await writePrerenderManifest(distDir, prerenderManifest)\n        await writeClientSsgManifest(prerenderManifest, {\n          distDir,\n          buildId,\n          locales: config.i18n?.locales || [],\n        })\n      } else {\n        await writePrerenderManifest(distDir, {\n          version: 4,\n          routes: {},\n          dynamicRoutes: {},\n          preview: previewProps,\n          notFoundRoutes: [],\n        })\n      }\n\n      await writeImagesManifest(distDir, config)\n      await writeManifest(path.join(distDir, EXPORT_MARKER), {\n        version: 1,\n        hasExportPathMap: typeof config.exportPathMap === 'function',\n        exportTrailingSlash: config.trailingSlash === true,\n        isNextImageImported: isNextImageImported === true,\n      })\n      await fs.unlink(path.join(distDir, EXPORT_DETAIL)).catch((err) => {\n        if (err.code === 'ENOENT') {\n          return Promise.resolve()\n        }\n        return Promise.reject(err)\n      })\n\n      if (Boolean(config.experimental.nextScriptWorkers)) {\n        await nextBuildSpan\n          .traceChild('verify-partytown-setup')\n          .traceAsyncFn(async () => {\n            await verifyPartytownSetup(\n              dir,\n              path.join(distDir, CLIENT_STATIC_FILES_PATH)\n            )\n          })\n      }\n\n      await buildTracesPromise\n\n      if (buildTracesSpinner) {\n        buildTracesSpinner.stopAndPersist()\n        buildTracesSpinner = undefined\n      }\n\n      if (config.output === 'export') {\n        await writeFullyStaticExport(\n          config,\n          dir,\n          enabledDirectories,\n          configOutDir,\n          nextBuildSpan\n        )\n      }\n\n      if (config.output === 'standalone') {\n        await writeStandaloneDirectory(\n          nextBuildSpan,\n          distDir,\n          pageKeys,\n          denormalizedAppPages,\n          outputFileTracingRoot,\n          requiredServerFilesManifest,\n          middlewareManifest,\n          hasInstrumentationHook,\n          staticPages,\n          loadedEnvFiles,\n          appDir\n        )\n      }\n\n      if (postBuildSpinner) postBuildSpinner.stopAndPersist()\n      console.log()\n\n      if (debugOutput) {\n        nextBuildSpan\n          .traceChild('print-custom-routes')\n          .traceFn(() => printCustomRoutes({ redirects, rewrites, headers }))\n      }\n\n      await nextBuildSpan.traceChild('print-tree-view').traceAsyncFn(() =>\n        printTreeView(pageKeys, pageInfos, {\n          distPath: distDir,\n          buildId: buildId,\n          pagesDir,\n          useStaticPages404,\n          pageExtensions: config.pageExtensions,\n          appBuildManifest,\n          buildManifest,\n          middlewareManifest,\n          gzipSize: config.experimental.gzipSize,\n        })\n      )\n\n      await nextBuildSpan\n        .traceChild('telemetry-flush')\n        .traceAsyncFn(() => telemetry.flush())\n    })\n  } finally {\n    // Ensure we wait for lockfile patching if present\n    await lockfilePatchPromise.cur\n\n    // Ensure all traces are flushed before finishing the command\n    await flushAllTraces()\n    teardownTraceSubscriber()\n    teardownHeapProfiler()\n\n    if (traceUploadUrl && loadedConfig) {\n      uploadTrace({\n        traceUploadUrl,\n        mode: 'build',\n        projectDir: dir,\n        distDir: loadedConfig.distDir,\n        sync: true,\n      })\n    }\n  }\n}\n"],"names":["build","pageToRoute","page","routeRegex","getNamedRouteRegex","regex","normalizeRouteRegex","re","source","routeKeys","namedRegex","getCacheDir","distDir","cacheDir","path","join","ciEnvironment","isCI","hasNextSupport","hasCache","existsSync","console","log","Log","prefixes","warn","writeFileUtf8","filePath","content","fs","writeFile","readFileUtf8","readFile","writeManifest","manifest","formatManifest","readManifest","JSON","parse","writePrerenderManifest","PRERENDER_MANIFEST","writeClientSsgManifest","prerenderManifest","buildId","locales","ssgPages","Set","Object","entries","routes","filter","srcRoute","map","route","normalizeLocalePath","pathname","keys","dynamicRoutes","sort","clientSsgManifestContent","devalue","CLIENT_STATIC_FILES_PATH","writeFunctionsConfigManifest","SERVER_DIRECTORY","FUNCTIONS_CONFIG_MANIFEST","writeRequiredServerFilesManifest","requiredServerFiles","SERVER_FILES_MANIFEST","writeImagesManifest","config","images","deviceSizes","imageSizes","sizes","remotePatterns","p","protocol","hostname","makeRe","port","dot","IMAGES_MANIFEST","version","STANDALONE_DIRECTORY","writeStandaloneDirectory","nextBuildSpan","pageKeys","denormalizedAppPages","outputFileTracingRoot","middlewareManifest","hasInstrumentationHook","staticPages","loadedEnvFiles","appDir","traceChild","traceAsyncFn","copyTracedFiles","pages","file","files","reduce","acc","envFile","includes","push","outputPath","relative","mkdir","dirname","recursive","copyFile","recursiveCopy","overwrite","originalServerApp","getNumberOfWorkers","experimental","cpus","defaultConfig","memoryBasedWorkersCount","Math","max","min","floor","os","freemem","staticWorkerPath","require","resolve","staticWorkerExposedMethods","createStaticWorker","infoPrinted","timeout","staticPageGenerationTimeout","Worker","logger","onRestart","method","args","attempts","arg","pagePath","Error","numWorkers","forkOptions","env","process","enableWorkerThreads","workerThreads","exposedMethods","writeFullyStaticExport","dir","enabledDirectories","configOutDir","exportApp","default","pagesWorker","appWorker","buildExport","nextConfig","silent","outdir","exportAppPageWorker","exportPage","exportPageWorker","endWorker","end","close","getBuildId","isGenerateMode","generateBuildId","nanoid","IS_TURBOPACK_BUILD","TURBOPACK","TURBOPACK_BUILD","reactProductionProfiling","debugOutput","runLint","noMangling","appDirOnly","turboNextBuild","experimentalBuildMode","traceUploadUrl","isCompileMode","loadedConfig","trace","undefined","buildMode","isTurboBuild","String","__NEXT_VERSION","NextBuildContext","mappedPages","traceFn","loadEnvConfig","turborepoAccessTraceResult","TurborepoAccessTraceResult","turborepoTraceAccess","loadConfig","PHASE_PRODUCTION_BUILD","NEXT_DEPLOYMENT_ID","deploymentId","hasCustomExportOutput","setGlobal","shuttleDir","flyingShuttle","customRoutes","loadCustomRoutes","headers","rewrites","redirects","combinedRewrites","beforeFiles","afterFiles","fallback","hasRewrites","length","originalRewrites","_originalRewrites","originalRedirects","_originalRedirects","telemetry","Telemetry","publicDir","pagesDir","findPagesDir","app","encryptionKey","generateEncryptionKeyBase64","isSrcDir","startsWith","hasPublicDir","record","eventCliSession","webpackVersion","cliCommand","hasNowJson","findUp","cwd","isCustomServer","turboFlag","eventNextPlugins","then","events","eventSwcPlugins","envInfo","expFeatureInfo","getStartServerInfo","logStartInfo","networkUrl","appUrl","ignoreESLint","Boolean","eslint","ignoreDuringBuilds","shouldLint","typeCheckingOptions","startTypeChecking","error","flush","exit","buildLintEvent","featureName","invocationCount","eventName","EVENT_BUILD_FEATURE_USAGE","payload","validFileMatcher","createValidFileMatcher","pageExtensions","pagesPaths","recursiveReadDir","pathnameFilter","isPageFile","changedPagePathsResult","detectChangedEntries","changed","middlewareDetectionRegExp","RegExp","MIDDLEWARE_FILENAME","instrumentationHookDetectionRegExp","INSTRUMENTATION_HOOK_FILENAME","rootDir","instrumentationHookEnabled","instrumentationHook","rootPaths","getFilesInDir","some","include","test","sortByPageExts","replace","hasMiddlewareFile","previewProps","previewModeId","crypto","randomBytes","toString","previewModeSigningKey","previewModeEncryptionKey","createPagesMapping","isDev","pagesType","PAGE_TYPES","PAGES","pagePaths","mappedAppPages","changedAppPathsResult","appPaths","absolutePath","isAppRouterPage","isRootNotFound","ignorePartFilter","part","APP","mappedRootPaths","ROOT","pagesPageKeys","conflictingAppPagePaths","appPageKeys","appKey","normalizedAppPageKey","normalizeAppPath","appPath","add","Array","from","generateInterceptionRoutesRewrites","basePath","totalAppPagesCount","numConflictingAppPaths","conflictingPublicFiles","hasPages404","PAGES_DIR_ALIAS","hasApp404","UNDERSCORE_NOT_FOUND_ROUTE_ENTRY","hasCustomErrorPage","hasPublicUnderScoreNextDir","PUBLIC_DIR_MIDDLEWARE_CONFLICT","hasPublicPageFile","fileExists","FileType","File","numConflicting","nestedReservedPages","match","restrictedRedirectPaths","routesManifestPath","ROUTES_MANIFEST","routesManifest","sortedRoutes","getSortedRoutes","staticRoutes","isDynamicRoute","isReservedPage","pages404","caseSensitive","caseSensitiveRoutes","r","buildCustomRoute","dataRoutes","i18n","rsc","header","RSC_HEADER","varyHeader","NEXT_ROUTER_STATE_TREE_HEADER","NEXT_ROUTER_PREFETCH_HEADER","prefetchHeader","didPostponeHeader","NEXT_DID_POSTPONE_HEADER","contentTypeHeader","RSC_CONTENT_TYPE_HEADER","suffix","RSC_SUFFIX","prefetchSuffix","RSC_PREFETCH_SUFFIX","skipMiddlewareUrlNormalize","clientRouterFilters","clientRouterFilter","nonInternalRedirects","internal","filterPaths","unchanged","entry","getPageFromPath","item","createClientRouterFilter","clientRouterFilterRedirects","clientRouterFilterAllowedRate","distDirCreated","err","isError","code","isWriteable","cleanDistDir","recursiveDelete","recordFrameworkVersion","updateBuildDiagnostics","buildStage","pagesManifestPath","PAGES_MANIFEST","cacheHandler","requiredServerFilesManifest","serverFilesManifest","configFile","compress","trustHostHeader","isExperimentalCompile","relativeAppDir","BUILD_MANIFEST","MIDDLEWARE_MANIFEST","MIDDLEWARE_BUILD_MANIFEST","MIDDLEWARE_REACT_LOADABLE_MANIFEST","sri","SUBRESOURCE_INTEGRITY_MANIFEST","APP_PATHS_MANIFEST","APP_PATH_ROUTES_MANIFEST","APP_BUILD_MANIFEST","SERVER_REFERENCE_MANIFEST","REACT_LOADABLE_MANIFEST","optimizeFonts","AUTOMATIC_FONT_OPTIMIZATION_MANIFEST","BUILD_ID_FILE","NEXT_FONT_MANIFEST","nonNullable","ignore","turbopackBuild","validateTurboNextConfig","startTime","hrtime","bindings","loadBindings","useWasmBinary","dev","project","turbo","createProject","projectPath","rootPath","jsConfig","getTurbopackJsConfig","watch","defineEnv","createDefineEnv","isTurbopack","fetchCacheKeyPrefix","middlewareMatchers","memoryLimit","stringify","type","entrypointsSubscription","entrypointsSubscribe","currentEntrypoints","global","document","middleware","instrumentation","Map","currentEntryIssues","manifestLoader","TurbopackManifestLoader","entrypointsResult","next","done","return","catch","entrypoints","value","topLevelErrors","issue","issues","message","formatIssue","e","handleEntrypoints","devRewrites","productionRewrites","logErrors","progress","createProgress","size","promises","sema","Sema","enqueue","fn","acquire","release","handleRouteType","handlePagesErrorRoute","Promise","all","writeManifests","errors","warnings","entryIssues","values","severity","isRelevantWarning","duration","buildTraceContext","buildTracesPromise","useBuildWorker","webpackBuildWorker","webpack","runServerAndEdgeInParallel","parallelServerCompiles","collectServerBuildTracesInParallel","parallelServerBuildTraces","setAttribute","info","traceMemoryUsage","buildOptions","compilerDuration","rest","event","eventBuildCompleted","durationInSeconds","serverBuildPromise","webpackBuild","res","buildTraceWorker","collectBuildTraces","edgeRuntimeRoutes","collectRoutesUsingEdgeRuntime","hasSsrAmpPages","isFlyingShuttle","edgeBuildPromise","postCompileSpinner","createSpinner","buildManifestPath","appBuildManifestPath","staticAppPagesCount","serverAppPagesCount","edgeRuntimeAppCount","edgeRuntimePagesCount","ssgStaticFallbackPages","ssgBlockingFallbackPages","invalidPages","hybridAmpPages","serverPropsPages","additionalSsgPaths","additionalSsgPathsEncoded","appStaticPaths","appStaticPathsEncoded","appNormalizedPaths","appDynamicParamPaths","appDefaultConfigs","pageInfos","pagesManifest","buildManifest","appBuildManifest","isAppPPREnabled","checkIsAppPPREnabled","ppr","appPathRoutes","appPathsManifest","key","NEXT_PHASE","pagesStaticWorkers","appStaticWorkers","analysisBegin","staticCheckSpan","functionsConfigManifest","functions","customAppGetInitialProps","namedExports","isNextImageImported","hasNonStaticErrorPage","configFileName","publicRuntimeConfig","serverRuntimeConfig","runtimeEnvConfig","nonStaticErrorPageSpan","errorPageHasCustomGetInitialProps","hasCustomGetInitialProps","checkingApp","errorPageStaticResult","isPageStatic","httpAgentOptions","defaultLocale","nextConfigOutput","output","pprConfig","appPageToCheck","customAppGetInitialPropsPromise","namedExportsPromise","getDefinedNamedExports","computedManifestData","computeFromManifest","gzipSize","actionManifest","entriesWithAction","id","node","workers","edge","pageType","checkPageSpan","actualPage","normalizePagePath","totalSize","getJsPageSizeInKb","isRoutePPREnabled","isSSG","isStatic","isServerComponent","isHybridAmp","ssgPageRoutes","find","normalizePathSep","originalAppPath","originalPath","normalizedPath","pageFilePath","isAppBuiltinNotFoundPage","staticInfo","getPageStaticInfo","extraConfig","pageRuntime","runtime","RSC_MODULE_TYPES","client","edgeInfo","isEdgeRuntime","manifestKey","isPageStaticSpan","workerResult","parentId","getId","isrFlushToDisk","maxMemoryCacheSize","cacheMaxMemorySize","set","warnOnce","encodedPrerenderRoutes","prerenderRoutes","appConfig","revalidate","isDynamic","hasGenerateStaticParams","dynamic","prerenderFallback","hasStaticProps","isAmpOnly","hasServerProps","STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR","delete","STATIC_STATUS_PAGES","initialRevalidateSeconds","pageDuration","ssgPageDurations","hasEmptyPrelude","errorPageResult","nonStaticErrorPage","returnValue","stopAndPersist","bold","yellow","buildDataRoute","useStaticPages404","pg","writeBuildId","optimizeCss","globOrig","cssFilePaths","reject","features","nextScriptWorkers","feature","stitchResult","stitchBuilds","edgePreviewProps","__NEXT_PREVIEW_MODE_ID","__NEXT_PREVIEW_MODE_ENCRYPTION_KEY","__NEXT_PREVIEW_MODE_SIGNING_KEY","allowedErrorRate","storeShuttle","finalPrerenderRoutes","finalDynamicRoutes","tbdPrerenderRoutes","ssgNotFoundPaths","usedStaticStatusPages","forEach","has","hasPages500","useDefaultStatic500","combinedPages","isApp404Static","hasStaticApp404","staticGenerationSpan","detectConflictingPaths","exportConfig","exportPathMap","defaultMap","query","__nextFallback","encodedRoutes","get","routeIdx","__nextSsgPath","_isDynamicError","_isAppDir","_isRoutePPREnabled","checkIsRoutePPREnabled","isSsg","isFallback","locale","__nextLocale","exportOptions","statusMessage","exportResult","writeTurborepoAccessTraceResult","traces","turborepoAccessTraceResults","serverBundle","getPagePath","unlink","hasDynamicData","byPath","isRouteHandler","isAppRouteRoute","experimentalPPR","bypassFor","ACTION_HEADER","UNDERSCORE_NOT_FOUND_ROUTE","metadata","hasPostponed","normalizedRoute","dataRoute","posix","prefetchDataRoute","routeMeta","status","initialStatus","exportHeaders","headerKeys","initialHeaders","isArray","experimentalBypassFor","isDynamicAppRoute","dataRouteRegex","prefetchDataRouteRegex","moveExportedPage","originPage","ext","additionalSsgFile","orig","relativeDest","slice","split","dest","isNotFound","rename","localeExt","extname","relativeDestNoPages","curPath","updatedRelativeDest","updatedOrig","updatedDest","moveExportedAppNotFoundTo404","isStaticSsgFallback","hasAmp","pageInfo","durationInfo","byPage","durationsByPath","hasHtmlOutput","ampPage","localePage","extraRoutes","pageFile","rm","force","postBuildSpinner","buildTracesSpinner","analysisEnd","eventBuildOptimize","staticPageCount","staticPropsPageCount","serverPropsPageCount","ssrPageCount","hasStatic404","hasReportWebVitals","rewritesCount","headersCount","redirectsCount","headersWithHasCount","rewritesWithHasCount","redirectsWithHasCount","middlewareCount","telemetryState","eventBuildFeatureUsage","usages","eventPackageUsedInGetServerSideProps","packagesUsedInServerSideProps","tbdRoute","allowedRevalidateHeaderKeys","notFoundRoutes","preview","EXPORT_MARKER","hasExportPathMap","exportTrailingSlash","trailingSlash","EXPORT_DETAIL","verifyPartytownSetup","printCustomRoutes","printTreeView","distPath","lockfilePatchPromise","cur","flushAllTraces","teardownTraceSubscriber","teardownHeapProfiler","uploadTrace","mode","projectDir","sync"],"mappings":"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"}