{"version":3,"sources":["../../../src/build/output/log.ts"],"sourcesContent":["import { bold, green, magenta, red, yellow, white } from '../../lib/picocolors'\n\nexport const prefixes = {\n  wait: white(bold('○')),\n  error: red(bold('⨯')),\n  warn: yellow(bold('⚠')),\n  ready: '▲', // no color\n  info: white(bold(' ')),\n  event: green(bold('✓')),\n  trace: magenta(bold('»')),\n} as const\n\nconst LOGGING_METHOD = {\n  log: 'log',\n  warn: 'warn',\n  error: 'error',\n} as const\n\nfunction prefixedLog(prefixType: keyof typeof prefixes, ...message: any[]) {\n  if ((message[0] === '' || message[0] === undefined) && message.length === 1) {\n    message.shift()\n  }\n\n  const consoleMethod: keyof typeof LOGGING_METHOD =\n    prefixType in LOGGING_METHOD\n      ? LOGGING_METHOD[prefixType as keyof typeof LOGGING_METHOD]\n      : 'log'\n\n  const prefix = prefixes[prefixType]\n  // If there's no message, don't print the prefix but a new line\n  if (message.length === 0) {\n    console[consoleMethod]('')\n  } else {\n    console[consoleMethod](' ' + prefix, ...message)\n  }\n}\n\nexport function bootstrap(...message: any[]) {\n  console.log(' ', ...message)\n}\n\nexport function wait(...message: any[]) {\n  prefixedLog('wait', ...message)\n}\n\nexport function error(...message: any[]) {\n  prefixedLog('error', ...message)\n}\n\nexport function warn(...message: any[]) {\n  prefixedLog('warn', ...message)\n}\n\nexport function ready(...message: any[]) {\n  prefixedLog('ready', ...message)\n}\n\nexport function info(...message: any[]) {\n  prefixedLog('info', ...message)\n}\n\nexport function event(...message: any[]) {\n  prefixedLog('event', ...message)\n}\n\nexport function trace(...message: any[]) {\n  prefixedLog('trace', ...message)\n}\n\nconst warnOnceMessages = new Set()\nexport function warnOnce(...message: any[]) {\n  if (!warnOnceMessages.has(message[0])) {\n    warnOnceMessages.add(message.join(' '))\n\n    warn(...message)\n  }\n}\n"],"names":["bootstrap","error","event","info","prefixes","ready","trace","wait","warn","warnOnce","white","bold","red","yellow","green","magenta","LOGGING_METHOD","log","prefixedLog","prefixType","message","undefined","length","shift","consoleMethod","prefix","console","warnOnceMessages","Set","has","add","join"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;IAqCgBA,SAAS;eAATA;;IAQAC,KAAK;eAALA;;IAgBAC,KAAK;eAALA;;IAJAC,IAAI;eAAJA;;IAvDHC,QAAQ;eAARA;;IAmDGC,KAAK;eAALA;;IAYAC,KAAK;eAALA;;IAxBAC,IAAI;eAAJA;;IAQAC,IAAI;eAAJA;;IAqBAC,QAAQ;eAARA;;;4BAtEyC;AAElD,MAAML,WAAW;IACtBG,MAAMG,IAAAA,iBAAK,EAACC,IAAAA,gBAAI,EAAC;IACjBV,OAAOW,IAAAA,eAAG,EAACD,IAAAA,gBAAI,EAAC;IAChBH,MAAMK,IAAAA,kBAAM,EAACF,IAAAA,gBAAI,EAAC;IAClBN,OAAO;IACPF,MAAMO,IAAAA,iBAAK,EAACC,IAAAA,gBAAI,EAAC;IACjBT,OAAOY,IAAAA,iBAAK,EAACH,IAAAA,gBAAI,EAAC;IAClBL,OAAOS,IAAAA,mBAAO,EAACJ,IAAAA,gBAAI,EAAC;AACtB;AAEA,MAAMK,iBAAiB;IACrBC,KAAK;IACLT,MAAM;IACNP,OAAO;AACT;AAEA,SAASiB,YAAYC,UAAiC,EAAE,GAAGC,OAAc;IACvE,IAAI,AAACA,CAAAA,OAAO,CAAC,EAAE,KAAK,MAAMA,OAAO,CAAC,EAAE,KAAKC,SAAQ,KAAMD,QAAQE,MAAM,KAAK,GAAG;QAC3EF,QAAQG,KAAK;IACf;IAEA,MAAMC,gBACJL,cAAcH,iBACVA,cAAc,CAACG,WAA0C,GACzD;IAEN,MAAMM,SAASrB,QAAQ,CAACe,WAAW;IACnC,+DAA+D;IAC/D,IAAIC,QAAQE,MAAM,KAAK,GAAG;QACxBI,OAAO,CAACF,cAAc,CAAC;IACzB,OAAO;QACLE,OAAO,CAACF,cAAc,CAAC,MAAMC,WAAWL;IAC1C;AACF;AAEO,SAASpB,UAAU,GAAGoB,OAAc;IACzCM,QAAQT,GAAG,CAAC,QAAQG;AACtB;AAEO,SAASb,KAAK,GAAGa,OAAc;IACpCF,YAAY,WAAWE;AACzB;AAEO,SAASnB,MAAM,GAAGmB,OAAc;IACrCF,YAAY,YAAYE;AAC1B;AAEO,SAASZ,KAAK,GAAGY,OAAc;IACpCF,YAAY,WAAWE;AACzB;AAEO,SAASf,MAAM,GAAGe,OAAc;IACrCF,YAAY,YAAYE;AAC1B;AAEO,SAASjB,KAAK,GAAGiB,OAAc;IACpCF,YAAY,WAAWE;AACzB;AAEO,SAASlB,MAAM,GAAGkB,OAAc;IACrCF,YAAY,YAAYE;AAC1B;AAEO,SAASd,MAAM,GAAGc,OAAc;IACrCF,YAAY,YAAYE;AAC1B;AAEA,MAAMO,mBAAmB,IAAIC;AACtB,SAASnB,SAAS,GAAGW,OAAc;IACxC,IAAI,CAACO,iBAAiBE,GAAG,CAACT,OAAO,CAAC,EAAE,GAAG;QACrCO,iBAAiBG,GAAG,CAACV,QAAQW,IAAI,CAAC;QAElCvB,QAAQY;IACV;AACF"}