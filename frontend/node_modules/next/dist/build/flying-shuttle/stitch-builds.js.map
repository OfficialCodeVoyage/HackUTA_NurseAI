{"version":3,"sources":["../../../src/build/flying-shuttle/stitch-builds.ts"],"sourcesContent":["import type { Rewrite, Redirect } from '../../lib/load-custom-routes'\nimport type { PagesManifest } from '../webpack/plugins/pages-manifest-plugin'\n\nimport fs from 'fs'\nimport path from 'path'\nimport { getPageFromPath } from '../entries'\nimport { Sema } from 'next/dist/compiled/async-sema'\nimport { recursiveCopy } from '../../lib/recursive-copy'\nimport { getSortedRoutes } from '../../shared/lib/router/utils'\nimport { generateClientManifest } from '../webpack/plugins/build-manifest-plugin'\nimport { createClientRouterFilter } from '../../lib/create-client-router-filter'\nimport {\n  hasShuttle,\n  type DetectedEntriesResult,\n} from './detect-changed-entries'\nimport {\n  APP_BUILD_MANIFEST,\n  APP_PATH_ROUTES_MANIFEST,\n  APP_PATHS_MANIFEST,\n  AUTOMATIC_FONT_OPTIMIZATION_MANIFEST,\n  BUILD_MANIFEST,\n  CLIENT_REFERENCE_MANIFEST,\n  FUNCTIONS_CONFIG_MANIFEST,\n  MIDDLEWARE_BUILD_MANIFEST,\n  MIDDLEWARE_MANIFEST,\n  MIDDLEWARE_REACT_LOADABLE_MANIFEST,\n  NEXT_FONT_MANIFEST,\n  PAGES_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n  ROUTES_MANIFEST,\n} from '../../shared/lib/constants'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\n\nexport async function stitchBuilds(\n  {\n    distDir,\n    shuttleDir,\n    buildId,\n    rewrites,\n    redirects,\n    allowedErrorRate,\n    encryptionKey,\n    edgePreviewProps,\n  }: {\n    buildId: string\n    distDir: string\n    shuttleDir: string\n    rewrites: {\n      beforeFiles: Rewrite[]\n      afterFiles: Rewrite[]\n      fallback: Rewrite[]\n    }\n    redirects: Redirect[]\n    allowedErrorRate?: number\n    encryptionKey: string\n    edgePreviewProps: Record<string, string>\n  },\n  entries: {\n    changed: DetectedEntriesResult\n    unchanged: DetectedEntriesResult\n    pageExtensions: string[]\n  }\n): Promise<{\n  pagesManifest?: PagesManifest\n}> {\n  if (!(await hasShuttle(shuttleDir))) {\n    // no shuttle directory nothing to stitch\n    return {}\n  }\n  // if a manifest is needed in the rest of the build\n  // we return it from here so it can be used without\n  // re-reading from disk after changing\n  const updatedManifests: {\n    pagesManifest?: PagesManifest\n  } = {}\n\n  // we need to copy the chunks from the shuttle folder\n  // to the distDir (we copy all server split chunks currently)\n  await recursiveCopy(\n    path.join(shuttleDir, 'server'),\n    path.join(distDir, 'server'),\n    {\n      filter(item) {\n        // we copy page chunks separately to not copy stale entries\n        return !item.match(/^[/\\\\](pages|app)[/\\\\]/)\n      },\n      overwrite: true,\n    }\n  )\n  // copy static chunks (this includes stale chunks but won't be loaded)\n  // unless referenced\n  await recursiveCopy(\n    path.join(shuttleDir, 'static'),\n    path.join(distDir, 'static'),\n    { overwrite: true }\n  )\n\n  async function copyPageChunk(entry: string, type: 'app' | 'pages') {\n    // copy entry chunk and flight manifest stuff\n    // TODO: copy .map files?\n    const entryFile = path.join('server', type, `${entry}.js`)\n\n    await fs.promises.mkdir(path.join(distDir, path.dirname(entryFile)), {\n      recursive: true,\n    })\n    await fs.promises.copyFile(\n      path.join(shuttleDir, entryFile + '.nft.json'),\n      path.join(distDir, entryFile + '.nft.json')\n    )\n\n    if (type === 'app' && !entry.endsWith('/route')) {\n      const clientRefManifestFile = path.join(\n        'server',\n        type,\n        `${entry}_${CLIENT_REFERENCE_MANIFEST}.js`\n      )\n      await fs.promises.copyFile(\n        path.join(shuttleDir, clientRefManifestFile),\n        path.join(distDir, clientRefManifestFile)\n      )\n    }\n    await fs.promises.copyFile(\n      path.join(shuttleDir, entryFile),\n      path.join(distDir, entryFile)\n    )\n  }\n  const copySema = new Sema(8)\n\n  // restore unchanged entries avoiding copying stale\n  // entries from the shuttle/previous build\n  for (const { type, curEntries } of [\n    { type: 'app', curEntries: entries.unchanged.app },\n    { type: 'pages', curEntries: entries.unchanged.pages },\n  ] as Array<{ type: 'app' | 'pages'; curEntries: string[] }>) {\n    await Promise.all(\n      curEntries.map(async (entry) => {\n        try {\n          await copySema.acquire()\n          let normalizedEntry = getPageFromPath(entry, entries.pageExtensions)\n          if (normalizedEntry === '/') {\n            normalizedEntry = '/index'\n          }\n          await copyPageChunk(normalizedEntry, type)\n        } finally {\n          copySema.release()\n        }\n      })\n    )\n  }\n  // always attempt copying not-found chunk\n  await copyPageChunk('/_not-found/page', 'app').catch(() => {})\n\n  // merge dynamic/static routes in routes-manifest\n  const [restoreRoutesManifest, currentRoutesManifest] = await Promise.all(\n    [\n      path.join(shuttleDir, 'manifests', ROUTES_MANIFEST),\n      path.join(distDir, ROUTES_MANIFEST),\n    ].map(async (f) => JSON.parse(await fs.promises.readFile(f, 'utf8')))\n  )\n  const dynamicRouteMap: Record<string, any> = {}\n  const combinedDynamicRoutes: Record<string, any>[] = [\n    ...currentRoutesManifest.dynamicRoutes,\n    ...restoreRoutesManifest.dynamicRoutes,\n  ]\n  for (const route of combinedDynamicRoutes) {\n    dynamicRouteMap[route.page] = route\n  }\n\n  const mergedRoutesManifest = {\n    ...currentRoutesManifest,\n    dynamicRoutes: getSortedRoutes(\n      combinedDynamicRoutes.map((item) => item.page)\n    ).map((page) => dynamicRouteMap[page]),\n    staticRoutes: [\n      ...currentRoutesManifest.staticRoutes,\n      ...restoreRoutesManifest.staticRoutes,\n    ],\n  }\n  await fs.promises.writeFile(\n    path.join(distDir, ROUTES_MANIFEST),\n    JSON.stringify(mergedRoutesManifest, null, 2)\n  )\n\n  // for build-manifest we use latest runtime files\n  // and only merge previous page chunk entries\n  // middleware-build-manifest.js (needs to be regenerated)\n  const [restoreBuildManifest, currentBuildManifest] = await Promise.all(\n    [\n      path.join(shuttleDir, 'manifests', BUILD_MANIFEST),\n      path.join(distDir, BUILD_MANIFEST),\n    ].map(async (file) => JSON.parse(await fs.promises.readFile(file, 'utf8')))\n  )\n  const mergedBuildManifest = {\n    // we want to re-use original runtime\n    // chunks so we favor restored version\n    // over new\n    ...currentBuildManifest,\n    pages: {\n      ...restoreBuildManifest.pages,\n      ...currentBuildManifest.pages,\n    },\n  }\n\n  // _app and _error is unique per runtime\n  // so nest under each specific entry in build-manifest\n  const internalEntries = ['/_error', '/_app']\n\n  for (const entry of Object.keys(restoreBuildManifest.pages)) {\n    if (currentBuildManifest.pages[entry]) {\n      continue\n    }\n    for (const internalEntry of internalEntries) {\n      for (const chunk of restoreBuildManifest.pages[internalEntry]) {\n        if (!restoreBuildManifest.pages[entry].includes(chunk)) {\n          mergedBuildManifest.pages[entry].unshift(chunk)\n        }\n      }\n    }\n  }\n\n  for (const entry of Object.keys(currentBuildManifest.pages)) {\n    for (const internalEntry of internalEntries) {\n      for (const chunk of currentBuildManifest.pages[internalEntry]) {\n        if (!currentBuildManifest.pages[entry].includes(chunk)) {\n          mergedBuildManifest.pages[entry].unshift(chunk)\n        }\n      }\n    }\n  }\n\n  for (const key of internalEntries) {\n    mergedBuildManifest.pages[key] = []\n  }\n\n  for (const entry of entries.unchanged.app || []) {\n    const normalizedEntry = getPageFromPath(entry, entries.pageExtensions)\n    mergedBuildManifest.rootMainFilesTree[normalizedEntry] =\n      restoreBuildManifest.rootMainFilesTree[normalizedEntry] ||\n      restoreBuildManifest.rootMainFiles\n  }\n\n  await fs.promises.writeFile(\n    path.join(distDir, BUILD_MANIFEST),\n    JSON.stringify(mergedBuildManifest, null, 2)\n  )\n  await fs.promises.writeFile(\n    path.join(distDir, 'server', `${MIDDLEWARE_BUILD_MANIFEST}.js`),\n    `self.__BUILD_MANIFEST=${JSON.stringify(mergedBuildManifest)}`\n  )\n  await fs.promises.writeFile(\n    path.join(distDir, 'static', buildId, `_buildManifest.js`),\n    `self.__BUILD_MANIFEST = ${generateClientManifest(\n      mergedBuildManifest,\n      rewrites,\n      createClientRouterFilter(\n        [\n          ...[\n            // client filter always has all app paths\n            ...(entries.unchanged?.app || []),\n            ...(entries.changed?.app || []),\n          ].map((entry) =>\n            normalizeAppPath(getPageFromPath(entry, entries.pageExtensions))\n          ),\n          ...(entries.unchanged.pages.length\n            ? entries.changed?.pages || []\n            : []\n          ).map((item) => getPageFromPath(item, entries.pageExtensions)),\n        ],\n        redirects,\n        allowedErrorRate\n      )\n    )};self.__BUILD_MANIFEST_CB && self.__BUILD_MANIFEST_CB()`\n  )\n\n  // for react-loadable-manifest we just merge directly\n  // prioritizing current manifest over previous,\n  // middleware-react-loadable-manifest (needs to be regenerated)\n  const [restoreLoadableManifest, currentLoadableManifest] = await Promise.all(\n    [\n      path.join(shuttleDir, 'manifests', REACT_LOADABLE_MANIFEST),\n      path.join(distDir, REACT_LOADABLE_MANIFEST),\n    ].map(async (file) => JSON.parse(await fs.promises.readFile(file, 'utf8')))\n  )\n  const mergedLoadableManifest = {\n    ...restoreLoadableManifest,\n    ...currentLoadableManifest,\n  }\n\n  await fs.promises.writeFile(\n    path.join(distDir, REACT_LOADABLE_MANIFEST),\n    JSON.stringify(mergedLoadableManifest, null, 2)\n  )\n  await fs.promises.writeFile(\n    path.join(distDir, 'server', `${MIDDLEWARE_REACT_LOADABLE_MANIFEST}.js`),\n    `self.__REACT_LOADABLE_MANIFEST=${JSON.stringify(\n      JSON.stringify(mergedLoadableManifest)\n    )}`\n  )\n\n  // for server/middleware-manifest we just merge the functions\n  // and middleware fields\n  const [restoreMiddlewareManifest, currentMiddlewareManifest] =\n    await Promise.all(\n      [\n        path.join(shuttleDir, 'server', MIDDLEWARE_MANIFEST),\n        path.join(distDir, 'server', MIDDLEWARE_MANIFEST),\n      ].map(async (file) =>\n        JSON.parse(await fs.promises.readFile(file, 'utf8'))\n      )\n    )\n  const mergedMiddlewareManifest = {\n    ...currentMiddlewareManifest,\n    functions: {\n      ...restoreMiddlewareManifest.functions,\n      ...currentMiddlewareManifest.functions,\n    },\n  }\n  // update edge function env\n  const updatedEdgeEnv: Record<string, string> = {\n    __NEXT_BUILD_ID: buildId,\n    NEXT_SERVER_ACTIONS_ENCRYPTION_KEY: encryptionKey,\n    ...edgePreviewProps,\n  }\n  if (mergedMiddlewareManifest.middleware['/']) {\n    Object.assign(mergedMiddlewareManifest.middleware['/'].env, updatedEdgeEnv)\n  }\n  for (const key of Object.keys(mergedMiddlewareManifest.functions)) {\n    Object.assign(mergedMiddlewareManifest.functions[key].env, updatedEdgeEnv)\n  }\n\n  await fs.promises.writeFile(\n    path.join(distDir, 'server', MIDDLEWARE_MANIFEST),\n    JSON.stringify(mergedMiddlewareManifest, null, 2)\n  )\n\n  // for server/next-font-manifest we just merge nested\n  // page/app fields and regenerate server/next-font-manifest.js\n  const [restoreNextFontManifest, currentNextFontManifest] = await Promise.all(\n    [\n      path.join(shuttleDir, 'server', `${NEXT_FONT_MANIFEST}.json`),\n      path.join(distDir, 'server', `${NEXT_FONT_MANIFEST}.json`),\n    ].map(async (file) => JSON.parse(await fs.promises.readFile(file, 'utf8')))\n  )\n  const mergedNextFontManifest = {\n    ...currentNextFontManifest,\n    pages: {\n      ...restoreNextFontManifest.pages,\n      ...currentNextFontManifest.pages,\n    },\n    app: {\n      ...restoreNextFontManifest.app,\n      ...currentNextFontManifest.app,\n    },\n  }\n\n  await fs.promises.writeFile(\n    path.join(distDir, 'server', `${NEXT_FONT_MANIFEST}.json`),\n    JSON.stringify(mergedNextFontManifest, null, 2)\n  )\n  await fs.promises.writeFile(\n    path.join(distDir, 'server', `${NEXT_FONT_MANIFEST}.js`),\n    `self.__NEXT_FONT_MANIFEST=${JSON.stringify(\n      JSON.stringify(mergedNextFontManifest)\n    )}`\n  )\n\n  // for server/font-manifest.json we just merge the arrays\n  for (const file of [AUTOMATIC_FONT_OPTIMIZATION_MANIFEST]) {\n    const [restoreFontManifest, currentFontManifest] = await Promise.all(\n      [\n        path.join(shuttleDir, 'server', file),\n        path.join(distDir, 'server', file),\n      ].map(async (f) => JSON.parse(await fs.promises.readFile(f, 'utf8')))\n    )\n    const mergedFontManifest = [...restoreFontManifest, ...currentFontManifest]\n\n    await fs.promises.writeFile(\n      path.join(distDir, 'server', file),\n      JSON.stringify(mergedFontManifest, null, 2)\n    )\n  }\n\n  // for server/functions-config-manifest.json we just merge\n  // the functions field\n  const [restoreFunctionsConfigManifest, currentFunctionsConfigManifest] =\n    await Promise.all(\n      [\n        path.join(shuttleDir, 'server', FUNCTIONS_CONFIG_MANIFEST),\n        path.join(distDir, 'server', FUNCTIONS_CONFIG_MANIFEST),\n      ].map(async (file) =>\n        JSON.parse(await fs.promises.readFile(file, 'utf8'))\n      )\n    )\n  const mergedFunctionsConfigManifest = {\n    ...currentFunctionsConfigManifest,\n    functions: {\n      ...restoreFunctionsConfigManifest.functions,\n      ...currentFunctionsConfigManifest.functions,\n    },\n  }\n  await fs.promises.writeFile(\n    path.join(distDir, 'server', FUNCTIONS_CONFIG_MANIFEST),\n    JSON.stringify(mergedFunctionsConfigManifest, null, 2)\n  )\n\n  for (const file of [APP_BUILD_MANIFEST, APP_PATH_ROUTES_MANIFEST]) {\n    const [restorePagesManifest, currentPagesManifest] = await Promise.all(\n      [path.join(shuttleDir, 'manifests', file), path.join(distDir, file)].map(\n        async (f) => JSON.parse(await fs.promises.readFile(f, 'utf8'))\n      )\n    )\n    const mergedPagesManifest = {\n      ...restorePagesManifest,\n      ...currentPagesManifest,\n\n      ...(file === APP_BUILD_MANIFEST\n        ? {\n            pages: {\n              ...restorePagesManifest.pages,\n              ...currentPagesManifest.pages,\n            },\n          }\n        : {}),\n    }\n    await fs.promises.writeFile(\n      path.join(distDir, file),\n      JSON.stringify(mergedPagesManifest, null, 2)\n    )\n  }\n\n  for (const file of [PAGES_MANIFEST, APP_PATHS_MANIFEST]) {\n    const [restoreAppManifest, currentAppManifest] = await Promise.all(\n      [\n        path.join(shuttleDir, 'server', file),\n        path.join(distDir, 'server', file),\n      ].map(async (f) => JSON.parse(await fs.promises.readFile(f, 'utf8')))\n    )\n    const mergedManifest = {\n      ...restoreAppManifest,\n      ...currentAppManifest,\n    }\n    await fs.promises.writeFile(\n      path.join(distDir, 'server', file),\n      JSON.stringify(mergedManifest, null, 2)\n    )\n    if (file === PAGES_MANIFEST) {\n      updatedManifests.pagesManifest = mergedManifest\n    }\n  }\n\n  // for server/server-reference-manifest.json we merge\n  // and regenerate server/server-reference-manifest.js\n  const [restoreServerRefManifest, currentServerRefManifest] =\n    await Promise.all(\n      [\n        path.join(shuttleDir, 'server', `${SERVER_REFERENCE_MANIFEST}.json`),\n        path.join(distDir, 'server', `${SERVER_REFERENCE_MANIFEST}.json`),\n      ].map(async (file) =>\n        JSON.parse(await fs.promises.readFile(file, 'utf8'))\n      )\n    )\n  const mergedServerRefManifest = {\n    ...currentServerRefManifest,\n    node: {\n      ...restoreServerRefManifest.node,\n      ...currentServerRefManifest.node,\n    },\n    edge: {\n      ...restoreServerRefManifest.edge,\n      ...currentServerRefManifest.edge,\n    },\n  }\n  await fs.promises.writeFile(\n    path.join(distDir, 'server', `${SERVER_REFERENCE_MANIFEST}.json`),\n    JSON.stringify(mergedServerRefManifest, null, 2)\n  )\n  await fs.promises.writeFile(\n    path.join(distDir, 'server', `${SERVER_REFERENCE_MANIFEST}.js`),\n    `self.__RSC_SERVER_MANIFEST=${JSON.stringify(\n      JSON.stringify(mergedServerRefManifest)\n    )}`\n  )\n\n  // TODO: inline env variables post build by find/replace\n  // in all the chunks for NEXT_PUBLIC_?\n\n  return updatedManifests\n}\n"],"names":["stitchBuilds","distDir","shuttleDir","buildId","rewrites","redirects","allowedErrorRate","encryptionKey","edgePreviewProps","entries","hasShuttle","updatedManifests","recursiveCopy","path","join","filter","item","match","overwrite","copyPageChunk","entry","type","entryFile","fs","promises","mkdir","dirname","recursive","copyFile","endsWith","clientRefManifestFile","CLIENT_REFERENCE_MANIFEST","copySema","Sema","curEntries","unchanged","app","pages","Promise","all","map","acquire","normalizedEntry","getPageFromPath","pageExtensions","release","catch","restoreRoutesManifest","currentRoutesManifest","ROUTES_MANIFEST","f","JSON","parse","readFile","dynamicRouteMap","combinedDynamicRoutes","dynamicRoutes","route","page","mergedRoutesManifest","getSortedRoutes","staticRoutes","writeFile","stringify","restoreBuildManifest","currentBuildManifest","BUILD_MANIFEST","file","mergedBuildManifest","internalEntries","Object","keys","internalEntry","chunk","includes","unshift","key","rootMainFilesTree","rootMainFiles","MIDDLEWARE_BUILD_MANIFEST","generateClientManifest","createClientRouterFilter","changed","normalizeAppPath","length","restoreLoadableManifest","currentLoadableManifest","REACT_LOADABLE_MANIFEST","mergedLoadableManifest","MIDDLEWARE_REACT_LOADABLE_MANIFEST","restoreMiddlewareManifest","currentMiddlewareManifest","MIDDLEWARE_MANIFEST","mergedMiddlewareManifest","functions","updatedEdgeEnv","__NEXT_BUILD_ID","NEXT_SERVER_ACTIONS_ENCRYPTION_KEY","middleware","assign","env","restoreNextFontManifest","currentNextFontManifest","NEXT_FONT_MANIFEST","mergedNextFontManifest","AUTOMATIC_FONT_OPTIMIZATION_MANIFEST","restoreFontManifest","currentFontManifest","mergedFontManifest","restoreFunctionsConfigManifest","currentFunctionsConfigManifest","FUNCTIONS_CONFIG_MANIFEST","mergedFunctionsConfigManifest","APP_BUILD_MANIFEST","APP_PATH_ROUTES_MANIFEST","restorePagesManifest","currentPagesManifest","mergedPagesManifest","PAGES_MANIFEST","APP_PATHS_MANIFEST","restoreAppManifest","currentAppManifest","mergedManifest","pagesManifest","restoreServerRefManifest","currentServerRefManifest","SERVER_REFERENCE_MANIFEST","mergedServerRefManifest","node","edge"],"mappings":"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"}