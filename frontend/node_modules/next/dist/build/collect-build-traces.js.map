{"version":3,"sources":["../../src/build/collect-build-traces.ts"],"sourcesContent":["import { Span } from '../trace'\nimport type { NextConfigComplete } from '../server/config-shared'\n\nimport {\n  TRACE_IGNORES,\n  type BuildTraceContext,\n  getFilesMapFromReasons,\n  getHash,\n} from './webpack/plugins/next-trace-entrypoints-plugin'\n\nimport {\n  TRACE_OUTPUT_VERSION,\n  TURBO_TRACE_DEFAULT_MEMORY_LIMIT,\n} from '../shared/lib/constants'\n\nimport path from 'path'\nimport fs from 'fs/promises'\nimport { loadBindings } from './swc'\nimport { nonNullable } from '../lib/non-nullable'\nimport * as ciEnvironment from '../telemetry/ci-info'\nimport debugOriginal from 'next/dist/compiled/debug'\nimport picomatch from 'next/dist/compiled/picomatch'\nimport { defaultOverrides } from '../server/require-hook'\nimport { nodeFileTrace } from 'next/dist/compiled/@vercel/nft'\nimport { normalizePagePath } from '../shared/lib/page-path/normalize-page-path'\nimport { normalizeAppPath } from '../shared/lib/router/utils/app-paths'\nimport isError from '../lib/is-error'\nimport type { NodeFileTraceReasons } from '@vercel/nft'\nimport type { RoutesUsingEdgeRuntime } from './utils'\n\nconst debug = debugOriginal('next:build:build-traces')\n\nconst hashCache: Record<string, string> = {}\n\nfunction shouldIgnore(\n  file: string,\n  serverIgnoreFn: (file: string) => boolean,\n  reasons: NodeFileTraceReasons,\n  cachedIgnoreFiles: Map<string, boolean>,\n  children: Set<string> = new Set()\n) {\n  if (cachedIgnoreFiles.has(file)) {\n    return cachedIgnoreFiles.get(file)\n  }\n\n  if (serverIgnoreFn(file)) {\n    cachedIgnoreFiles.set(file, true)\n    return true\n  }\n  children.add(file)\n\n  const reason = reasons.get(file)\n  if (!reason || reason.parents.size === 0 || reason.type.includes('initial')) {\n    cachedIgnoreFiles.set(file, false)\n    return false\n  }\n\n  // if all parents are ignored the child file\n  // should be ignored as well\n  let allParentsIgnored = true\n\n  for (const parent of reason.parents.values()) {\n    if (!children.has(parent)) {\n      children.add(parent)\n      if (\n        !shouldIgnore(\n          parent,\n          serverIgnoreFn,\n          reasons,\n          cachedIgnoreFiles,\n          children\n        )\n      ) {\n        allParentsIgnored = false\n        break\n      }\n    }\n  }\n\n  cachedIgnoreFiles.set(file, allParentsIgnored)\n  return allParentsIgnored\n}\n\nexport async function collectBuildTraces({\n  dir,\n  config,\n  distDir,\n  edgeRuntimeRoutes,\n  staticPages,\n  nextBuildSpan = new Span({ name: 'build' }),\n  hasSsrAmpPages,\n  buildTraceContext,\n  outputFileTracingRoot,\n  isFlyingShuttle,\n}: {\n  dir: string\n  distDir: string\n  staticPages: string[]\n  hasSsrAmpPages: boolean\n  isFlyingShuttle?: boolean\n  outputFileTracingRoot: string\n  // pageInfos is serialized when this function runs in a worker.\n  edgeRuntimeRoutes: RoutesUsingEdgeRuntime\n  nextBuildSpan?: Span\n  config: NextConfigComplete\n  buildTraceContext?: BuildTraceContext\n}) {\n  const startTime = Date.now()\n  debug('starting build traces')\n  let turboTasksForTrace: unknown\n  let bindings = await loadBindings()\n\n  const runTurbotrace = async function () {\n    if (!config.experimental.turbotrace || !buildTraceContext) {\n      return\n    }\n    if (!bindings?.isWasm && typeof bindings.turbo.startTrace === 'function') {\n      let turbotraceOutputPath: string | undefined\n      let turbotraceFiles: string[] | undefined\n      turboTasksForTrace = bindings.turbo.createTurboTasks(\n        (config.experimental.turbotrace?.memoryLimit ??\n          TURBO_TRACE_DEFAULT_MEMORY_LIMIT) *\n          1024 *\n          1024\n      )\n\n      const { entriesTrace, chunksTrace } = buildTraceContext\n      if (entriesTrace) {\n        const {\n          appDir: buildTraceContextAppDir,\n          depModArray,\n          entryNameMap,\n          outputPath,\n          action,\n        } = entriesTrace\n        const depModSet = new Set(depModArray)\n        const filesTracedInEntries: string[] = await bindings.turbo.startTrace(\n          action,\n          turboTasksForTrace\n        )\n\n        const { contextDirectory, input: entriesToTrace } = action\n\n        // only trace the assets under the appDir\n        // exclude files from node_modules, entries and processed by webpack\n        const filesTracedFromEntries = filesTracedInEntries\n          .map((f) => path.join(contextDirectory, f))\n          .filter(\n            (f) =>\n              !f.includes('/node_modules/') &&\n              f.startsWith(buildTraceContextAppDir) &&\n              !entriesToTrace.includes(f) &&\n              !depModSet.has(f)\n          )\n        if (filesTracedFromEntries.length) {\n          // The turbo trace doesn't provide the traced file type and reason at present\n          // let's write the traced files into the first [entry].nft.json\n          const [[, entryName]] = Array.from<[string, string]>(\n            Object.entries(entryNameMap)\n          ).filter(([k]) => k.startsWith(buildTraceContextAppDir))\n          const traceOutputPath = path.join(\n            outputPath,\n            `../${entryName}.js.nft.json`\n          )\n          const traceOutputDir = path.dirname(traceOutputPath)\n\n          turbotraceOutputPath = traceOutputPath\n          turbotraceFiles = filesTracedFromEntries.map((file) =>\n            path.relative(traceOutputDir, file)\n          )\n        }\n      }\n      if (chunksTrace) {\n        const { action, outputPath } = chunksTrace\n        action.input = action.input.filter((f: any) => {\n          const outputPagesPath = path.join(outputPath, '..', 'pages')\n          return (\n            !f.startsWith(outputPagesPath) ||\n            !staticPages.includes(\n              // strip `outputPagesPath` and file ext from absolute\n              f.substring(outputPagesPath.length, f.length - 3)\n            )\n          )\n        })\n        await bindings.turbo.startTrace(action, turboTasksForTrace)\n        if (turbotraceOutputPath && turbotraceFiles) {\n          const existedNftFile = await fs\n            .readFile(turbotraceOutputPath, 'utf8')\n            .then((existedContent) => JSON.parse(existedContent))\n            .catch(() => ({\n              version: TRACE_OUTPUT_VERSION,\n              files: [],\n            }))\n          existedNftFile.files.push(...turbotraceFiles)\n          const filesSet = new Set(existedNftFile.files)\n          existedNftFile.files = [...filesSet]\n          await fs.writeFile(\n            turbotraceOutputPath,\n            JSON.stringify(existedNftFile),\n            'utf8'\n          )\n        }\n      }\n    }\n  }\n\n  const { outputFileTracingIncludes = {}, outputFileTracingExcludes = {} } =\n    config.experimental\n  const excludeGlobKeys = Object.keys(outputFileTracingExcludes)\n  const includeGlobKeys = Object.keys(outputFileTracingIncludes)\n\n  await nextBuildSpan\n    .traceChild('node-file-trace-build', {\n      isTurbotrace: Boolean(config.experimental.turbotrace) ? 'true' : 'false',\n    })\n    .traceAsyncFn(async () => {\n      const nextServerTraceOutput = path.join(\n        distDir,\n        'next-server.js.nft.json'\n      )\n      const nextMinimalTraceOutput = path.join(\n        distDir,\n        'next-minimal-server.js.nft.json'\n      )\n      const root =\n        config.experimental?.turbotrace?.contextDirectory ??\n        outputFileTracingRoot\n\n      // Under standalone mode, we need to trace the extra IPC server and\n      // worker files.\n      const isStandalone = config.output === 'standalone'\n      const nextServerEntry = require.resolve('next/dist/server/next-server')\n      const sharedEntriesSet = [\n        ...(config.experimental.turbotrace\n          ? []\n          : Object.keys(defaultOverrides).map((value) =>\n              require.resolve(value, {\n                paths: [require.resolve('next/dist/server/require-hook')],\n              })\n            )),\n      ]\n\n      const { cacheHandler } = config\n\n      // ensure we trace any dependencies needed for custom\n      // incremental cache handler\n      if (cacheHandler) {\n        sharedEntriesSet.push(\n          require.resolve(\n            path.isAbsolute(cacheHandler)\n              ? cacheHandler\n              : path.join(dir, cacheHandler)\n          )\n        )\n      }\n\n      const serverEntries = [\n        ...sharedEntriesSet,\n        ...(isStandalone\n          ? [\n              require.resolve('next/dist/server/lib/start-server'),\n              require.resolve('next/dist/server/next'),\n              require.resolve('next/dist/server/require-hook'),\n            ]\n          : []),\n        require.resolve('next/dist/server/next-server'),\n      ].filter(Boolean) as string[]\n\n      const minimalServerEntries = [\n        ...sharedEntriesSet,\n        require.resolve('next/dist/compiled/next-server/server.runtime.prod'),\n      ].filter(Boolean)\n\n      const additionalIgnores = new Set<string>()\n\n      for (const glob of excludeGlobKeys) {\n        if (picomatch(glob)('next-server')) {\n          outputFileTracingExcludes[glob].forEach((exclude) => {\n            additionalIgnores.add(exclude)\n          })\n        }\n      }\n\n      const makeIgnoreFn = (ignores: string[]) => {\n        // pre compile the ignore globs\n        const isMatch = picomatch(ignores, {\n          contains: true,\n          dot: true,\n        })\n\n        return (pathname: string) => {\n          if (path.isAbsolute(pathname) && !pathname.startsWith(root)) {\n            return true\n          }\n\n          return isMatch(pathname)\n        }\n      }\n\n      const sharedIgnores = [\n        '**/next/dist/compiled/next-server/**/*.dev.js',\n        ...(isStandalone ? [] : ['**/next/dist/compiled/jest-worker/**/*']),\n        '**/next/dist/compiled/webpack/(bundle4|bundle5).js',\n        '**/node_modules/webpack5/**/*',\n        '**/next/dist/server/lib/route-resolver*',\n        'next/dist/compiled/semver/semver/**/*.js',\n\n        ...(ciEnvironment.hasNextSupport\n          ? [\n              // only ignore image-optimizer code when\n              // this is being handled outside of next-server\n              '**/next/dist/server/image-optimizer.js',\n            ]\n          : []),\n\n        ...(!hasSsrAmpPages\n          ? ['**/next/dist/compiled/@ampproject/toolbox-optimizer/**/*']\n          : []),\n\n        ...(isStandalone ? [] : TRACE_IGNORES),\n        ...additionalIgnores,\n        ...(config.experimental.outputFileTracingIgnores || []),\n      ]\n\n      const sharedIgnoresFn = makeIgnoreFn(sharedIgnores)\n\n      const serverIgnores = [\n        ...sharedIgnores,\n        '**/node_modules/react{,-dom,-dom-server-turbopack}/**/*.development.js',\n        '**/*.d.ts',\n        '**/*.map',\n        '**/next/dist/pages/**/*',\n        ...(ciEnvironment.hasNextSupport\n          ? ['**/node_modules/sharp/**/*', '**/@img/sharp-libvips*/**/*']\n          : []),\n      ].filter(nonNullable)\n      const serverIgnoreFn = makeIgnoreFn(serverIgnores)\n\n      const minimalServerIgnores = [\n        ...serverIgnores,\n        '**/next/dist/compiled/edge-runtime/**/*',\n        '**/next/dist/server/web/sandbox/**/*',\n        '**/next/dist/server/post-process.js',\n      ]\n      const minimalServerIgnoreFn = makeIgnoreFn(minimalServerIgnores)\n\n      const routesIgnores = [\n        ...sharedIgnores,\n        // server chunks are provided via next-trace-entrypoints-plugin plugin\n        // as otherwise all chunks are traced here and included for all pages\n        // whether they are needed or not\n        '**/.next/server/chunks/**',\n        '**/next/dist/server/optimize-amp.js',\n        '**/next/dist/server/post-process.js',\n      ].filter(nonNullable)\n\n      const routeIgnoreFn = makeIgnoreFn(routesIgnores)\n\n      const traceContext = path.join(nextServerEntry, '..', '..')\n      const serverTracedFiles = new Set<string>()\n      const minimalServerTracedFiles = new Set<string>()\n\n      function addToTracedFiles(base: string, file: string, dest: Set<string>) {\n        dest.add(\n          path.relative(distDir, path.join(base, file)).replace(/\\\\/g, '/')\n        )\n      }\n\n      if (isStandalone) {\n        addToTracedFiles(\n          '',\n          require.resolve('next/dist/compiled/jest-worker/processChild'),\n          serverTracedFiles\n        )\n        addToTracedFiles(\n          '',\n          require.resolve('next/dist/compiled/jest-worker/threadChild'),\n          serverTracedFiles\n        )\n      }\n\n      if (config.experimental.turbotrace) {\n        await runTurbotrace()\n\n        const startTrace = bindings.turbo.startTrace\n        const makeTrace = async (entries: string[]) =>\n          startTrace(\n            {\n              action: 'print',\n              input: entries,\n              contextDirectory: traceContext,\n              logLevel: config.experimental.turbotrace?.logLevel,\n              processCwd: config.experimental.turbotrace?.processCwd,\n              logDetail: config.experimental.turbotrace?.logDetail,\n              showAll: config.experimental.turbotrace?.logAll,\n            },\n            turboTasksForTrace\n          )\n\n        // turbotrace does not handle concurrent tracing\n        const vanillaFiles = await makeTrace(serverEntries)\n        const minimalFiles = await makeTrace(minimalServerEntries)\n\n        for (const [set, files] of [\n          [serverTracedFiles, vanillaFiles],\n          [minimalServerTracedFiles, minimalFiles],\n        ] as [Set<string>, string[]][]) {\n          for (const file of files) {\n            if (\n              !(\n                set === minimalServerTracedFiles\n                  ? minimalServerIgnoreFn\n                  : serverIgnoreFn\n              )(path.join(traceContext, file))\n            ) {\n              addToTracedFiles(traceContext, file, set)\n            }\n          }\n        }\n      } else {\n        const chunksToTrace: string[] = [\n          ...(buildTraceContext?.chunksTrace?.action.input || []),\n          ...serverEntries,\n          ...minimalServerEntries,\n        ]\n        const result = await nodeFileTrace(chunksToTrace, {\n          base: outputFileTracingRoot,\n          processCwd: dir,\n          mixedModules: true,\n          async readFile(p) {\n            try {\n              return await fs.readFile(p, 'utf8')\n            } catch (e) {\n              if (isError(e) && (e.code === 'ENOENT' || e.code === 'EISDIR')) {\n                // since tracing runs in parallel with static generation server\n                // files might be removed from that step so tolerate ENOENT\n                // errors gracefully\n                return ''\n              }\n              throw e\n            }\n          },\n          async readlink(p) {\n            try {\n              return await fs.readlink(p)\n            } catch (e) {\n              if (\n                isError(e) &&\n                (e.code === 'EINVAL' ||\n                  e.code === 'ENOENT' ||\n                  e.code === 'UNKNOWN')\n              ) {\n                return null\n              }\n              throw e\n            }\n          },\n          async stat(p) {\n            try {\n              return await fs.stat(p)\n            } catch (e) {\n              if (isError(e) && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) {\n                return null\n              }\n              throw e\n            }\n          },\n          // handle shared ignores at top-level as it\n          // avoids over-tracing when we don't need to\n          // and speeds up total trace time\n          ignore(p) {\n            if (sharedIgnoresFn(p)) {\n              return true\n            }\n\n            // if a chunk is attempting to be traced that isn't\n            // in our initial list we need to ignore it to prevent\n            // over tracing as webpack needs to be the source of\n            // truth for which chunks should be included for each entry\n            if (\n              p.includes('.next/server/chunks') &&\n              !chunksToTrace.includes(path.join(outputFileTracingRoot, p))\n            ) {\n              return true\n            }\n            return false\n          },\n        })\n        const reasons = result.reasons\n        const fileList = result.fileList\n        for (const file of result.esmFileList) {\n          fileList.add(file)\n        }\n\n        const parentFilesMap = getFilesMapFromReasons(fileList, reasons)\n        const cachedLookupIgnore = new Map<string, boolean>()\n        const cachedLookupIgnoreMinimal = new Map<string, boolean>()\n\n        for (const [entries, tracedFiles] of [\n          [serverEntries, serverTracedFiles],\n          [minimalServerEntries, minimalServerTracedFiles],\n        ] as Array<[string[], Set<string>]>) {\n          for (const file of entries) {\n            const curFiles = [\n              ...(parentFilesMap\n                .get(path.relative(outputFileTracingRoot, file))\n                ?.keys() || []),\n            ]\n            tracedFiles.add(path.relative(distDir, file).replace(/\\\\/g, '/'))\n\n            for (const curFile of curFiles || []) {\n              const filePath = path.join(outputFileTracingRoot, curFile)\n\n              if (\n                !shouldIgnore(\n                  curFile,\n                  tracedFiles === minimalServerTracedFiles\n                    ? minimalServerIgnoreFn\n                    : serverIgnoreFn,\n                  reasons,\n                  tracedFiles === minimalServerTracedFiles\n                    ? cachedLookupIgnoreMinimal\n                    : cachedLookupIgnore\n                )\n              ) {\n                tracedFiles.add(\n                  path.relative(distDir, filePath).replace(/\\\\/g, '/')\n                )\n              }\n            }\n          }\n        }\n\n        const { entryNameFilesMap } = buildTraceContext?.chunksTrace || {}\n\n        const cachedLookupIgnoreRoutes = new Map<string, boolean>()\n\n        await Promise.all(\n          [\n            ...(entryNameFilesMap\n              ? Object.entries(entryNameFilesMap)\n              : new Map()),\n          ].map(async ([entryName, entryNameFiles]) => {\n            const isApp = entryName.startsWith('app/')\n            const isPages = entryName.startsWith('pages/')\n            let route = entryName\n            if (isApp) {\n              route = normalizeAppPath(route.substring('app'.length))\n            }\n            if (isPages) {\n              route = normalizePagePath(route.substring('pages'.length))\n            }\n\n            // we don't need to trace for automatically statically optimized\n            // pages as they don't have server bundles, note there is\n            // the caveat with flying shuttle mode as it needs this for\n            // detecting changed entries\n            if (staticPages.includes(route) && !isFlyingShuttle) {\n              return\n            }\n            const entryOutputPath = path.join(\n              distDir,\n              'server',\n              `${entryName}.js`\n            )\n            const traceOutputPath = `${entryOutputPath}.nft.json`\n            const existingTrace = JSON.parse(\n              await fs.readFile(traceOutputPath, 'utf8')\n            ) as {\n              version: number\n              files: string[]\n              fileHashes: Record<string, string>\n            }\n            const traceOutputDir = path.dirname(traceOutputPath)\n            const curTracedFiles = new Set<string>()\n            const curFileHashes: Record<string, string> =\n              existingTrace.fileHashes\n\n            for (const file of [...entryNameFiles, entryOutputPath]) {\n              const curFiles = [\n                ...(parentFilesMap\n                  .get(path.relative(outputFileTracingRoot, file))\n                  ?.keys() || []),\n              ]\n              for (const curFile of curFiles || []) {\n                if (\n                  !shouldIgnore(\n                    curFile,\n                    routeIgnoreFn,\n                    reasons,\n                    cachedLookupIgnoreRoutes\n                  )\n                ) {\n                  const filePath = path.join(outputFileTracingRoot, curFile)\n                  const outputFile = path\n                    .relative(traceOutputDir, filePath)\n                    .replace(/\\\\/g, '/')\n                  curTracedFiles.add(outputFile)\n\n                  if (isFlyingShuttle) {\n                    try {\n                      let hash = hashCache[filePath]\n\n                      if (!hash) {\n                        hash = getHash(await fs.readFile(filePath))\n                      }\n                      curFileHashes[outputFile] = hash\n                    } catch (err: any) {\n                      // handle symlink errors or similar\n                    }\n                  }\n                }\n              }\n            }\n\n            for (const file of existingTrace.files || []) {\n              curTracedFiles.add(file)\n            }\n\n            await fs.writeFile(\n              traceOutputPath,\n              JSON.stringify({\n                ...existingTrace,\n                files: [...curTracedFiles].sort(),\n                ...(isFlyingShuttle\n                  ? {\n                      fileHashes: curFileHashes,\n                    }\n                  : {}),\n              })\n            )\n          })\n        )\n      }\n\n      const moduleTypes = ['app-page', 'pages']\n\n      for (const type of moduleTypes) {\n        const modulePath = require.resolve(\n          `next/dist/server/route-modules/${type}/module.compiled`\n        )\n        const relativeModulePath = path.relative(root, modulePath)\n\n        const contextDir = path.join(\n          path.dirname(modulePath),\n          'vendored',\n          'contexts'\n        )\n\n        for (const item of await fs.readdir(contextDir)) {\n          const itemPath = path.relative(root, path.join(contextDir, item))\n          if (!serverIgnoreFn(itemPath)) {\n            addToTracedFiles(root, itemPath, serverTracedFiles)\n            addToTracedFiles(root, itemPath, minimalServerTracedFiles)\n          }\n        }\n        addToTracedFiles(root, relativeModulePath, serverTracedFiles)\n        addToTracedFiles(root, relativeModulePath, minimalServerTracedFiles)\n      }\n\n      await Promise.all([\n        fs.writeFile(\n          nextServerTraceOutput,\n          JSON.stringify({\n            version: 1,\n            files: Array.from(serverTracedFiles),\n          } as {\n            version: number\n            files: string[]\n          })\n        ),\n        fs.writeFile(\n          nextMinimalTraceOutput,\n          JSON.stringify({\n            version: 1,\n            files: Array.from(minimalServerTracedFiles),\n          } as {\n            version: number\n            files: string[]\n          })\n        ),\n      ])\n    })\n\n  // apply outputFileTracingIncludes/outputFileTracingExcludes after runTurbotrace\n  const includeExcludeSpan = nextBuildSpan.traceChild('apply-include-excludes')\n  await includeExcludeSpan.traceAsyncFn(async () => {\n    const globOrig =\n      require('next/dist/compiled/glob') as typeof import('next/dist/compiled/glob')\n    const glob = (pattern: string): Promise<string[]> => {\n      return new Promise((resolve, reject) => {\n        globOrig(\n          pattern,\n          { cwd: dir, nodir: true, dot: true },\n          (err, files) => {\n            if (err) {\n              return reject(err)\n            }\n            resolve(files)\n          }\n        )\n      })\n    }\n\n    const { entryNameFilesMap } = buildTraceContext?.chunksTrace || {}\n\n    await Promise.all(\n      [\n        ...(entryNameFilesMap ? Object.entries(entryNameFilesMap) : new Map()),\n      ].map(async ([entryName]) => {\n        const isApp = entryName.startsWith('app/')\n        const isPages = entryName.startsWith('pages/')\n        let route = entryName\n        if (isApp) {\n          route = normalizeAppPath(entryName)\n        }\n        if (isPages) {\n          route = normalizePagePath(entryName)\n        }\n\n        if (staticPages.includes(route)) {\n          return\n        }\n\n        // edge routes have no trace files\n        if (edgeRuntimeRoutes.hasOwnProperty(route)) {\n          return\n        }\n\n        const combinedIncludes = new Set<string>()\n        const combinedExcludes = new Set<string>()\n        for (const curGlob of includeGlobKeys) {\n          const isMatch = picomatch(curGlob, { dot: true, contains: true })\n          if (isMatch(route)) {\n            for (const include of outputFileTracingIncludes[curGlob]) {\n              combinedIncludes.add(include.replace(/\\\\/g, '/'))\n            }\n          }\n        }\n\n        for (const curGlob of excludeGlobKeys) {\n          const isMatch = picomatch(curGlob, { dot: true, contains: true })\n          if (isMatch(route)) {\n            for (const exclude of outputFileTracingExcludes[curGlob]) {\n              combinedExcludes.add(exclude)\n            }\n          }\n        }\n\n        if (!combinedIncludes?.size && !combinedExcludes?.size) {\n          return\n        }\n\n        const traceFile = path.join(\n          distDir,\n          `server`,\n          `${entryName}.js.nft.json`\n        )\n        const pageDir = path.dirname(traceFile)\n        const traceContent = JSON.parse(await fs.readFile(traceFile, 'utf8'))\n        const includes: string[] = []\n        const resolvedTraceIncludes = new Map<string, string[]>()\n\n        if (combinedIncludes?.size) {\n          await Promise.all(\n            [...combinedIncludes].map(async (includeGlob) => {\n              const results = await glob(includeGlob)\n              const resolvedInclude = resolvedTraceIncludes.get(\n                includeGlob\n              ) || [\n                ...results.map((file) => {\n                  return path.relative(pageDir, path.join(dir, file))\n                }),\n              ]\n              includes.push(...resolvedInclude)\n              resolvedTraceIncludes.set(includeGlob, resolvedInclude)\n            })\n          )\n        }\n        const combined = new Set([...traceContent.files, ...includes])\n\n        if (combinedExcludes?.size) {\n          const resolvedGlobs = [...combinedExcludes].map((exclude) =>\n            path.join(dir, exclude)\n          )\n\n          // pre compile before forEach\n          const isMatch = picomatch(resolvedGlobs, {\n            dot: true,\n            contains: true,\n          })\n\n          combined.forEach((file) => {\n            if (isMatch(path.join(pageDir, file))) {\n              combined.delete(file)\n            }\n          })\n        }\n\n        // overwrite trace file with custom includes/excludes\n        await fs.writeFile(\n          traceFile,\n          JSON.stringify({\n            version: traceContent.version,\n            files: [...combined],\n          })\n        )\n      })\n    )\n  })\n\n  debug(`finished build tracing ${Date.now() - startTime}ms`)\n}\n"],"names":["collectBuildTraces","debug","debugOriginal","hashCache","shouldIgnore","file","serverIgnoreFn","reasons","cachedIgnoreFiles","children","Set","has","get","set","add","reason","parents","size","type","includes","allParentsIgnored","parent","values","dir","config","distDir","edgeRuntimeRoutes","staticPages","nextBuildSpan","Span","name","hasSsrAmpPages","buildTraceContext","outputFileTracingRoot","isFlyingShuttle","startTime","Date","now","turboTasksForTrace","bindings","loadBindings","runTurbotrace","experimental","turbotrace","isWasm","turbo","startTrace","turbotraceOutputPath","turbotraceFiles","createTurboTasks","memoryLimit","TURBO_TRACE_DEFAULT_MEMORY_LIMIT","entriesTrace","chunksTrace","appDir","buildTraceContextAppDir","depModArray","entryNameMap","outputPath","action","depModSet","filesTracedInEntries","contextDirectory","input","entriesToTrace","filesTracedFromEntries","map","f","path","join","filter","startsWith","length","entryName","Array","from","Object","entries","k","traceOutputPath","traceOutputDir","dirname","relative","outputPagesPath","substring","existedNftFile","fs","readFile","then","existedContent","JSON","parse","catch","version","TRACE_OUTPUT_VERSION","files","push","filesSet","writeFile","stringify","outputFileTracingIncludes","outputFileTracingExcludes","excludeGlobKeys","keys","includeGlobKeys","traceChild","isTurbotrace","Boolean","traceAsyncFn","nextServerTraceOutput","nextMinimalTraceOutput","root","isStandalone","output","nextServerEntry","require","resolve","sharedEntriesSet","defaultOverrides","value","paths","cacheHandler","isAbsolute","serverEntries","minimalServerEntries","additionalIgnores","glob","picomatch","forEach","exclude","makeIgnoreFn","ignores","isMatch","contains","dot","pathname","sharedIgnores","ciEnvironment","hasNextSupport","TRACE_IGNORES","outputFileTracingIgnores","sharedIgnoresFn","serverIgnores","nonNullable","minimalServerIgnores","minimalServerIgnoreFn","routesIgnores","routeIgnoreFn","traceContext","serverTracedFiles","minimalServerTracedFiles","addToTracedFiles","base","dest","replace","makeTrace","logLevel","processCwd","logDetail","showAll","logAll","vanillaFiles","minimalFiles","chunksToTrace","result","nodeFileTrace","mixedModules","p","e","isError","code","readlink","stat","ignore","fileList","esmFileList","parentFilesMap","getFilesMapFromReasons","cachedLookupIgnore","Map","cachedLookupIgnoreMinimal","tracedFiles","curFiles","curFile","filePath","entryNameFilesMap","cachedLookupIgnoreRoutes","Promise","all","entryNameFiles","isApp","isPages","route","normalizeAppPath","normalizePagePath","entryOutputPath","existingTrace","curTracedFiles","curFileHashes","fileHashes","outputFile","hash","getHash","err","sort","moduleTypes","modulePath","relativeModulePath","contextDir","item","readdir","itemPath","includeExcludeSpan","globOrig","pattern","reject","cwd","nodir","hasOwnProperty","combinedIncludes","combinedExcludes","curGlob","include","traceFile","pageDir","traceContent","resolvedTraceIncludes","includeGlob","results","resolvedInclude","combined","resolvedGlobs","delete"],"mappings":"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"}