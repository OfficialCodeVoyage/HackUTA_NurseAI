{"version":3,"sources":["../../../src/lib/metadata/get-metadata-route.ts"],"sourcesContent":["import { isMetadataRoute } from './is-metadata-route'\nimport path from '../../shared/lib/isomorphic/path'\nimport { interpolateDynamicPath } from '../../server/server-utils'\nimport { getNamedRouteRegex } from '../../shared/lib/router/utils/route-regex'\nimport { djb2Hash } from '../../shared/lib/hash'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport { normalizePathSep } from '../../shared/lib/page-path/normalize-path-sep'\n\n/*\n * If there's special convention like (...) or @ in the page path,\n * Give it a unique hash suffix to avoid conflicts\n *\n * e.g.\n * /app/opengraph-image.tsx -> /opengraph-image\n * /app/(post)/opengraph-image.tsx -> /opengraph-image-[0-9a-z]{6}\n */\nfunction getMetadataRouteSuffix(page: string) {\n  let suffix = ''\n\n  if ((page.includes('(') && page.includes(')')) || page.includes('@')) {\n    suffix = djb2Hash(page).toString(36).slice(0, 6)\n  }\n  return suffix\n}\n\n/**\n * Fill the dynamic segment in the metadata route\n *\n * Example:\n * fillMetadataSegment('/a/[slug]', { params: { slug: 'b' } }, 'open-graph') -> '/a/b/open-graph'\n *\n */\nexport function fillMetadataSegment(\n  segment: string,\n  params: any,\n  imageSegment: string\n) {\n  const pathname = normalizeAppPath(segment)\n  const routeRegex = getNamedRouteRegex(pathname, false)\n  const route = interpolateDynamicPath(pathname, params, routeRegex)\n  const suffix = getMetadataRouteSuffix(segment)\n  const routeSuffix = suffix ? `-${suffix}` : ''\n\n  const { name, ext } = path.parse(imageSegment)\n\n  return normalizePathSep(path.join(route, `${name}${routeSuffix}${ext}`))\n}\n\n/**\n * Map metadata page key to the corresponding route\n *\n * static file page key:    /app/robots.txt -> /robots.xml -> /robots.txt/route\n * dynamic route page key:  /app/robots.tsx -> /robots -> /robots.txt/route\n *\n * @param page\n * @returns\n */\nexport function normalizeMetadataRoute(page: string) {\n  if (!isMetadataRoute(page)) {\n    return page\n  }\n  let route = page\n  let suffix = ''\n  if (page === '/robots') {\n    route += '.txt'\n  } else if (page === '/manifest') {\n    route += '.webmanifest'\n  } else {\n    // Remove the file extension,\n    // e.g. /path/robots.txt -> /route-path\n    // e.g. /path/opengraph-image.tsx -> /path/opengraph-image\n    const pathnamePrefix = page.slice(0, -(path.basename(page).length + 1))\n    suffix = getMetadataRouteSuffix(pathnamePrefix)\n  }\n  // Support both /<metadata-route.ext> and custom routes /<metadata-route>/route.ts.\n  // If it's a metadata file route, we need to append /[id]/route to the page.\n  if (!route.endsWith('/route')) {\n    const { dir, name: baseName, ext } = path.parse(route)\n    route = path.posix.join(\n      dir,\n      `${baseName}${suffix ? `-${suffix}` : ''}${ext}`,\n      'route'\n    )\n  }\n\n  return route\n}\n\n// Normalize metadata route page to either a single route or a dynamic route.\n// e.g. Input: /sitemap/route\n// when isDynamic is false, single route -> /sitemap.xml/route\n// when isDynamic is false, dynamic route -> /sitemap/[__metadata_id__]/route\n// also works for pathname such as /sitemap -> /sitemap.xml, but will not append /route suffix\nexport function normalizeMetadataPageToRoute(page: string, isDynamic: boolean) {\n  const isRoute = page.endsWith('/route')\n  const routePagePath = isRoute ? page.slice(0, -'/route'.length) : page\n  const metadataRouteExtension = routePagePath.endsWith('/sitemap')\n    ? '.xml'\n    : ''\n  const mapped = isDynamic\n    ? `${routePagePath}/[__metadata_id__]`\n    : `${routePagePath}${metadataRouteExtension}`\n\n  return mapped + (isRoute ? '/route' : '')\n}\n"],"names":["isMetadataRoute","path","interpolateDynamicPath","getNamedRouteRegex","djb2Hash","normalizeAppPath","normalizePathSep","getMetadataRouteSuffix","page","suffix","includes","toString","slice","fillMetadataSegment","segment","params","imageSegment","pathname","routeRegex","route","routeSuffix","name","ext","parse","join","normalizeMetadataRoute","pathnamePrefix","basename","length","endsWith","dir","baseName","posix","normalizeMetadataPageToRoute","isDynamic","isRoute","routePagePath","metadataRouteExtension","mapped"],"mappings":"AAAA,SAASA,eAAe,QAAQ,sBAAqB;AACrD,OAAOC,UAAU,mCAAkC;AACnD,SAASC,sBAAsB,QAAQ,4BAA2B;AAClE,SAASC,kBAAkB,QAAQ,4CAA2C;AAC9E,SAASC,QAAQ,QAAQ,wBAAuB;AAChD,SAASC,gBAAgB,QAAQ,0CAAyC;AAC1E,SAASC,gBAAgB,QAAQ,gDAA+C;AAEhF;;;;;;;CAOC,GACD,SAASC,uBAAuBC,IAAY;IAC1C,IAAIC,SAAS;IAEb,IAAI,AAACD,KAAKE,QAAQ,CAAC,QAAQF,KAAKE,QAAQ,CAAC,QAASF,KAAKE,QAAQ,CAAC,MAAM;QACpED,SAASL,SAASI,MAAMG,QAAQ,CAAC,IAAIC,KAAK,CAAC,GAAG;IAChD;IACA,OAAOH;AACT;AAEA;;;;;;CAMC,GACD,OAAO,SAASI,oBACdC,OAAe,EACfC,MAAW,EACXC,YAAoB;IAEpB,MAAMC,WAAWZ,iBAAiBS;IAClC,MAAMI,aAAaf,mBAAmBc,UAAU;IAChD,MAAME,QAAQjB,uBAAuBe,UAAUF,QAAQG;IACvD,MAAMT,SAASF,uBAAuBO;IACtC,MAAMM,cAAcX,SAAS,CAAC,CAAC,EAAEA,OAAO,CAAC,GAAG;IAE5C,MAAM,EAAEY,IAAI,EAAEC,GAAG,EAAE,GAAGrB,KAAKsB,KAAK,CAACP;IAEjC,OAAOV,iBAAiBL,KAAKuB,IAAI,CAACL,OAAO,CAAC,EAAEE,KAAK,EAAED,YAAY,EAAEE,IAAI,CAAC;AACxE;AAEA;;;;;;;;CAQC,GACD,OAAO,SAASG,uBAAuBjB,IAAY;IACjD,IAAI,CAACR,gBAAgBQ,OAAO;QAC1B,OAAOA;IACT;IACA,IAAIW,QAAQX;IACZ,IAAIC,SAAS;IACb,IAAID,SAAS,WAAW;QACtBW,SAAS;IACX,OAAO,IAAIX,SAAS,aAAa;QAC/BW,SAAS;IACX,OAAO;QACL,6BAA6B;QAC7B,uCAAuC;QACvC,0DAA0D;QAC1D,MAAMO,iBAAiBlB,KAAKI,KAAK,CAAC,GAAG,CAAEX,CAAAA,KAAK0B,QAAQ,CAACnB,MAAMoB,MAAM,GAAG,CAAA;QACpEnB,SAASF,uBAAuBmB;IAClC;IACA,mFAAmF;IACnF,4EAA4E;IAC5E,IAAI,CAACP,MAAMU,QAAQ,CAAC,WAAW;QAC7B,MAAM,EAAEC,GAAG,EAAET,MAAMU,QAAQ,EAAET,GAAG,EAAE,GAAGrB,KAAKsB,KAAK,CAACJ;QAChDA,QAAQlB,KAAK+B,KAAK,CAACR,IAAI,CACrBM,KACA,CAAC,EAAEC,SAAS,EAAEtB,SAAS,CAAC,CAAC,EAAEA,OAAO,CAAC,GAAG,GAAG,EAAEa,IAAI,CAAC,EAChD;IAEJ;IAEA,OAAOH;AACT;AAEA,6EAA6E;AAC7E,6BAA6B;AAC7B,8DAA8D;AAC9D,6EAA6E;AAC7E,8FAA8F;AAC9F,OAAO,SAASc,6BAA6BzB,IAAY,EAAE0B,SAAkB;IAC3E,MAAMC,UAAU3B,KAAKqB,QAAQ,CAAC;IAC9B,MAAMO,gBAAgBD,UAAU3B,KAAKI,KAAK,CAAC,GAAG,CAAC,SAASgB,MAAM,IAAIpB;IAClE,MAAM6B,yBAAyBD,cAAcP,QAAQ,CAAC,cAClD,SACA;IACJ,MAAMS,SAASJ,YACX,CAAC,EAAEE,cAAc,kBAAkB,CAAC,GACpC,CAAC,EAAEA,cAAc,EAAEC,uBAAuB,CAAC;IAE/C,OAAOC,SAAUH,CAAAA,UAAU,WAAW,EAAC;AACzC"}