{"version":3,"sources":["../../../../src/lib/metadata/resolvers/resolve-opengraph.ts"],"sourcesContent":["import type { ResolvedMetadata } from '../types/metadata-interface'\nimport type {\n  OpenGraphType,\n  OpenGraph,\n  ResolvedOpenGraph,\n} from '../types/opengraph-types'\nimport type {\n  FieldResolverExtraArgs,\n  MetadataContext,\n} from '../types/resolvers'\nimport type { ResolvedTwitterMetadata, Twitter } from '../types/twitter-types'\nimport { resolveAsArrayOrUndefined } from '../generate/utils'\nimport {\n  getSocialImageFallbackMetadataBase,\n  isStringOrURL,\n  resolveUrl,\n  resolveAbsoluteUrlWithPathname,\n} from './resolve-url'\nimport { resolveTitle } from './resolve-title'\nimport { isFullStringUrl } from '../../url'\nimport { warnOnce } from '../../../build/output/log'\n\ntype FlattenArray<T> = T extends (infer U)[] ? U : T\ntype ResolvedMetadataBase = ResolvedMetadata['metadataBase']\n\nconst OgTypeFields = {\n  article: ['authors', 'tags'],\n  song: ['albums', 'musicians'],\n  playlist: ['albums', 'musicians'],\n  radio: ['creators'],\n  video: ['actors', 'directors', 'writers', 'tags'],\n  basic: [\n    'emails',\n    'phoneNumbers',\n    'faxNumbers',\n    'alternateLocale',\n    'audio',\n    'videos',\n  ],\n} as const\n\nfunction resolveAndValidateImage(\n  item: FlattenArray<OpenGraph['images'] | Twitter['images']>,\n  metadataBase: NonNullable<ResolvedMetadataBase>,\n  isMetadataBaseMissing: boolean,\n  isStandaloneMode: boolean\n) {\n  if (!item) return undefined\n  const isItemUrl = isStringOrURL(item)\n  const inputUrl = isItemUrl ? item : item.url\n  if (!inputUrl) return undefined\n\n  const isNonVercelDeployment =\n    !process.env.VERCEL && process.env.NODE_ENV === 'production'\n  // Validate url in self-host standalone mode or non-Vercel deployment\n  if (isStandaloneMode || isNonVercelDeployment) {\n    validateResolvedImageUrl(inputUrl, metadataBase, isMetadataBaseMissing)\n  }\n\n  return isItemUrl\n    ? {\n        url: resolveUrl(inputUrl, metadataBase),\n      }\n    : {\n        ...item,\n        // Update image descriptor url\n        url: resolveUrl(inputUrl, metadataBase),\n      }\n}\n\nexport function resolveImages(\n  images: Twitter['images'],\n  metadataBase: ResolvedMetadataBase,\n  isStandaloneMode: boolean\n): NonNullable<ResolvedMetadata['twitter']>['images']\nexport function resolveImages(\n  images: OpenGraph['images'],\n  metadataBase: ResolvedMetadataBase,\n  isStandaloneMode: boolean\n): NonNullable<ResolvedMetadata['openGraph']>['images']\nexport function resolveImages(\n  images: OpenGraph['images'] | Twitter['images'],\n  metadataBase: ResolvedMetadataBase,\n  isStandaloneMode: boolean\n):\n  | NonNullable<ResolvedMetadata['twitter']>['images']\n  | NonNullable<ResolvedMetadata['openGraph']>['images'] {\n  const resolvedImages = resolveAsArrayOrUndefined(images)\n  if (!resolvedImages) return resolvedImages\n\n  const { isMetadataBaseMissing, fallbackMetadataBase } =\n    getSocialImageFallbackMetadataBase(metadataBase)\n  const nonNullableImages = []\n  for (const item of resolvedImages) {\n    const resolvedItem = resolveAndValidateImage(\n      item,\n      fallbackMetadataBase,\n      isMetadataBaseMissing,\n      isStandaloneMode\n    )\n    if (!resolvedItem) continue\n\n    nonNullableImages.push(resolvedItem)\n  }\n\n  return nonNullableImages\n}\n\nconst ogTypeToFields: Record<string, readonly string[]> = {\n  article: OgTypeFields.article,\n  book: OgTypeFields.article,\n  'music.song': OgTypeFields.song,\n  'music.album': OgTypeFields.song,\n  'music.playlist': OgTypeFields.playlist,\n  'music.radio_station': OgTypeFields.radio,\n  'video.movie': OgTypeFields.video,\n  'video.episode': OgTypeFields.video,\n}\n\nfunction getFieldsByOgType(ogType: OpenGraphType | undefined) {\n  if (!ogType || !(ogType in ogTypeToFields)) return OgTypeFields.basic\n  return ogTypeToFields[ogType].concat(OgTypeFields.basic)\n}\n\nfunction validateResolvedImageUrl(\n  inputUrl: string | URL,\n  fallbackMetadataBase: NonNullable<ResolvedMetadataBase>,\n  isMetadataBaseMissing: boolean\n): void {\n  // Only warn on the image url that needs to be resolved with metadataBase\n  if (\n    typeof inputUrl === 'string' &&\n    !isFullStringUrl(inputUrl) &&\n    isMetadataBaseMissing\n  ) {\n    warnOnce(\n      `metadataBase property in metadata export is not set for resolving social open graph or twitter images, using \"${fallbackMetadataBase.origin}\". See https://nextjs.org/docs/app/api-reference/functions/generate-metadata#metadatabase`\n    )\n  }\n}\n\nexport const resolveOpenGraph: FieldResolverExtraArgs<\n  'openGraph',\n  [ResolvedMetadataBase, MetadataContext, string | null]\n> = (openGraph, metadataBase, metadataContext, titleTemplate) => {\n  if (!openGraph) return null\n\n  function resolveProps(target: ResolvedOpenGraph, og: OpenGraph) {\n    const ogType = og && 'type' in og ? og.type : undefined\n    const keys = getFieldsByOgType(ogType)\n    for (const k of keys) {\n      const key = k as keyof ResolvedOpenGraph\n      if (key in og && key !== 'url') {\n        const value = og[key]\n        if (value) {\n          const arrayValue = resolveAsArrayOrUndefined(value)\n          /// TODO: improve typing inferring\n          ;(target as any)[key] = arrayValue\n        }\n      }\n    }\n    target.images = resolveImages(\n      og.images,\n      metadataBase,\n      metadataContext.isStandaloneMode\n    )\n  }\n\n  const resolved = {\n    ...openGraph,\n    title: resolveTitle(openGraph.title, titleTemplate),\n  } as ResolvedOpenGraph\n  resolveProps(resolved, openGraph)\n\n  resolved.url = openGraph.url\n    ? resolveAbsoluteUrlWithPathname(\n        openGraph.url,\n        metadataBase,\n        metadataContext\n      )\n    : null\n\n  return resolved\n}\n\nconst TwitterBasicInfoKeys = [\n  'site',\n  'siteId',\n  'creator',\n  'creatorId',\n  'description',\n] as const\n\nexport const resolveTwitter: FieldResolverExtraArgs<\n  'twitter',\n  [ResolvedMetadataBase, MetadataContext, string | null]\n> = (twitter, metadataBase, metadataContext, titleTemplate) => {\n  if (!twitter) return null\n  let card = 'card' in twitter ? twitter.card : undefined\n  const resolved = {\n    ...twitter,\n    title: resolveTitle(twitter.title, titleTemplate),\n  } as ResolvedTwitterMetadata\n  for (const infoKey of TwitterBasicInfoKeys) {\n    resolved[infoKey] = twitter[infoKey] || null\n  }\n\n  resolved.images = resolveImages(\n    twitter.images,\n    metadataBase,\n    metadataContext.isStandaloneMode\n  )\n\n  card = card || (resolved.images?.length ? 'summary_large_image' : 'summary')\n  resolved.card = card\n\n  if ('card' in resolved) {\n    switch (resolved.card) {\n      case 'player': {\n        resolved.players = resolveAsArrayOrUndefined(resolved.players) || []\n        break\n      }\n      case 'app': {\n        resolved.app = resolved.app || {}\n        break\n      }\n      default:\n        break\n    }\n  }\n\n  return resolved\n}\n"],"names":["resolveAsArrayOrUndefined","getSocialImageFallbackMetadataBase","isStringOrURL","resolveUrl","resolveAbsoluteUrlWithPathname","resolveTitle","isFullStringUrl","warnOnce","OgTypeFields","article","song","playlist","radio","video","basic","resolveAndValidateImage","item","metadataBase","isMetadataBaseMissing","isStandaloneMode","undefined","isItemUrl","inputUrl","url","isNonVercelDeployment","process","env","VERCEL","NODE_ENV","validateResolvedImageUrl","resolveImages","images","resolvedImages","fallbackMetadataBase","nonNullableImages","resolvedItem","push","ogTypeToFields","book","getFieldsByOgType","ogType","concat","origin","resolveOpenGraph","openGraph","metadataContext","titleTemplate","resolveProps","target","og","type","keys","k","key","value","arrayValue","resolved","title","TwitterBasicInfoKeys","resolveTwitter","twitter","card","infoKey","length","players","app"],"mappings":"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"}