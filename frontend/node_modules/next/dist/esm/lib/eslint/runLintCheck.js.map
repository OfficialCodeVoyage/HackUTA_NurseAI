{"version":3,"sources":["../../../src/lib/eslint/runLintCheck.ts"],"sourcesContent":["import { promises as fs, existsSync } from 'fs'\nimport { bold, cyan, red, underline, yellow } from '../picocolors'\nimport path from 'path'\n\nimport findUp from 'next/dist/compiled/find-up'\nimport semver from 'next/dist/compiled/semver'\nimport * as CommentJson from 'next/dist/compiled/comment-json'\n\nimport { formatResults } from './customFormatter'\nimport type { LintResult } from './customFormatter'\nimport { writeDefaultConfig } from './writeDefaultConfig'\nimport { hasEslintConfiguration } from './hasEslintConfiguration'\nimport { writeOutputFile } from './writeOutputFile'\n\nimport { findPagesDir } from '../find-pages-dir'\nimport { installDependencies } from '../install-dependencies'\nimport { hasNecessaryDependencies } from '../has-necessary-dependencies'\n\nimport * as Log from '../../build/output/log'\nimport type { EventLintCheckCompleted } from '../../telemetry/events/build'\nimport isError, { getProperError } from '../is-error'\nimport { getPkgManager } from '../helpers/get-pkg-manager'\nimport {\n  getESLintStrictValue,\n  getESLintPromptValues,\n} from './getESLintPromptValues'\n\ntype Config = {\n  plugins: string[]\n  rules: { [key: string]: Array<number | string> }\n}\n\n// 0 is off, 1 is warn, 2 is error. See https://eslint.org/docs/user-guide/configuring/rules#configuring-rules\nconst VALID_SEVERITY = ['off', 'warn', 'error'] as const\ntype Severity = (typeof VALID_SEVERITY)[number]\n\nfunction isValidSeverity(severity: string): severity is Severity {\n  return VALID_SEVERITY.includes(severity as Severity)\n}\n\nconst requiredPackages = [\n  { file: 'eslint', pkg: 'eslint', exportsRestrict: false },\n  {\n    file: 'eslint-config-next',\n    pkg: 'eslint-config-next',\n    exportsRestrict: false,\n  },\n]\n\nasync function cliPrompt(cwd: string): Promise<{ config?: any }> {\n  console.log(\n    bold(\n      `${cyan(\n        '?'\n      )} How would you like to configure ESLint? https://nextjs.org/docs/basic-features/eslint`\n    )\n  )\n\n  try {\n    const cliSelect = (\n      await Promise.resolve(require('next/dist/compiled/cli-select'))\n    ).default\n    const { value } = await cliSelect({\n      values: await getESLintPromptValues(cwd),\n      valueRenderer: (\n        {\n          title,\n          recommended,\n        }: { title: string; recommended?: boolean; config: any },\n        selected: boolean\n      ) => {\n        const name = selected ? bold(underline(cyan(title))) : title\n        return name + (recommended ? bold(yellow(' (recommended)')) : '')\n      },\n      selected: cyan('‚ùØ '),\n      unselected: '  ',\n    })\n\n    return { config: value?.config ?? null }\n  } catch {\n    return { config: null }\n  }\n}\n\nasync function lint(\n  baseDir: string,\n  lintDirs: string[],\n  eslintrcFile: string | null,\n  pkgJsonPath: string | null,\n  {\n    lintDuringBuild = false,\n    eslintOptions = null,\n    reportErrorsOnly = false,\n    maxWarnings = -1,\n    formatter = null,\n    outputFile = null,\n  }: {\n    lintDuringBuild: boolean\n    eslintOptions: any\n    reportErrorsOnly: boolean\n    maxWarnings: number\n    formatter: string | null\n    outputFile: string | null\n  }\n): Promise<\n  | string\n  | null\n  | {\n      output: string | null\n      isError: boolean\n      eventInfo: EventLintCheckCompleted\n    }\n> {\n  try {\n    // Load ESLint after we're sure it exists:\n    const deps = await hasNecessaryDependencies(baseDir, requiredPackages)\n    const packageManager = getPkgManager(baseDir)\n\n    if (deps.missing.some((dep) => dep.pkg === 'eslint')) {\n      Log.error(\n        `ESLint must be installed${\n          lintDuringBuild ? ' in order to run during builds:' : ':'\n        } ${bold(\n          cyan(\n            (packageManager === 'yarn'\n              ? 'yarn add --dev'\n              : packageManager === 'pnpm'\n                ? 'pnpm install --save-dev'\n                : 'npm install --save-dev') + ' eslint'\n          )\n        )}`\n      )\n      return null\n    }\n\n    const mod = await Promise.resolve(require(deps.resolved.get('eslint')!))\n\n    const { ESLint } = mod\n    let eslintVersion = ESLint?.version ?? mod.CLIEngine?.version\n\n    if (!eslintVersion || semver.lt(eslintVersion, '7.0.0')) {\n      return `${red(\n        'error'\n      )} - Your project has an older version of ESLint installed${\n        eslintVersion ? ' (' + eslintVersion + ')' : ''\n      }. Please upgrade to ESLint version 7 or above`\n    }\n\n    let options: any = {\n      useEslintrc: true,\n      baseConfig: {},\n      errorOnUnmatchedPattern: false,\n      extensions: ['.js', '.jsx', '.ts', '.tsx'],\n      cache: true,\n      ...eslintOptions,\n    }\n\n    let eslint = new ESLint(options)\n\n    let nextEslintPluginIsEnabled = false\n    const nextRulesEnabled = new Map<string, Severity>()\n\n    for (const configFile of [eslintrcFile, pkgJsonPath]) {\n      if (!configFile) continue\n\n      const completeConfig: Config =\n        await eslint.calculateConfigForFile(configFile)\n\n      if (completeConfig.plugins?.includes('@next/next')) {\n        nextEslintPluginIsEnabled = true\n        for (const [name, [severity]] of Object.entries(completeConfig.rules)) {\n          if (!name.startsWith('@next/next/')) {\n            continue\n          }\n          if (\n            typeof severity === 'number' &&\n            severity >= 0 &&\n            severity < VALID_SEVERITY.length\n          ) {\n            nextRulesEnabled.set(name, VALID_SEVERITY[severity])\n          } else if (\n            typeof severity === 'string' &&\n            isValidSeverity(severity)\n          ) {\n            nextRulesEnabled.set(name, severity)\n          }\n        }\n        break\n      }\n    }\n\n    const pagesDir = findPagesDir(baseDir).pagesDir\n    const pagesDirRules = pagesDir ? ['@next/next/no-html-link-for-pages'] : []\n\n    if (nextEslintPluginIsEnabled) {\n      let updatedPagesDir = false\n\n      for (const rule of pagesDirRules) {\n        if (\n          !options.baseConfig!.rules?.[rule] &&\n          !options.baseConfig!.rules?.[\n            rule.replace('@next/next', '@next/babel-plugin-next')\n          ]\n        ) {\n          if (!options.baseConfig!.rules) {\n            options.baseConfig!.rules = {}\n          }\n          options.baseConfig!.rules[rule] = [1, pagesDir]\n          updatedPagesDir = true\n        }\n      }\n\n      if (updatedPagesDir) {\n        eslint = new ESLint(options)\n      }\n    } else {\n      Log.warn('')\n      Log.warn(\n        'The Next.js plugin was not detected in your ESLint configuration. See https://nextjs.org/docs/basic-features/eslint#migrating-existing-config'\n      )\n    }\n\n    const lintStart = process.hrtime()\n\n    let results = await eslint.lintFiles(lintDirs)\n    let selectedFormatter = null\n\n    if (options.fix) await ESLint.outputFixes(results)\n    if (reportErrorsOnly) results = await ESLint.getErrorResults(results) // Only return errors if --quiet flag is used\n\n    if (formatter) selectedFormatter = await eslint.loadFormatter(formatter)\n    const formattedResult = formatResults(\n      baseDir,\n      results,\n      selectedFormatter?.format\n    )\n    const lintEnd = process.hrtime(lintStart)\n    const totalWarnings = results.reduce(\n      (sum: number, file: LintResult) => sum + file.warningCount,\n      0\n    )\n\n    if (outputFile) await writeOutputFile(outputFile, formattedResult.output)\n\n    return {\n      output: formattedResult.outputWithMessages,\n      isError:\n        ESLint.getErrorResults(results)?.length > 0 ||\n        (maxWarnings >= 0 && totalWarnings > maxWarnings),\n      eventInfo: {\n        durationInSeconds: lintEnd[0],\n        eslintVersion: eslintVersion,\n        lintedFilesCount: results.length,\n        lintFix: !!options.fix,\n        nextEslintPluginVersion:\n          nextEslintPluginIsEnabled && deps.resolved.has('eslint-config-next')\n            ? require(\n                path.join(\n                  path.dirname(deps.resolved.get('eslint-config-next')!),\n                  'package.json'\n                )\n              ).version\n            : null,\n        nextEslintPluginErrorsCount: formattedResult.totalNextPluginErrorCount,\n        nextEslintPluginWarningsCount:\n          formattedResult.totalNextPluginWarningCount,\n        nextRulesEnabled: Object.fromEntries(nextRulesEnabled),\n      },\n    }\n  } catch (err) {\n    if (lintDuringBuild) {\n      Log.error(\n        `ESLint: ${\n          isError(err) && err.message ? err.message.replace(/\\n/g, ' ') : err\n        }`\n      )\n      return null\n    } else {\n      throw getProperError(err)\n    }\n  }\n}\n\nexport async function runLintCheck(\n  baseDir: string,\n  lintDirs: string[],\n  opts: {\n    lintDuringBuild?: boolean\n    eslintOptions?: any\n    reportErrorsOnly?: boolean\n    maxWarnings?: number\n    formatter?: string | null\n    outputFile?: string | null\n    strict?: boolean\n  }\n): ReturnType<typeof lint> {\n  const {\n    lintDuringBuild = false,\n    eslintOptions = null,\n    reportErrorsOnly = false,\n    maxWarnings = -1,\n    formatter = null,\n    outputFile = null,\n    strict = false,\n  } = opts\n  try {\n    // Find user's .eslintrc file\n    // See: https://eslint.org/docs/user-guide/configuring/configuration-files#configuration-file-formats\n    const eslintrcFile =\n      (await findUp(\n        [\n          '.eslintrc.js',\n          '.eslintrc.cjs',\n          '.eslintrc.yaml',\n          '.eslintrc.yml',\n          '.eslintrc.json',\n          '.eslintrc',\n        ],\n        {\n          cwd: baseDir,\n        }\n      )) ?? null\n\n    const pkgJsonPath = (await findUp('package.json', { cwd: baseDir })) ?? null\n    let packageJsonConfig = null\n    if (pkgJsonPath) {\n      const pkgJsonContent = await fs.readFile(pkgJsonPath, {\n        encoding: 'utf8',\n      })\n      packageJsonConfig = CommentJson.parse(pkgJsonContent)\n    }\n\n    const config = await hasEslintConfiguration(eslintrcFile, packageJsonConfig)\n    let deps\n\n    if (config.exists) {\n      // Run if ESLint config exists\n      return await lint(baseDir, lintDirs, eslintrcFile, pkgJsonPath, {\n        lintDuringBuild,\n        eslintOptions,\n        reportErrorsOnly,\n        maxWarnings,\n        formatter,\n        outputFile,\n      })\n    } else {\n      // Display warning if no ESLint configuration is present inside\n      // config file during \"next build\", no warning is shown when\n      // no eslintrc file is present\n      if (lintDuringBuild) {\n        if (config.emptyPkgJsonConfig || config.emptyEslintrc) {\n          Log.warn(\n            `No ESLint configuration detected. Run ${bold(\n              cyan('next lint')\n            )} to begin setup`\n          )\n        }\n        return null\n      } else {\n        // Ask user what config they would like to start with for first time \"next lint\" setup\n        const { config: selectedConfig } = strict\n          ? await getESLintStrictValue(baseDir)\n          : await cliPrompt(baseDir)\n\n        if (selectedConfig == null) {\n          // Show a warning if no option is selected in prompt\n          Log.warn(\n            'If you set up ESLint yourself, we recommend adding the Next.js ESLint plugin. See https://nextjs.org/docs/basic-features/eslint#migrating-existing-config'\n          )\n          return null\n        } else {\n          // Check if necessary deps installed, and install any that are missing\n          deps = await hasNecessaryDependencies(baseDir, requiredPackages)\n          if (deps.missing.length > 0) {\n            deps.missing.forEach((dep) => {\n              if (dep.pkg === 'eslint') {\n                // eslint v9 has breaking changes, so lock to 8 until dependency plugins fully support v9.\n                dep.pkg = 'eslint@^8'\n              }\n            })\n\n            await installDependencies(baseDir, deps.missing, true)\n          }\n\n          // Write default ESLint config.\n          // Check for /pages and src/pages is to make sure this happens in Next.js folder\n          if (\n            ['app', 'src/app', 'pages', 'src/pages'].some((dir) =>\n              existsSync(path.join(baseDir, dir))\n            )\n          ) {\n            await writeDefaultConfig(\n              baseDir,\n              config,\n              selectedConfig,\n              eslintrcFile,\n              pkgJsonPath,\n              packageJsonConfig\n            )\n          }\n        }\n\n        Log.ready(\n          `ESLint has successfully been configured. Run ${bold(\n            cyan('next lint')\n          )} again to view warnings and errors.`\n        )\n\n        return null\n      }\n    }\n  } catch (err) {\n    throw err\n  }\n}\n"],"names":["promises","fs","existsSync","bold","cyan","red","underline","yellow","path","findUp","semver","CommentJson","formatResults","writeDefaultConfig","hasEslintConfiguration","writeOutputFile","findPagesDir","installDependencies","hasNecessaryDependencies","Log","isError","getProperError","getPkgManager","getESLintStrictValue","getESLintPromptValues","VALID_SEVERITY","isValidSeverity","severity","includes","requiredPackages","file","pkg","exportsRestrict","cliPrompt","cwd","console","log","cliSelect","Promise","resolve","require","default","value","values","valueRenderer","title","recommended","selected","name","unselected","config","lint","baseDir","lintDirs","eslintrcFile","pkgJsonPath","lintDuringBuild","eslintOptions","reportErrorsOnly","maxWarnings","formatter","outputFile","mod","ESLint","deps","packageManager","missing","some","dep","error","resolved","get","eslintVersion","version","CLIEngine","lt","options","useEslintrc","baseConfig","errorOnUnmatchedPattern","extensions","cache","eslint","nextEslintPluginIsEnabled","nextRulesEnabled","Map","configFile","completeConfig","calculateConfigForFile","plugins","Object","entries","rules","startsWith","length","set","pagesDir","pagesDirRules","updatedPagesDir","rule","replace","warn","lintStart","process","hrtime","results","lintFiles","selectedFormatter","fix","outputFixes","getErrorResults","loadFormatter","formattedResult","format","lintEnd","totalWarnings","reduce","sum","warningCount","output","outputWithMessages","eventInfo","durationInSeconds","lintedFilesCount","lintFix","nextEslintPluginVersion","has","join","dirname","nextEslintPluginErrorsCount","totalNextPluginErrorCount","nextEslintPluginWarningsCount","totalNextPluginWarningCount","fromEntries","err","message","runLintCheck","opts","strict","packageJsonConfig","pkgJsonContent","readFile","encoding","parse","exists","emptyPkgJsonConfig","emptyEslintrc","selectedConfig","forEach","dir","ready"],"mappings":"AAAA,SAASA,YAAYC,EAAE,EAAEC,UAAU,QAAQ,KAAI;AAC/C,SAASC,IAAI,EAAEC,IAAI,EAAEC,GAAG,EAAEC,SAAS,EAAEC,MAAM,QAAQ,gBAAe;AAClE,OAAOC,UAAU,OAAM;AAEvB,OAAOC,YAAY,6BAA4B;AAC/C,OAAOC,YAAY,4BAA2B;AAC9C,YAAYC,iBAAiB,kCAAiC;AAE9D,SAASC,aAAa,QAAQ,oBAAmB;AAEjD,SAASC,kBAAkB,QAAQ,uBAAsB;AACzD,SAASC,sBAAsB,QAAQ,2BAA0B;AACjE,SAASC,eAAe,QAAQ,oBAAmB;AAEnD,SAASC,YAAY,QAAQ,oBAAmB;AAChD,SAASC,mBAAmB,QAAQ,0BAAyB;AAC7D,SAASC,wBAAwB,QAAQ,gCAA+B;AAExE,YAAYC,SAAS,yBAAwB;AAE7C,OAAOC,WAAWC,cAAc,QAAQ,cAAa;AACrD,SAASC,aAAa,QAAQ,6BAA4B;AAC1D,SACEC,oBAAoB,EACpBC,qBAAqB,QAChB,0BAAyB;AAOhC,8GAA8G;AAC9G,MAAMC,iBAAiB;IAAC;IAAO;IAAQ;CAAQ;AAG/C,SAASC,gBAAgBC,QAAgB;IACvC,OAAOF,eAAeG,QAAQ,CAACD;AACjC;AAEA,MAAME,mBAAmB;IACvB;QAAEC,MAAM;QAAUC,KAAK;QAAUC,iBAAiB;IAAM;IACxD;QACEF,MAAM;QACNC,KAAK;QACLC,iBAAiB;IACnB;CACD;AAED,eAAeC,UAAUC,GAAW;IAClCC,QAAQC,GAAG,CACTjC,KACE,CAAC,EAAEC,KACD,KACA,sFAAsF,CAAC;IAI7F,IAAI;QACF,MAAMiC,YAAY,AAChB,CAAA,MAAMC,QAAQC,OAAO,CAACC,QAAQ,iCAAgC,EAC9DC,OAAO;QACT,MAAM,EAAEC,KAAK,EAAE,GAAG,MAAML,UAAU;YAChCM,QAAQ,MAAMnB,sBAAsBU;YACpCU,eAAe,CACb,EACEC,KAAK,EACLC,WAAW,EAC2C,EACxDC;gBAEA,MAAMC,OAAOD,WAAW5C,KAAKG,UAAUF,KAAKyC,WAAWA;gBACvD,OAAOG,OAAQF,CAAAA,cAAc3C,KAAKI,OAAO,qBAAqB,EAAC;YACjE;YACAwC,UAAU3C,KAAK;YACf6C,YAAY;QACd;QAEA,OAAO;YAAEC,QAAQR,CAAAA,yBAAAA,MAAOQ,MAAM,KAAI;QAAK;IACzC,EAAE,OAAM;QACN,OAAO;YAAEA,QAAQ;QAAK;IACxB;AACF;AAEA,eAAeC,KACbC,OAAe,EACfC,QAAkB,EAClBC,YAA2B,EAC3BC,WAA0B,EAC1B,EACEC,kBAAkB,KAAK,EACvBC,gBAAgB,IAAI,EACpBC,mBAAmB,KAAK,EACxBC,cAAc,CAAC,CAAC,EAChBC,YAAY,IAAI,EAChBC,aAAa,IAAI,EAQlB;IAUD,IAAI;YAyBqCC,gBA6GnCC;QArIJ,0CAA0C;QAC1C,MAAMC,OAAO,MAAM9C,yBAAyBkC,SAASvB;QACrD,MAAMoC,iBAAiB3C,cAAc8B;QAErC,IAAIY,KAAKE,OAAO,CAACC,IAAI,CAAC,CAACC,MAAQA,IAAIrC,GAAG,KAAK,WAAW;YACpDZ,IAAIkD,KAAK,CACP,CAAC,wBAAwB,EACvBb,kBAAkB,oCAAoC,IACvD,CAAC,EAAErD,KACFC,KACE,AAAC6D,CAAAA,mBAAmB,SAChB,mBACAA,mBAAmB,SACjB,4BACA,wBAAuB,IAAK,YAEpC,CAAC;YAEL,OAAO;QACT;QAEA,MAAMH,MAAM,MAAMxB,QAAQC,OAAO,CAACC,QAAQwB,KAAKM,QAAQ,CAACC,GAAG,CAAC;QAE5D,MAAM,EAAER,MAAM,EAAE,GAAGD;QACnB,IAAIU,gBAAgBT,CAAAA,0BAAAA,OAAQU,OAAO,OAAIX,iBAAAA,IAAIY,SAAS,qBAAbZ,eAAeW,OAAO;QAE7D,IAAI,CAACD,iBAAiB9D,OAAOiE,EAAE,CAACH,eAAe,UAAU;YACvD,OAAO,CAAC,EAAEnE,IACR,SACA,wDAAwD,EACxDmE,gBAAgB,OAAOA,gBAAgB,MAAM,GAC9C,6CAA6C,CAAC;QACjD;QAEA,IAAII,UAAe;YACjBC,aAAa;YACbC,YAAY,CAAC;YACbC,yBAAyB;YACzBC,YAAY;gBAAC;gBAAO;gBAAQ;gBAAO;aAAO;YAC1CC,OAAO;YACP,GAAGxB,aAAa;QAClB;QAEA,IAAIyB,SAAS,IAAInB,OAAOa;QAExB,IAAIO,4BAA4B;QAChC,MAAMC,mBAAmB,IAAIC;QAE7B,KAAK,MAAMC,cAAc;YAAChC;YAAcC;SAAY,CAAE;gBAMhDgC;YALJ,IAAI,CAACD,YAAY;YAEjB,MAAMC,iBACJ,MAAML,OAAOM,sBAAsB,CAACF;YAEtC,KAAIC,0BAAAA,eAAeE,OAAO,qBAAtBF,wBAAwB3D,QAAQ,CAAC,eAAe;gBAClDuD,4BAA4B;gBAC5B,KAAK,MAAM,CAACnC,MAAM,CAACrB,SAAS,CAAC,IAAI+D,OAAOC,OAAO,CAACJ,eAAeK,KAAK,EAAG;oBACrE,IAAI,CAAC5C,KAAK6C,UAAU,CAAC,gBAAgB;wBACnC;oBACF;oBACA,IACE,OAAOlE,aAAa,YACpBA,YAAY,KACZA,WAAWF,eAAeqE,MAAM,EAChC;wBACAV,iBAAiBW,GAAG,CAAC/C,MAAMvB,cAAc,CAACE,SAAS;oBACrD,OAAO,IACL,OAAOA,aAAa,YACpBD,gBAAgBC,WAChB;wBACAyD,iBAAiBW,GAAG,CAAC/C,MAAMrB;oBAC7B;gBACF;gBACA;YACF;QACF;QAEA,MAAMqE,WAAWhF,aAAaoC,SAAS4C,QAAQ;QAC/C,MAAMC,gBAAgBD,WAAW;YAAC;SAAoC,GAAG,EAAE;QAE3E,IAAIb,2BAA2B;YAC7B,IAAIe,kBAAkB;YAEtB,KAAK,MAAMC,QAAQF,cAAe;oBAE7BrB,2BACAA;gBAFH,IACE,GAACA,4BAAAA,QAAQE,UAAU,CAAEc,KAAK,qBAAzBhB,yBAA2B,CAACuB,KAAK,KAClC,GAACvB,6BAAAA,QAAQE,UAAU,CAAEc,KAAK,qBAAzBhB,0BAA2B,CAC1BuB,KAAKC,OAAO,CAAC,cAAc,2BAC5B,GACD;oBACA,IAAI,CAACxB,QAAQE,UAAU,CAAEc,KAAK,EAAE;wBAC9BhB,QAAQE,UAAU,CAAEc,KAAK,GAAG,CAAC;oBAC/B;oBACAhB,QAAQE,UAAU,CAAEc,KAAK,CAACO,KAAK,GAAG;wBAAC;wBAAGH;qBAAS;oBAC/CE,kBAAkB;gBACpB;YACF;YAEA,IAAIA,iBAAiB;gBACnBhB,SAAS,IAAInB,OAAOa;YACtB;QACF,OAAO;YACLzD,IAAIkF,IAAI,CAAC;YACTlF,IAAIkF,IAAI,CACN;QAEJ;QAEA,MAAMC,YAAYC,QAAQC,MAAM;QAEhC,IAAIC,UAAU,MAAMvB,OAAOwB,SAAS,CAACrD;QACrC,IAAIsD,oBAAoB;QAExB,IAAI/B,QAAQgC,GAAG,EAAE,MAAM7C,OAAO8C,WAAW,CAACJ;QAC1C,IAAI/C,kBAAkB+C,UAAU,MAAM1C,OAAO+C,eAAe,CAACL,SAAS,6CAA6C;;QAEnH,IAAI7C,WAAW+C,oBAAoB,MAAMzB,OAAO6B,aAAa,CAACnD;QAC9D,MAAMoD,kBAAkBpG,cACtBwC,SACAqD,SACAE,qCAAAA,kBAAmBM,MAAM;QAE3B,MAAMC,UAAUX,QAAQC,MAAM,CAACF;QAC/B,MAAMa,gBAAgBV,QAAQW,MAAM,CAClC,CAACC,KAAavF,OAAqBuF,MAAMvF,KAAKwF,YAAY,EAC1D;QAGF,IAAIzD,YAAY,MAAM9C,gBAAgB8C,YAAYmD,gBAAgBO,MAAM;QAExE,OAAO;YACLA,QAAQP,gBAAgBQ,kBAAkB;YAC1CpG,SACE2C,EAAAA,0BAAAA,OAAO+C,eAAe,CAACL,6BAAvB1C,wBAAiC+B,MAAM,IAAG,KACzCnC,eAAe,KAAKwD,gBAAgBxD;YACvC8D,WAAW;gBACTC,mBAAmBR,OAAO,CAAC,EAAE;gBAC7B1C,eAAeA;gBACfmD,kBAAkBlB,QAAQX,MAAM;gBAChC8B,SAAS,CAAC,CAAChD,QAAQgC,GAAG;gBACtBiB,yBACE1C,6BAA6BnB,KAAKM,QAAQ,CAACwD,GAAG,CAAC,wBAC3CtF,QACEhC,KAAKuH,IAAI,CACPvH,KAAKwH,OAAO,CAAChE,KAAKM,QAAQ,CAACC,GAAG,CAAC,wBAC/B,iBAEFE,OAAO,GACT;gBACNwD,6BAA6BjB,gBAAgBkB,yBAAyB;gBACtEC,+BACEnB,gBAAgBoB,2BAA2B;gBAC7ChD,kBAAkBM,OAAO2C,WAAW,CAACjD;YACvC;QACF;IACF,EAAE,OAAOkD,KAAK;QACZ,IAAI9E,iBAAiB;YACnBrC,IAAIkD,KAAK,CACP,CAAC,QAAQ,EACPjD,QAAQkH,QAAQA,IAAIC,OAAO,GAAGD,IAAIC,OAAO,CAACnC,OAAO,CAAC,OAAO,OAAOkC,IACjE,CAAC;YAEJ,OAAO;QACT,OAAO;YACL,MAAMjH,eAAeiH;QACvB;IACF;AACF;AAEA,OAAO,eAAeE,aACpBpF,OAAe,EACfC,QAAkB,EAClBoF,IAQC;IAED,MAAM,EACJjF,kBAAkB,KAAK,EACvBC,gBAAgB,IAAI,EACpBC,mBAAmB,KAAK,EACxBC,cAAc,CAAC,CAAC,EAChBC,YAAY,IAAI,EAChBC,aAAa,IAAI,EACjB6E,SAAS,KAAK,EACf,GAAGD;IACJ,IAAI;QACF,6BAA6B;QAC7B,qGAAqG;QACrG,MAAMnF,eACJ,AAAC,MAAM7C,OACL;YACE;YACA;YACA;YACA;YACA;YACA;SACD,EACD;YACEyB,KAAKkB;QACP,MACI;QAER,MAAMG,cAAc,AAAC,MAAM9C,OAAO,gBAAgB;YAAEyB,KAAKkB;QAAQ,MAAO;QACxE,IAAIuF,oBAAoB;QACxB,IAAIpF,aAAa;YACf,MAAMqF,iBAAiB,MAAM3I,GAAG4I,QAAQ,CAACtF,aAAa;gBACpDuF,UAAU;YACZ;YACAH,oBAAoBhI,YAAYoI,KAAK,CAACH;QACxC;QAEA,MAAM1F,SAAS,MAAMpC,uBAAuBwC,cAAcqF;QAC1D,IAAI3E;QAEJ,IAAId,OAAO8F,MAAM,EAAE;YACjB,8BAA8B;YAC9B,OAAO,MAAM7F,KAAKC,SAASC,UAAUC,cAAcC,aAAa;gBAC9DC;gBACAC;gBACAC;gBACAC;gBACAC;gBACAC;YACF;QACF,OAAO;YACL,+DAA+D;YAC/D,4DAA4D;YAC5D,8BAA8B;YAC9B,IAAIL,iBAAiB;gBACnB,IAAIN,OAAO+F,kBAAkB,IAAI/F,OAAOgG,aAAa,EAAE;oBACrD/H,IAAIkF,IAAI,CACN,CAAC,sCAAsC,EAAElG,KACvCC,KAAK,cACL,eAAe,CAAC;gBAEtB;gBACA,OAAO;YACT,OAAO;gBACL,sFAAsF;gBACtF,MAAM,EAAE8C,QAAQiG,cAAc,EAAE,GAAGT,SAC/B,MAAMnH,qBAAqB6B,WAC3B,MAAMnB,UAAUmB;gBAEpB,IAAI+F,kBAAkB,MAAM;oBAC1B,oDAAoD;oBACpDhI,IAAIkF,IAAI,CACN;oBAEF,OAAO;gBACT,OAAO;oBACL,sEAAsE;oBACtErC,OAAO,MAAM9C,yBAAyBkC,SAASvB;oBAC/C,IAAImC,KAAKE,OAAO,CAAC4B,MAAM,GAAG,GAAG;wBAC3B9B,KAAKE,OAAO,CAACkF,OAAO,CAAC,CAAChF;4BACpB,IAAIA,IAAIrC,GAAG,KAAK,UAAU;gCACxB,0FAA0F;gCAC1FqC,IAAIrC,GAAG,GAAG;4BACZ;wBACF;wBAEA,MAAMd,oBAAoBmC,SAASY,KAAKE,OAAO,EAAE;oBACnD;oBAEA,+BAA+B;oBAC/B,gFAAgF;oBAChF,IACE;wBAAC;wBAAO;wBAAW;wBAAS;qBAAY,CAACC,IAAI,CAAC,CAACkF,MAC7CnJ,WAAWM,KAAKuH,IAAI,CAAC3E,SAASiG,QAEhC;wBACA,MAAMxI,mBACJuC,SACAF,QACAiG,gBACA7F,cACAC,aACAoF;oBAEJ;gBACF;gBAEAxH,IAAImI,KAAK,CACP,CAAC,6CAA6C,EAAEnJ,KAC9CC,KAAK,cACL,mCAAmC,CAAC;gBAGxC,OAAO;YACT;QACF;IACF,EAAE,OAAOkI,KAAK;QACZ,MAAMA;IACR;AACF"}