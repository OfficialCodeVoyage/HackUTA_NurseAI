{"version":3,"sources":["../../../src/server/app-render/walk-tree-with-flight-router-state.tsx"],"sourcesContent":["import type {\n  FlightDataPath,\n  FlightRouterState,\n  FlightSegmentPath,\n  PreloadCallbacks,\n  Segment,\n} from './types'\nimport {\n  canSegmentBeOverridden,\n  matchSegment,\n} from '../../client/components/match-segments'\nimport type { LoaderTree } from '../lib/app-dir-module'\nimport { getLinkAndScriptTags } from './get-css-inlined-link-tags'\nimport { getPreloadableFonts } from './get-preloadable-fonts'\nimport {\n  addSearchParamsIfPageSegment,\n  createFlightRouterStateFromLoaderTree,\n} from './create-flight-router-state-from-loader-tree'\nimport type { CreateSegmentPath, AppRenderContext } from './app-render'\nimport { hasLoadingComponentInTree } from './has-loading-component-in-tree'\nimport { DEFAULT_SEGMENT_KEY } from '../../shared/lib/segment'\nimport { createComponentTree } from './create-component-tree'\n\n/**\n * Use router state to decide at what common layout to render the page.\n * This can either be the common layout between two pages or a specific place to start rendering from using the \"refetch\" marker in the tree.\n */\nexport async function walkTreeWithFlightRouterState({\n  createSegmentPath,\n  loaderTreeToFilter,\n  parentParams,\n  isFirst,\n  flightRouterState,\n  parentRendered,\n  rscPayloadHead,\n  injectedCSS,\n  injectedJS,\n  injectedFontPreloadTags,\n  rootLayoutIncluded,\n  asNotFound,\n  metadataOutlet,\n  ctx,\n  preloadCallbacks,\n}: {\n  createSegmentPath: CreateSegmentPath\n  loaderTreeToFilter: LoaderTree\n  parentParams: { [key: string]: string | string[] }\n  isFirst: boolean\n  flightRouterState?: FlightRouterState\n  parentRendered?: boolean\n  rscPayloadHead: React.ReactNode\n  injectedCSS: Set<string>\n  injectedJS: Set<string>\n  injectedFontPreloadTags: Set<string>\n  rootLayoutIncluded: boolean\n  asNotFound?: boolean\n  metadataOutlet: React.ReactNode\n  ctx: AppRenderContext\n  preloadCallbacks: PreloadCallbacks\n}): Promise<FlightDataPath[]> {\n  const {\n    renderOpts: { nextFontManifest, experimental },\n    query,\n    isPrefetch,\n    getDynamicParamFromSegment,\n    componentMod: { tree: loaderTree },\n  } = ctx\n\n  const [segment, parallelRoutes, components] = loaderTreeToFilter\n\n  const parallelRoutesKeys = Object.keys(parallelRoutes)\n\n  const { layout } = components\n  const isLayout = typeof layout !== 'undefined'\n\n  /**\n   * Checks if the current segment is a root layout.\n   */\n  const rootLayoutAtThisLevel = isLayout && !rootLayoutIncluded\n  /**\n   * Checks if the current segment or any level above it has a root layout.\n   */\n  const rootLayoutIncludedAtThisLevelOrAbove =\n    rootLayoutIncluded || rootLayoutAtThisLevel\n\n  // Because this function walks to a deeper point in the tree to start rendering we have to track the dynamic parameters up to the point where rendering starts\n  const segmentParam = getDynamicParamFromSegment(segment)\n  const currentParams =\n    // Handle null case where dynamic param is optional\n    segmentParam && segmentParam.value !== null\n      ? {\n          ...parentParams,\n          [segmentParam.param]: segmentParam.value,\n        }\n      : parentParams\n  const actualSegment: Segment = addSearchParamsIfPageSegment(\n    segmentParam ? segmentParam.treeSegment : segment,\n    query\n  )\n\n  /**\n   * Decide if the current segment is where rendering has to start.\n   */\n  const renderComponentsOnThisLevel =\n    // No further router state available\n    !flightRouterState ||\n    // Segment in router state does not match current segment\n    !matchSegment(actualSegment, flightRouterState[0]) ||\n    // Last item in the tree\n    parallelRoutesKeys.length === 0 ||\n    // Explicit refresh\n    flightRouterState[3] === 'refetch'\n\n  // Pre-PPR, the `loading` component signals to the router how deep to render the component tree\n  // to ensure prefetches are quick and inexpensive. If there's no `loading` component anywhere in the tree being rendered,\n  // the prefetch will be short-circuited to avoid requesting a potentially very expensive subtree. If there's a `loading`\n  // somewhere in the tree, we'll recursively render the component tree up until we encounter that loading component, and then stop.\n  const shouldSkipComponentTree =\n    !experimental.isRoutePPREnabled &&\n    isPrefetch &&\n    !Boolean(components.loading) &&\n    !hasLoadingComponentInTree(loaderTree)\n\n  if (!parentRendered && renderComponentsOnThisLevel) {\n    const overriddenSegment =\n      flightRouterState &&\n      canSegmentBeOverridden(actualSegment, flightRouterState[0])\n        ? flightRouterState[0]\n        : actualSegment\n\n    const routerState = createFlightRouterStateFromLoaderTree(\n      // Create router state using the slice of the loaderTree\n      loaderTreeToFilter,\n      getDynamicParamFromSegment,\n      query\n    )\n\n    if (shouldSkipComponentTree) {\n      // Send only the router state\n      return [[overriddenSegment, routerState, null, null]]\n    } else {\n      // Create component tree using the slice of the loaderTree\n      const seedData = await createComponentTree(\n        // This ensures flightRouterPath is valid and filters down the tree\n        {\n          ctx,\n          createSegmentPath,\n          loaderTree: loaderTreeToFilter,\n          parentParams: currentParams,\n          firstItem: isFirst,\n          injectedCSS,\n          injectedJS,\n          injectedFontPreloadTags,\n          // This is intentionally not \"rootLayoutIncludedAtThisLevelOrAbove\" as createComponentTree starts at the current level and does a check for \"rootLayoutAtThisLevel\" too.\n          rootLayoutIncluded,\n          asNotFound,\n          metadataOutlet,\n          preloadCallbacks,\n        }\n      )\n\n      return [[overriddenSegment, routerState, seedData, rscPayloadHead]]\n    }\n  }\n\n  // If we are not rendering on this level we need to check if the current\n  // segment has a layout. If so, we need to track all the used CSS to make\n  // the result consistent.\n  const layoutPath = layout?.[1]\n  const injectedCSSWithCurrentLayout = new Set(injectedCSS)\n  const injectedJSWithCurrentLayout = new Set(injectedJS)\n  const injectedFontPreloadTagsWithCurrentLayout = new Set(\n    injectedFontPreloadTags\n  )\n  if (layoutPath) {\n    getLinkAndScriptTags(\n      ctx.clientReferenceManifest,\n      layoutPath,\n      injectedCSSWithCurrentLayout,\n      injectedJSWithCurrentLayout,\n      true\n    )\n    getPreloadableFonts(\n      nextFontManifest,\n      layoutPath,\n      injectedFontPreloadTagsWithCurrentLayout\n    )\n  }\n\n  // Walk through all parallel routes.\n  const paths: FlightDataPath[] = (\n    await Promise.all(\n      parallelRoutesKeys.map(async (parallelRouteKey) => {\n        // for (const parallelRouteKey of parallelRoutesKeys) {\n        const parallelRoute = parallelRoutes[parallelRouteKey]\n\n        const currentSegmentPath: FlightSegmentPath = isFirst\n          ? [parallelRouteKey]\n          : [actualSegment, parallelRouteKey]\n\n        const path = await walkTreeWithFlightRouterState({\n          ctx,\n          createSegmentPath: (child) => {\n            return createSegmentPath([...currentSegmentPath, ...child])\n          },\n          loaderTreeToFilter: parallelRoute,\n          parentParams: currentParams,\n          flightRouterState:\n            flightRouterState && flightRouterState[1][parallelRouteKey],\n          parentRendered: parentRendered || renderComponentsOnThisLevel,\n          isFirst: false,\n          rscPayloadHead,\n          injectedCSS: injectedCSSWithCurrentLayout,\n          injectedJS: injectedJSWithCurrentLayout,\n          injectedFontPreloadTags: injectedFontPreloadTagsWithCurrentLayout,\n          rootLayoutIncluded: rootLayoutIncludedAtThisLevelOrAbove,\n          asNotFound,\n          metadataOutlet,\n          preloadCallbacks,\n        })\n\n        return path\n          .map((item) => {\n            // we don't need to send over default routes in the flight data\n            // because they are always ignored by the client, unless it's a refetch\n            if (\n              item[0] === DEFAULT_SEGMENT_KEY &&\n              flightRouterState &&\n              !!flightRouterState[1][parallelRouteKey][0] &&\n              flightRouterState[1][parallelRouteKey][3] !== 'refetch'\n            ) {\n              return null\n            }\n            return [actualSegment, parallelRouteKey, ...item]\n          })\n          .filter(Boolean) as FlightDataPath[]\n      })\n    )\n  ).flat()\n\n  return paths\n}\n"],"names":["canSegmentBeOverridden","matchSegment","getLinkAndScriptTags","getPreloadableFonts","addSearchParamsIfPageSegment","createFlightRouterStateFromLoaderTree","hasLoadingComponentInTree","DEFAULT_SEGMENT_KEY","createComponentTree","walkTreeWithFlightRouterState","createSegmentPath","loaderTreeToFilter","parentParams","isFirst","flightRouterState","parentRendered","rscPayloadHead","injectedCSS","injectedJS","injectedFontPreloadTags","rootLayoutIncluded","asNotFound","metadataOutlet","ctx","preloadCallbacks","renderOpts","nextFontManifest","experimental","query","isPrefetch","getDynamicParamFromSegment","componentMod","tree","loaderTree","segment","parallelRoutes","components","parallelRoutesKeys","Object","keys","layout","isLayout","rootLayoutAtThisLevel","rootLayoutIncludedAtThisLevelOrAbove","segmentParam","currentParams","value","param","actualSegment","treeSegment","renderComponentsOnThisLevel","length","shouldSkipComponentTree","isRoutePPREnabled","Boolean","loading","overriddenSegment","routerState","seedData","firstItem","layoutPath","injectedCSSWithCurrentLayout","Set","injectedJSWithCurrentLayout","injectedFontPreloadTagsWithCurrentLayout","clientReferenceManifest","paths","Promise","all","map","parallelRouteKey","parallelRoute","currentSegmentPath","path","child","item","filter","flat"],"mappings":"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"}