{"version":3,"sources":["../../src/server/font-utils.ts"],"sourcesContent":["import * as Log from '../build/output/log'\nimport {\n  GOOGLE_FONT_PROVIDER,\n  DEFAULT_SERIF_FONT,\n  DEFAULT_SANS_SERIF_FONT,\n} from '../shared/lib/constants'\nconst capsizeFontsMetrics = require('next/dist/server/capsize-font-metrics.json')\n\nconst CHROME_UA =\n  'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36'\nconst IE_UA = 'Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko'\n\nexport type FontManifest = Array<{\n  url: string\n  content: string\n}>\n\nexport type FontConfig = boolean\n\nfunction isGoogleFont(url: string): boolean {\n  return url.startsWith(GOOGLE_FONT_PROVIDER)\n}\n\nasync function getFontForUA(url: string, UA: string): Promise<string> {\n  const res = await fetch(url, { headers: { 'user-agent': UA } })\n  return await res.text()\n}\n\nexport async function getFontDefinitionFromNetwork(\n  url: string\n): Promise<string> {\n  let result = ''\n  /**\n   * The order of IE -> Chrome is important, other wise chrome starts loading woff1.\n   * CSS cascading ü§∑‚Äç‚ôÇÔ∏è.\n   */\n  try {\n    if (isGoogleFont(url)) {\n      result += await getFontForUA(url, IE_UA)\n    }\n    result += await getFontForUA(url, CHROME_UA)\n  } catch (e) {\n    Log.warn(\n      `Failed to download the stylesheet for ${url}. Skipped optimizing this font.`\n    )\n    return ''\n  }\n\n  return result\n}\n\nfunction parseGoogleFontName(css: string): Array<string> {\n  const regex = /font-family: ([^;]*)/g\n  const matches = css.matchAll(regex)\n  const fontNames = new Set<string>()\n\n  for (let font of matches) {\n    const fontFamily = font[1].replace(/^['\"]|['\"]$/g, '')\n    fontNames.add(fontFamily)\n  }\n\n  return [...fontNames]\n}\n\nfunction formatName(str: string): string {\n  return str\n    .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (word, index) {\n      return index === 0 ? word.toLowerCase() : word.toUpperCase()\n    })\n    .replace(/\\s+/g, '')\n}\n\nfunction formatOverrideValue(val: number) {\n  return Math.abs(val * 100).toFixed(2)\n}\n\nexport function calculateOverrideValues(fontName: string) {\n  const fontKey = formatName(fontName)\n  const fontMetrics = capsizeFontsMetrics[fontKey]\n  let { category, ascent, descent, lineGap, unitsPerEm } = fontMetrics\n  const fallbackFont =\n    category === 'serif' ? DEFAULT_SERIF_FONT : DEFAULT_SANS_SERIF_FONT\n  ascent = formatOverrideValue(ascent / unitsPerEm)\n  descent = formatOverrideValue(descent / unitsPerEm)\n  lineGap = formatOverrideValue(lineGap / unitsPerEm)\n\n  return {\n    ascent,\n    descent,\n    lineGap,\n    fallbackFont: fallbackFont.name,\n  }\n}\n\nexport function calculateSizeAdjustValues(fontName: string) {\n  const fontKey = formatName(fontName)\n  const fontMetrics = capsizeFontsMetrics[fontKey]\n  let { category, ascent, descent, lineGap, unitsPerEm, xWidthAvg } =\n    fontMetrics\n  const mainFontAvgWidth = xWidthAvg / unitsPerEm\n  const fallbackFont =\n    category === 'serif' ? DEFAULT_SERIF_FONT : DEFAULT_SANS_SERIF_FONT\n  const fallbackFontName = formatName(fallbackFont.name)\n  const fallbackFontMetrics = capsizeFontsMetrics[fallbackFontName]\n  const fallbackFontAvgWidth =\n    fallbackFontMetrics.xWidthAvg / fallbackFontMetrics.unitsPerEm\n  let sizeAdjust = xWidthAvg ? mainFontAvgWidth / fallbackFontAvgWidth : 1\n\n  ascent = formatOverrideValue(ascent / (unitsPerEm * sizeAdjust))\n  descent = formatOverrideValue(descent / (unitsPerEm * sizeAdjust))\n  lineGap = formatOverrideValue(lineGap / (unitsPerEm * sizeAdjust))\n\n  return {\n    ascent,\n    descent,\n    lineGap,\n    fallbackFont: fallbackFont.name,\n    sizeAdjust: formatOverrideValue(sizeAdjust),\n  }\n}\n\nfunction calculateOverrideCSS(font: string) {\n  const fontName = font.trim()\n\n  const { ascent, descent, lineGap, fallbackFont } =\n    calculateOverrideValues(fontName)\n\n  return `\n    @font-face {\n      font-family: \"${fontName} Fallback\";\n      ascent-override: ${ascent}%;\n      descent-override: ${descent}%;\n      line-gap-override: ${lineGap}%;\n      src: local(\"${fallbackFont}\");\n    }\n  `\n}\n\nfunction calculateSizeAdjustCSS(font: string) {\n  const fontName = font.trim()\n\n  const { ascent, descent, lineGap, fallbackFont, sizeAdjust } =\n    calculateSizeAdjustValues(fontName)\n\n  return `\n    @font-face {\n      font-family: \"${fontName} Fallback\";\n      ascent-override: ${ascent}%;\n      descent-override: ${descent}%;\n      line-gap-override: ${lineGap}%;\n      size-adjust: ${sizeAdjust}%;\n      src: local(\"${fallbackFont}\");\n    }\n  `\n}\n\nexport function getFontOverrideCss(\n  url: string,\n  css: string,\n  useSizeAdjust = false\n) {\n  if (!isGoogleFont(url)) {\n    return ''\n  }\n\n  const calcFn = useSizeAdjust ? calculateSizeAdjustCSS : calculateOverrideCSS\n\n  try {\n    const fontNames = parseGoogleFontName(css)\n\n    const fontCss = fontNames.reduce((cssStr, fontName) => {\n      cssStr += calcFn(fontName)\n      return cssStr\n    }, '')\n\n    return fontCss\n  } catch (e) {\n    console.log('Error getting font override values - ', e)\n    return ''\n  }\n}\n"],"names":["Log","GOOGLE_FONT_PROVIDER","DEFAULT_SERIF_FONT","DEFAULT_SANS_SERIF_FONT","capsizeFontsMetrics","require","CHROME_UA","IE_UA","isGoogleFont","url","startsWith","getFontForUA","UA","res","fetch","headers","text","getFontDefinitionFromNetwork","result","e","warn","parseGoogleFontName","css","regex","matches","matchAll","fontNames","Set","font","fontFamily","replace","add","formatName","str","word","index","toLowerCase","toUpperCase","formatOverrideValue","val","Math","abs","toFixed","calculateOverrideValues","fontName","fontKey","fontMetrics","category","ascent","descent","lineGap","unitsPerEm","fallbackFont","name","calculateSizeAdjustValues","xWidthAvg","mainFontAvgWidth","fallbackFontName","fallbackFontMetrics","fallbackFontAvgWidth","sizeAdjust","calculateOverrideCSS","trim","calculateSizeAdjustCSS","getFontOverrideCss","useSizeAdjust","calcFn","fontCss","reduce","cssStr","console","log"],"mappings":"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"}