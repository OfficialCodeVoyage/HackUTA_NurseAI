{"version":3,"sources":["../../../src/server/lib/patch-fetch.ts"],"sourcesContent":["import type {\n  StaticGenerationAsyncStorage,\n  StaticGenerationStore,\n} from '../../client/components/static-generation-async-storage.external'\n\nimport { AppRenderSpan, NextNodeServerSpan } from './trace/constants'\nimport { getTracer, SpanKind } from './trace/tracer'\nimport {\n  CACHE_ONE_YEAR,\n  NEXT_CACHE_IMPLICIT_TAG_ID,\n  NEXT_CACHE_TAG_MAX_ITEMS,\n  NEXT_CACHE_TAG_MAX_LENGTH,\n} from '../../lib/constants'\nimport { markCurrentScopeAsDynamic } from '../app-render/dynamic-rendering'\nimport type { FetchMetric } from '../base-http'\nimport { createDedupeFetch } from './dedupe-fetch'\nimport type {\n  RequestAsyncStorage,\n  RequestStore,\n} from '../../client/components/request-async-storage.external'\nimport type { CachedFetchData } from '../response-cache'\n\nconst isEdgeRuntime = process.env.NEXT_RUNTIME === 'edge'\n\ntype Fetcher = typeof fetch\n\ntype PatchedFetcher = Fetcher & {\n  readonly __nextPatched: true\n  readonly __nextGetStaticStore: () => StaticGenerationAsyncStorage\n  readonly _nextOriginalFetch: Fetcher\n}\n\nfunction isPatchedFetch(\n  fetch: Fetcher | PatchedFetcher\n): fetch is PatchedFetcher {\n  return '__nextPatched' in fetch && fetch.__nextPatched === true\n}\n\nexport function validateRevalidate(\n  revalidateVal: unknown,\n  route: string\n): undefined | number | false {\n  try {\n    let normalizedRevalidate: false | number | undefined = undefined\n\n    if (revalidateVal === false) {\n      normalizedRevalidate = revalidateVal\n    } else if (\n      typeof revalidateVal === 'number' &&\n      !isNaN(revalidateVal) &&\n      revalidateVal > -1\n    ) {\n      normalizedRevalidate = revalidateVal\n    } else if (typeof revalidateVal !== 'undefined') {\n      throw new Error(\n        `Invalid revalidate value \"${revalidateVal}\" on \"${route}\", must be a non-negative number or \"false\"`\n      )\n    }\n    return normalizedRevalidate\n  } catch (err: any) {\n    // handle client component error from attempting to check revalidate value\n    if (err instanceof Error && err.message.includes('Invalid revalidate')) {\n      throw err\n    }\n    return undefined\n  }\n}\n\nexport function validateTags(tags: any[], description: string) {\n  const validTags: string[] = []\n  const invalidTags: Array<{\n    tag: any\n    reason: string\n  }> = []\n\n  for (let i = 0; i < tags.length; i++) {\n    const tag = tags[i]\n\n    if (typeof tag !== 'string') {\n      invalidTags.push({ tag, reason: 'invalid type, must be a string' })\n    } else if (tag.length > NEXT_CACHE_TAG_MAX_LENGTH) {\n      invalidTags.push({\n        tag,\n        reason: `exceeded max length of ${NEXT_CACHE_TAG_MAX_LENGTH}`,\n      })\n    } else {\n      validTags.push(tag)\n    }\n\n    if (validTags.length > NEXT_CACHE_TAG_MAX_ITEMS) {\n      console.warn(\n        `Warning: exceeded max tag count for ${description}, dropped tags:`,\n        tags.slice(i).join(', ')\n      )\n      break\n    }\n  }\n\n  if (invalidTags.length > 0) {\n    console.warn(`Warning: invalid tags passed to ${description}: `)\n\n    for (const { tag, reason } of invalidTags) {\n      console.log(`tag: \"${tag}\" ${reason}`)\n    }\n  }\n  return validTags\n}\n\nconst getDerivedTags = (pathname: string): string[] => {\n  const derivedTags: string[] = [`/layout`]\n\n  // we automatically add the current path segments as tags\n  // for revalidatePath handling\n  if (pathname.startsWith('/')) {\n    const pathnameParts = pathname.split('/')\n\n    for (let i = 1; i < pathnameParts.length + 1; i++) {\n      let curPathname = pathnameParts.slice(0, i).join('/')\n\n      if (curPathname) {\n        // all derived tags other than the page are layout tags\n        if (!curPathname.endsWith('/page') && !curPathname.endsWith('/route')) {\n          curPathname = `${curPathname}${\n            !curPathname.endsWith('/') ? '/' : ''\n          }layout`\n        }\n        derivedTags.push(curPathname)\n      }\n    }\n  }\n  return derivedTags\n}\n\nexport function addImplicitTags(\n  staticGenerationStore: StaticGenerationStore,\n  requestStore: RequestStore | undefined\n) {\n  const newTags: string[] = []\n  const { page } = staticGenerationStore\n\n  // Ini the tags array if it doesn't exist.\n  staticGenerationStore.tags ??= []\n\n  // Add the derived tags from the page.\n  const derivedTags = getDerivedTags(page)\n  for (let tag of derivedTags) {\n    tag = `${NEXT_CACHE_IMPLICIT_TAG_ID}${tag}`\n    if (!staticGenerationStore.tags?.includes(tag)) {\n      staticGenerationStore.tags.push(tag)\n    }\n    newTags.push(tag)\n  }\n\n  // Add the tags from the pathname.\n  if (requestStore?.url.pathname) {\n    const tag = `${NEXT_CACHE_IMPLICIT_TAG_ID}${requestStore.url.pathname}`\n    if (!staticGenerationStore.tags?.includes(tag)) {\n      staticGenerationStore.tags.push(tag)\n    }\n    newTags.push(tag)\n  }\n\n  return newTags\n}\n\nfunction trackFetchMetric(\n  staticGenerationStore: StaticGenerationStore,\n  ctx: Omit<FetchMetric, 'end' | 'idx'>\n) {\n  if (\n    !staticGenerationStore ||\n    staticGenerationStore.requestEndedState?.ended ||\n    process.env.NODE_ENV !== 'development'\n  ) {\n    return\n  }\n  staticGenerationStore.fetchMetrics ??= []\n\n  staticGenerationStore.fetchMetrics.push({\n    ...ctx,\n    end: Date.now(),\n    idx: staticGenerationStore.nextFetchId || 0,\n  })\n}\n\ninterface PatchableModule {\n  staticGenerationAsyncStorage: StaticGenerationAsyncStorage\n  requestAsyncStorage: RequestAsyncStorage\n}\n\nfunction createPatchedFetcher(\n  originFetch: Fetcher,\n  { staticGenerationAsyncStorage, requestAsyncStorage }: PatchableModule\n): PatchedFetcher {\n  // Create the patched fetch function. We don't set the type here, as it's\n  // verified as the return value of this function.\n  const patched = async (\n    input: RequestInfo | URL,\n    init: RequestInit | undefined\n  ) => {\n    let url: URL | undefined\n    try {\n      url = new URL(input instanceof Request ? input.url : input)\n      url.username = ''\n      url.password = ''\n    } catch {\n      // Error caused by malformed URL should be handled by native fetch\n      url = undefined\n    }\n    const fetchUrl = url?.href ?? ''\n    const fetchStart = Date.now()\n    const method = init?.method?.toUpperCase() || 'GET'\n\n    // Do create a new span trace for internal fetches in the\n    // non-verbose mode.\n    const isInternal = (init?.next as any)?.internal === true\n    const hideSpan = process.env.NEXT_OTEL_FETCH_DISABLED === '1'\n\n    return getTracer().trace(\n      isInternal ? NextNodeServerSpan.internalFetch : AppRenderSpan.fetch,\n      {\n        hideSpan,\n        kind: SpanKind.CLIENT,\n        spanName: ['fetch', method, fetchUrl].filter(Boolean).join(' '),\n        attributes: {\n          'http.url': fetchUrl,\n          'http.method': method,\n          'net.peer.name': url?.hostname,\n          'net.peer.port': url?.port || undefined,\n        },\n      },\n      async () => {\n        // If this is an internal fetch, we should not do any special treatment.\n        if (isInternal) {\n          return originFetch(input, init)\n        }\n\n        const staticGenerationStore = staticGenerationAsyncStorage.getStore()\n        const requestStore = requestAsyncStorage.getStore()\n\n        // If the staticGenerationStore is not available, we can't do any\n        // special treatment of fetch, therefore fallback to the original\n        // fetch implementation.\n        if (!staticGenerationStore) {\n          return originFetch(input, init)\n        }\n\n        // We should also fallback to the original fetch implementation if we\n        // are in draft mode, it does not constitute a static generation.\n        if (staticGenerationStore.isDraftMode) {\n          return originFetch(input, init)\n        }\n\n        const isRequestInput =\n          input &&\n          typeof input === 'object' &&\n          typeof (input as Request).method === 'string'\n\n        const getRequestMeta = (field: string) => {\n          // If request input is present but init is not, retrieve from input first.\n          const value = (init as any)?.[field]\n          return value || (isRequestInput ? (input as any)[field] : null)\n        }\n\n        let finalRevalidate: number | undefined | false = undefined\n        const getNextField = (field: 'revalidate' | 'tags') => {\n          return typeof init?.next?.[field] !== 'undefined'\n            ? init?.next?.[field]\n            : isRequestInput\n              ? (input as any).next?.[field]\n              : undefined\n        }\n        // RequestInit doesn't keep extra fields e.g. next so it's\n        // only available if init is used separate\n        let currentFetchRevalidate = getNextField('revalidate')\n        const tags: string[] = validateTags(\n          getNextField('tags') || [],\n          `fetch ${input.toString()}`\n        )\n\n        if (Array.isArray(tags)) {\n          if (!staticGenerationStore.tags) {\n            staticGenerationStore.tags = []\n          }\n          for (const tag of tags) {\n            if (!staticGenerationStore.tags.includes(tag)) {\n              staticGenerationStore.tags.push(tag)\n            }\n          }\n        }\n        const implicitTags = addImplicitTags(\n          staticGenerationStore,\n          requestStore\n        )\n\n        const pageFetchCacheMode = staticGenerationStore.fetchCache\n        const isUsingNoStore = !!staticGenerationStore.isUnstableNoStore\n\n        let currentFetchCacheConfig = getRequestMeta('cache')\n        let cacheReason = ''\n        let cacheWarning: string | undefined\n\n        if (\n          typeof currentFetchCacheConfig === 'string' &&\n          typeof currentFetchRevalidate !== 'undefined'\n        ) {\n          // when providing fetch with a Request input, it'll automatically set a cache value of 'default'\n          // we only want to warn if the user is explicitly setting a cache value\n          if (!(isRequestInput && currentFetchCacheConfig === 'default')) {\n            cacheWarning = `Specified \"cache: ${currentFetchCacheConfig}\" and \"revalidate: ${currentFetchRevalidate}\", only one should be specified.`\n          }\n          currentFetchCacheConfig = undefined\n        }\n\n        if (currentFetchCacheConfig === 'force-cache') {\n          currentFetchRevalidate = false\n        } else if (\n          currentFetchCacheConfig === 'no-cache' ||\n          currentFetchCacheConfig === 'no-store' ||\n          pageFetchCacheMode === 'force-no-store' ||\n          pageFetchCacheMode === 'only-no-store' ||\n          // If no explicit fetch cache mode is set, but dynamic = `force-dynamic` is set,\n          // we shouldn't consider caching the fetch. This is because the `dynamic` cache\n          // is considered a \"top-level\" cache mode, whereas something like `fetchCache` is more\n          // fine-grained. Top-level modes are responsible for setting reasonable defaults for the\n          // other configurations.\n          (!pageFetchCacheMode && staticGenerationStore.forceDynamic)\n        ) {\n          currentFetchRevalidate = 0\n        }\n\n        if (\n          currentFetchCacheConfig === 'no-cache' ||\n          currentFetchCacheConfig === 'no-store'\n        ) {\n          cacheReason = `cache: ${currentFetchCacheConfig}`\n        }\n\n        finalRevalidate = validateRevalidate(\n          currentFetchRevalidate,\n          staticGenerationStore.route\n        )\n\n        const _headers = getRequestMeta('headers')\n        const initHeaders: Headers =\n          typeof _headers?.get === 'function'\n            ? _headers\n            : new Headers(_headers || {})\n\n        const hasUnCacheableHeader =\n          initHeaders.get('authorization') || initHeaders.get('cookie')\n\n        const isUnCacheableMethod = !['get', 'head'].includes(\n          getRequestMeta('method')?.toLowerCase() || 'get'\n        )\n\n        /**\n         * We automatically disable fetch caching under the following conditions:\n         * - Fetch cache configs are not set. Specifically:\n         *    - A page fetch cache mode is not set (export const fetchCache=...)\n         *    - A fetch cache mode is not set in the fetch call (fetch(url, { cache: ... }))\n         *    - A fetch revalidate value is not set in the fetch call (fetch(url, { revalidate: ... }))\n         * - OR the fetch comes after a configuration that triggered dynamic rendering (e.g., reading cookies())\n         *   and the fetch was considered uncacheable (e.g., POST method or has authorization headers)\n         */\n        const autoNoCache =\n          // this condition is hit for null/undefined\n          // eslint-disable-next-line eqeqeq\n          (pageFetchCacheMode == undefined &&\n            // eslint-disable-next-line eqeqeq\n            currentFetchCacheConfig == undefined &&\n            // eslint-disable-next-line eqeqeq\n            currentFetchRevalidate == undefined) ||\n          ((hasUnCacheableHeader || isUnCacheableMethod) &&\n            staticGenerationStore.revalidate === 0)\n\n        switch (pageFetchCacheMode) {\n          case 'force-no-store': {\n            cacheReason = 'fetchCache = force-no-store'\n            break\n          }\n          case 'only-no-store': {\n            if (\n              currentFetchCacheConfig === 'force-cache' ||\n              (typeof finalRevalidate !== 'undefined' &&\n                (finalRevalidate === false || finalRevalidate > 0))\n            ) {\n              throw new Error(\n                `cache: 'force-cache' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-no-store'`\n              )\n            }\n            cacheReason = 'fetchCache = only-no-store'\n            break\n          }\n          case 'only-cache': {\n            if (currentFetchCacheConfig === 'no-store') {\n              throw new Error(\n                `cache: 'no-store' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-cache'`\n              )\n            }\n            break\n          }\n          case 'force-cache': {\n            if (\n              typeof currentFetchRevalidate === 'undefined' ||\n              currentFetchRevalidate === 0\n            ) {\n              cacheReason = 'fetchCache = force-cache'\n              finalRevalidate = false\n            }\n            break\n          }\n          default:\n          // sometimes we won't match the above cases. the reason we don't move\n          // everything to this switch is the use of autoNoCache which is not a fetchCacheMode\n          // I suspect this could be unified with fetchCacheMode however in which case we could\n          // simplify the switch case and ensure we have an exhaustive switch handling all modes\n        }\n\n        if (typeof finalRevalidate === 'undefined') {\n          if (pageFetchCacheMode === 'default-cache' && !isUsingNoStore) {\n            finalRevalidate = false\n            cacheReason = 'fetchCache = default-cache'\n          } else if (pageFetchCacheMode === 'default-no-store') {\n            finalRevalidate = 0\n            cacheReason = 'fetchCache = default-no-store'\n          } else if (isUsingNoStore) {\n            finalRevalidate = 0\n            cacheReason = 'noStore call'\n          } else if (autoNoCache) {\n            finalRevalidate = 0\n            cacheReason = 'auto no cache'\n          } else {\n            // TODO: should we consider this case an invariant?\n            cacheReason = 'auto cache'\n            finalRevalidate =\n              typeof staticGenerationStore.revalidate === 'boolean' ||\n              typeof staticGenerationStore.revalidate === 'undefined'\n                ? false\n                : staticGenerationStore.revalidate\n          }\n        } else if (!cacheReason) {\n          cacheReason = `revalidate: ${finalRevalidate}`\n        }\n\n        if (\n          // when force static is configured we don't bail from\n          // `revalidate: 0` values\n          !(staticGenerationStore.forceStatic && finalRevalidate === 0) &&\n          // we don't consider autoNoCache to switch to dynamic for ISR\n          !autoNoCache &&\n          // If the revalidate value isn't currently set or the value is less\n          // than the current revalidate value, we should update the revalidate\n          // value.\n          (typeof staticGenerationStore.revalidate === 'undefined' ||\n            (typeof finalRevalidate === 'number' &&\n              (staticGenerationStore.revalidate === false ||\n                (typeof staticGenerationStore.revalidate === 'number' &&\n                  finalRevalidate < staticGenerationStore.revalidate))))\n        ) {\n          // If we were setting the revalidate value to 0, we should try to\n          // postpone instead first.\n          if (finalRevalidate === 0) {\n            markCurrentScopeAsDynamic(\n              staticGenerationStore,\n              `revalidate: 0 fetch ${input} ${staticGenerationStore.route}`\n            )\n          }\n\n          staticGenerationStore.revalidate = finalRevalidate\n        }\n\n        const isCacheableRevalidate =\n          (typeof finalRevalidate === 'number' && finalRevalidate > 0) ||\n          finalRevalidate === false\n\n        let cacheKey: string | undefined\n\n        if (\n          staticGenerationStore.incrementalCache &&\n          (isCacheableRevalidate || requestStore?.serverComponentsHmrCache)\n        ) {\n          try {\n            cacheKey =\n              await staticGenerationStore.incrementalCache.generateCacheKey(\n                fetchUrl,\n                isRequestInput ? (input as RequestInit) : init\n              )\n          } catch (err) {\n            console.error(`Failed to generate cache key for`, input)\n          }\n        }\n\n        const fetchIdx = staticGenerationStore.nextFetchId ?? 1\n        staticGenerationStore.nextFetchId = fetchIdx + 1\n\n        const normalizedRevalidate =\n          typeof finalRevalidate !== 'number' ? CACHE_ONE_YEAR : finalRevalidate\n\n        const doOriginalFetch = async (\n          isStale?: boolean,\n          cacheReasonOverride?: string\n        ) => {\n          const requestInputFields = [\n            'cache',\n            'credentials',\n            'headers',\n            'integrity',\n            'keepalive',\n            'method',\n            'mode',\n            'redirect',\n            'referrer',\n            'referrerPolicy',\n            'window',\n            'duplex',\n\n            // don't pass through signal when revalidating\n            ...(isStale ? [] : ['signal']),\n          ]\n\n          if (isRequestInput) {\n            const reqInput: Request = input as any\n            const reqOptions: RequestInit = {\n              body: (reqInput as any)._ogBody || reqInput.body,\n            }\n\n            for (const field of requestInputFields) {\n              // @ts-expect-error custom fields\n              reqOptions[field] = reqInput[field]\n            }\n            input = new Request(reqInput.url, reqOptions)\n          } else if (init) {\n            const { _ogBody, body, signal, ...otherInput } =\n              init as RequestInit & { _ogBody?: any }\n            init = {\n              ...otherInput,\n              body: _ogBody || body,\n              signal: isStale ? undefined : signal,\n            }\n          }\n\n          // add metadata to init without editing the original\n          const clonedInit = {\n            ...init,\n            next: { ...init?.next, fetchType: 'origin', fetchIdx },\n          }\n\n          return originFetch(input, clonedInit).then(async (res) => {\n            if (!isStale) {\n              trackFetchMetric(staticGenerationStore, {\n                start: fetchStart,\n                url: fetchUrl,\n                cacheReason: cacheReasonOverride || cacheReason,\n                cacheStatus:\n                  finalRevalidate === 0 || cacheReasonOverride\n                    ? 'skip'\n                    : 'miss',\n                cacheWarning,\n                status: res.status,\n                method: clonedInit.method || 'GET',\n              })\n            }\n            if (\n              res.status === 200 &&\n              staticGenerationStore.incrementalCache &&\n              cacheKey &&\n              (isCacheableRevalidate || requestStore?.serverComponentsHmrCache)\n            ) {\n              const bodyBuffer = Buffer.from(await res.arrayBuffer())\n\n              const cachedFetchData = {\n                headers: Object.fromEntries(res.headers.entries()),\n                body: bodyBuffer.toString('base64'),\n                status: res.status,\n                url: res.url,\n              }\n\n              requestStore?.serverComponentsHmrCache?.set(\n                cacheKey,\n                cachedFetchData\n              )\n\n              if (isCacheableRevalidate) {\n                try {\n                  await staticGenerationStore.incrementalCache.set(\n                    cacheKey,\n                    {\n                      kind: 'FETCH',\n                      data: cachedFetchData,\n                      revalidate: normalizedRevalidate,\n                    },\n                    {\n                      fetchCache: true,\n                      revalidate: finalRevalidate,\n                      fetchUrl,\n                      fetchIdx,\n                      tags,\n                    }\n                  )\n                } catch (err) {\n                  console.warn(`Failed to set fetch cache`, input, err)\n                }\n              }\n\n              const response = new Response(bodyBuffer, {\n                headers: new Headers(res.headers),\n                status: res.status,\n              })\n              Object.defineProperty(response, 'url', { value: res.url })\n              return response\n            }\n            return res\n          })\n        }\n\n        let handleUnlock = () => Promise.resolve()\n        let cacheReasonOverride\n        let isForegroundRevalidate = false\n        let isHmrRefreshCache = false\n\n        if (cacheKey && staticGenerationStore.incrementalCache) {\n          let cachedFetchData: CachedFetchData | undefined\n\n          if (\n            requestStore?.isHmrRefresh &&\n            requestStore.serverComponentsHmrCache\n          ) {\n            cachedFetchData =\n              requestStore.serverComponentsHmrCache.get(cacheKey)\n\n            isHmrRefreshCache = true\n          }\n\n          if (isCacheableRevalidate && !cachedFetchData) {\n            handleUnlock =\n              await staticGenerationStore.incrementalCache.lock(cacheKey)\n\n            const entry = staticGenerationStore.isOnDemandRevalidate\n              ? null\n              : await staticGenerationStore.incrementalCache.get(cacheKey, {\n                  kindHint: 'fetch',\n                  revalidate: finalRevalidate,\n                  fetchUrl,\n                  fetchIdx,\n                  tags,\n                  softTags: implicitTags,\n                })\n\n            if (entry) {\n              await handleUnlock()\n            } else {\n              // in dev, incremental cache response will be null in case the browser adds `cache-control: no-cache` in the request headers\n              cacheReasonOverride = 'cache-control: no-cache (hard refresh)'\n            }\n\n            if (entry?.value && entry.value.kind === 'FETCH') {\n              // when stale and is revalidating we wait for fresh data\n              // so the revalidated entry has the updated data\n              if (staticGenerationStore.isRevalidate && entry.isStale) {\n                isForegroundRevalidate = true\n              } else {\n                if (entry.isStale) {\n                  staticGenerationStore.pendingRevalidates ??= {}\n                  if (!staticGenerationStore.pendingRevalidates[cacheKey]) {\n                    staticGenerationStore.pendingRevalidates[cacheKey] =\n                      doOriginalFetch(true)\n                        .catch(console.error)\n                        .finally(() => {\n                          staticGenerationStore.pendingRevalidates ??= {}\n                          delete staticGenerationStore.pendingRevalidates[\n                            cacheKey || ''\n                          ]\n                        })\n                  }\n                }\n\n                cachedFetchData = entry.value.data\n              }\n            }\n          }\n\n          if (cachedFetchData) {\n            trackFetchMetric(staticGenerationStore, {\n              start: fetchStart,\n              url: fetchUrl,\n              cacheReason,\n              cacheStatus: isHmrRefreshCache ? 'hmr' : 'hit',\n              cacheWarning,\n              status: cachedFetchData.status || 200,\n              method: init?.method || 'GET',\n            })\n\n            const response = new Response(\n              Buffer.from(cachedFetchData.body, 'base64'),\n              {\n                headers: cachedFetchData.headers,\n                status: cachedFetchData.status,\n              }\n            )\n\n            Object.defineProperty(response, 'url', {\n              value: cachedFetchData.url,\n            })\n\n            return response\n          }\n        }\n\n        if (\n          staticGenerationStore.isStaticGeneration &&\n          init &&\n          typeof init === 'object'\n        ) {\n          const { cache } = init\n\n          // Delete `cache` property as Cloudflare Workers will throw an error\n          if (isEdgeRuntime) delete init.cache\n\n          if (cache === 'no-store') {\n            // If enabled, we should bail out of static generation.\n            markCurrentScopeAsDynamic(\n              staticGenerationStore,\n              `no-store fetch ${input} ${staticGenerationStore.route}`\n            )\n          }\n\n          const hasNextConfig = 'next' in init\n          const { next = {} } = init\n          if (\n            typeof next.revalidate === 'number' &&\n            (typeof staticGenerationStore.revalidate === 'undefined' ||\n              (typeof staticGenerationStore.revalidate === 'number' &&\n                next.revalidate < staticGenerationStore.revalidate))\n          ) {\n            if (next.revalidate === 0) {\n              // If enabled, we should bail out of static generation.\n              markCurrentScopeAsDynamic(\n                staticGenerationStore,\n                `revalidate: 0 fetch ${input} ${staticGenerationStore.route}`\n              )\n            }\n\n            if (!staticGenerationStore.forceStatic || next.revalidate !== 0) {\n              staticGenerationStore.revalidate = next.revalidate\n            }\n          }\n          if (hasNextConfig) delete init.next\n        }\n\n        // if we are revalidating the whole page via time or on-demand and\n        // the fetch cache entry is stale we should still de-dupe the\n        // origin hit if it's a cache-able entry\n        if (cacheKey && isForegroundRevalidate) {\n          staticGenerationStore.pendingRevalidates ??= {}\n          const pendingRevalidate =\n            staticGenerationStore.pendingRevalidates[cacheKey]\n\n          if (pendingRevalidate) {\n            const res: Response = await pendingRevalidate\n            return res.clone()\n          }\n          return (staticGenerationStore.pendingRevalidates[cacheKey] =\n            doOriginalFetch(true, cacheReasonOverride).finally(async () => {\n              staticGenerationStore.pendingRevalidates ??= {}\n              delete staticGenerationStore.pendingRevalidates[cacheKey || '']\n              await handleUnlock()\n            }))\n        } else {\n          return doOriginalFetch(false, cacheReasonOverride).finally(\n            handleUnlock\n          )\n        }\n      }\n    )\n  }\n\n  // Attach the necessary properties to the patched fetch function.\n  patched.__nextPatched = true as const\n  patched.__nextGetStaticStore = () => staticGenerationAsyncStorage\n  patched._nextOriginalFetch = originFetch\n\n  return patched\n}\n\n// we patch fetch to collect cache information used for\n// determining if a page is static or not\nexport function patchFetch(options: PatchableModule) {\n  // If we've already patched fetch, we should not patch it again.\n  if (isPatchedFetch(globalThis.fetch)) return\n\n  // Grab the original fetch function. We'll attach this so we can use it in\n  // the patched fetch function.\n  const original = createDedupeFetch(globalThis.fetch)\n\n  // Set the global fetch to the patched fetch.\n  globalThis.fetch = createPatchedFetcher(original, options)\n}\n"],"names":["AppRenderSpan","NextNodeServerSpan","getTracer","SpanKind","CACHE_ONE_YEAR","NEXT_CACHE_IMPLICIT_TAG_ID","NEXT_CACHE_TAG_MAX_ITEMS","NEXT_CACHE_TAG_MAX_LENGTH","markCurrentScopeAsDynamic","createDedupeFetch","isEdgeRuntime","process","env","NEXT_RUNTIME","isPatchedFetch","fetch","__nextPatched","validateRevalidate","revalidateVal","route","normalizedRevalidate","undefined","isNaN","Error","err","message","includes","validateTags","tags","description","validTags","invalidTags","i","length","tag","push","reason","console","warn","slice","join","log","getDerivedTags","pathname","derivedTags","startsWith","pathnameParts","split","curPathname","endsWith","addImplicitTags","staticGenerationStore","requestStore","newTags","page","url","trackFetchMetric","ctx","requestEndedState","ended","NODE_ENV","fetchMetrics","end","Date","now","idx","nextFetchId","createPatchedFetcher","originFetch","staticGenerationAsyncStorage","requestAsyncStorage","patched","input","init","URL","Request","username","password","fetchUrl","href","fetchStart","method","toUpperCase","isInternal","next","internal","hideSpan","NEXT_OTEL_FETCH_DISABLED","trace","internalFetch","kind","CLIENT","spanName","filter","Boolean","attributes","hostname","port","getRequestMeta","getStore","isDraftMode","isRequestInput","field","value","finalRevalidate","getNextField","currentFetchRevalidate","toString","Array","isArray","implicitTags","pageFetchCacheMode","fetchCache","isUsingNoStore","isUnstableNoStore","currentFetchCacheConfig","cacheReason","cacheWarning","forceDynamic","_headers","initHeaders","get","Headers","hasUnCacheableHeader","isUnCacheableMethod","toLowerCase","autoNoCache","revalidate","forceStatic","isCacheableRevalidate","cacheKey","incrementalCache","serverComponentsHmrCache","generateCacheKey","error","fetchIdx","doOriginalFetch","isStale","cacheReasonOverride","requestInputFields","reqInput","reqOptions","body","_ogBody","signal","otherInput","clonedInit","fetchType","then","res","start","cacheStatus","status","bodyBuffer","Buffer","from","arrayBuffer","cachedFetchData","headers","Object","fromEntries","entries","set","data","response","Response","defineProperty","handleUnlock","Promise","resolve","isForegroundRevalidate","isHmrRefreshCache","isHmrRefresh","lock","entry","isOnDemandRevalidate","kindHint","softTags","isRevalidate","pendingRevalidates","catch","finally","isStaticGeneration","cache","hasNextConfig","pendingRevalidate","clone","__nextGetStaticStore","_nextOriginalFetch","patchFetch","options","globalThis","original"],"mappings":"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"}