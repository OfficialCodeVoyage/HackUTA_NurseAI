{"version":3,"sources":["../../src/server/require.ts"],"sourcesContent":["import path from 'path'\nimport {\n  AUTOMATIC_FONT_OPTIMIZATION_MANIFEST,\n  PAGES_MANIFEST,\n  SERVER_DIRECTORY,\n  APP_PATHS_MANIFEST,\n} from '../shared/lib/constants'\nimport { normalizeLocalePath } from '../shared/lib/i18n/normalize-locale-path'\nimport { normalizePagePath } from '../shared/lib/page-path/normalize-page-path'\nimport { denormalizePagePath } from '../shared/lib/page-path/denormalize-page-path'\nimport type { PagesManifest } from '../build/webpack/plugins/pages-manifest-plugin'\nimport { PageNotFoundError, MissingStaticPage } from '../shared/lib/utils'\nimport LRUCache from 'next/dist/compiled/lru-cache'\nimport { loadManifest } from './load-manifest'\nimport { promises } from 'fs'\nimport type { FontManifest } from './font-utils'\n\nconst isDev = process.env.NODE_ENV === 'development'\nconst pagePathCache = !isDev\n  ? new LRUCache<string, string | null>({\n      max: 1000,\n    })\n  : null\n\nexport function getMaybePagePath(\n  page: string,\n  distDir: string,\n  locales: string[] | undefined,\n  isAppPath: boolean\n): string | null {\n  const cacheKey = `${page}:${distDir}:${locales}:${isAppPath}`\n\n  let pagePath = pagePathCache?.get(cacheKey)\n\n  // If we have a cached path, we can return it directly.\n  if (pagePath) return pagePath\n\n  const serverBuildPath = path.join(distDir, SERVER_DIRECTORY)\n  let appPathsManifest: undefined | PagesManifest\n\n  if (isAppPath) {\n    appPathsManifest = loadManifest(\n      path.join(serverBuildPath, APP_PATHS_MANIFEST),\n      !isDev\n    ) as PagesManifest\n  }\n  const pagesManifest = loadManifest(\n    path.join(serverBuildPath, PAGES_MANIFEST),\n    !isDev\n  ) as PagesManifest\n\n  try {\n    page = denormalizePagePath(normalizePagePath(page))\n  } catch (err) {\n    console.error(err)\n    throw new PageNotFoundError(page)\n  }\n\n  const checkManifest = (manifest: PagesManifest) => {\n    let curPath = manifest[page]\n\n    if (!manifest[curPath] && locales) {\n      const manifestNoLocales: typeof pagesManifest = {}\n\n      for (const key of Object.keys(manifest)) {\n        manifestNoLocales[normalizeLocalePath(key, locales).pathname] =\n          pagesManifest[key]\n      }\n      curPath = manifestNoLocales[page]\n    }\n    return curPath\n  }\n\n  if (appPathsManifest) {\n    pagePath = checkManifest(appPathsManifest)\n  }\n\n  if (!pagePath) {\n    pagePath = checkManifest(pagesManifest)\n  }\n\n  if (!pagePath) {\n    pagePathCache?.set(cacheKey, null)\n    return null\n  }\n\n  pagePath = path.join(serverBuildPath, pagePath)\n\n  pagePathCache?.set(cacheKey, pagePath)\n  return pagePath\n}\n\nexport function getPagePath(\n  page: string,\n  distDir: string,\n  locales: string[] | undefined,\n  isAppPath: boolean\n): string {\n  const pagePath = getMaybePagePath(page, distDir, locales, isAppPath)\n\n  if (!pagePath) {\n    throw new PageNotFoundError(page)\n  }\n\n  return pagePath\n}\n\nexport async function requirePage(\n  page: string,\n  distDir: string,\n  isAppPath: boolean\n): Promise<any> {\n  const pagePath = getPagePath(page, distDir, undefined, isAppPath)\n  if (pagePath.endsWith('.html')) {\n    return promises.readFile(pagePath, 'utf8').catch((err) => {\n      throw new MissingStaticPage(page, err.message)\n    })\n  }\n\n  // since require is synchronous we can set the specific runtime\n  // we are requiring for the require-hook and then clear after\n  try {\n    process.env.__NEXT_PRIVATE_RUNTIME_TYPE = isAppPath ? 'app' : 'pages'\n    const mod = process.env.NEXT_MINIMAL\n      ? // @ts-ignore\n        __non_webpack_require__(pagePath)\n      : require(pagePath)\n    return mod\n  } finally {\n    process.env.__NEXT_PRIVATE_RUNTIME_TYPE = ''\n  }\n}\n\nexport function requireFontManifest(distDir: string) {\n  const serverBuildPath = path.join(distDir, SERVER_DIRECTORY)\n  const fontManifest = loadManifest(\n    path.join(serverBuildPath, AUTOMATIC_FONT_OPTIMIZATION_MANIFEST)\n  ) as FontManifest\n  return fontManifest\n}\n"],"names":["path","AUTOMATIC_FONT_OPTIMIZATION_MANIFEST","PAGES_MANIFEST","SERVER_DIRECTORY","APP_PATHS_MANIFEST","normalizeLocalePath","normalizePagePath","denormalizePagePath","PageNotFoundError","MissingStaticPage","LRUCache","loadManifest","promises","isDev","process","env","NODE_ENV","pagePathCache","max","getMaybePagePath","page","distDir","locales","isAppPath","cacheKey","pagePath","get","serverBuildPath","join","appPathsManifest","pagesManifest","err","console","error","checkManifest","manifest","curPath","manifestNoLocales","key","Object","keys","pathname","set","getPagePath","requirePage","undefined","endsWith","readFile","catch","message","__NEXT_PRIVATE_RUNTIME_TYPE","mod","NEXT_MINIMAL","__non_webpack_require__","require","requireFontManifest","fontManifest"],"mappings":"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"}