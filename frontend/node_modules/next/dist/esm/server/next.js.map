{"version":3,"sources":["../../src/server/next.ts"],"sourcesContent":["import type { Options as DevServerOptions } from './dev/next-dev-server'\nimport type {\n  NodeRequestHandler,\n  Options as ServerOptions,\n} from './next-server'\nimport type { UrlWithParsedQuery } from 'url'\nimport type { NextConfigComplete } from './config-shared'\nimport type { IncomingMessage, ServerResponse } from 'http'\nimport type { NextUrlWithParsedQuery } from './request-meta'\nimport type { WorkerRequestHandler, WorkerUpgradeHandler } from './lib/types'\n\nimport './require-hook'\nimport './node-polyfill-crypto'\n\nimport type { default as Server } from './next-server'\nimport * as log from '../build/output/log'\nimport loadConfig from './config'\nimport path, { resolve } from 'path'\nimport { NON_STANDARD_NODE_ENV } from '../lib/constants'\nimport {\n  PHASE_DEVELOPMENT_SERVER,\n  SERVER_FILES_MANIFEST,\n} from '../shared/lib/constants'\nimport { PHASE_PRODUCTION_SERVER } from '../shared/lib/constants'\nimport { getTracer } from './lib/trace/tracer'\nimport { NextServerSpan } from './lib/trace/constants'\nimport { formatUrl } from '../shared/lib/router/utils/format-url'\nimport type { ServerFields } from './lib/router-utils/setup-dev-bundler'\n\nlet ServerImpl: typeof Server\n\nconst getServerImpl = async () => {\n  if (ServerImpl === undefined) {\n    ServerImpl = (await Promise.resolve(require('./next-server'))).default\n  }\n  return ServerImpl\n}\n\nexport type NextServerOptions = Omit<\n  ServerOptions | DevServerOptions,\n  // This is assigned in this server abstraction.\n  'conf'\n> &\n  Partial<Pick<ServerOptions | DevServerOptions, 'conf'>> & {\n    preloadedConfig?: NextConfigComplete\n    internal_setStandaloneConfig?: boolean\n  }\n\nexport interface RequestHandler {\n  (\n    req: IncomingMessage,\n    res: ServerResponse,\n    parsedUrl?: NextUrlWithParsedQuery | undefined\n  ): Promise<void>\n}\n\nconst SYMBOL_LOAD_CONFIG = Symbol('next.load_config')\n\nexport class NextServer {\n  private serverPromise?: Promise<Server>\n  private server?: Server\n  private reqHandler?: NodeRequestHandler\n  private reqHandlerPromise?: Promise<NodeRequestHandler>\n  private preparedAssetPrefix?: string\n\n  protected cleanupListeners: (() => Promise<void>)[] = []\n  protected standaloneMode?: boolean\n\n  public options: NextServerOptions\n\n  constructor(options: NextServerOptions) {\n    this.options = options\n  }\n\n  get hostname() {\n    return this.options.hostname\n  }\n\n  get port() {\n    return this.options.port\n  }\n\n  getRequestHandler(): RequestHandler {\n    return async (\n      req: IncomingMessage,\n      res: ServerResponse,\n      parsedUrl?: UrlWithParsedQuery\n    ) => {\n      return getTracer().trace(NextServerSpan.getRequestHandler, async () => {\n        const requestHandler = await this.getServerRequestHandler()\n        return requestHandler(req, res, parsedUrl)\n      })\n    }\n  }\n\n  getUpgradeHandler() {\n    return async (req: IncomingMessage, socket: any, head: any) => {\n      const server = await this.getServer()\n      // @ts-expect-error we mark this as protected so it\n      // causes an error here\n      return server.handleUpgrade.apply(server, [req, socket, head])\n    }\n  }\n\n  setAssetPrefix(assetPrefix: string) {\n    if (this.server) {\n      this.server.setAssetPrefix(assetPrefix)\n    } else {\n      this.preparedAssetPrefix = assetPrefix\n    }\n  }\n\n  logError(...args: Parameters<Server['logError']>) {\n    if (this.server) {\n      this.server.logError(...args)\n    }\n  }\n\n  async render(...args: Parameters<Server['render']>) {\n    const server = await this.getServer()\n    return server.render(...args)\n  }\n\n  async renderToHTML(...args: Parameters<Server['renderToHTML']>) {\n    const server = await this.getServer()\n    return server.renderToHTML(...args)\n  }\n\n  async renderError(...args: Parameters<Server['renderError']>) {\n    const server = await this.getServer()\n    return server.renderError(...args)\n  }\n\n  async renderErrorToHTML(...args: Parameters<Server['renderErrorToHTML']>) {\n    const server = await this.getServer()\n    return server.renderErrorToHTML(...args)\n  }\n\n  async render404(...args: Parameters<Server['render404']>) {\n    const server = await this.getServer()\n    return server.render404(...args)\n  }\n\n  async prepare(serverFields?: ServerFields) {\n    if (this.standaloneMode) return\n\n    const server = await this.getServer()\n\n    if (serverFields) {\n      Object.assign(server, serverFields)\n    }\n    // We shouldn't prepare the server in production,\n    // because this code won't be executed when deployed\n    if (this.options.dev) {\n      await server.prepare()\n    }\n  }\n\n  async close() {\n    await Promise.all(\n      [\n        async () => {\n          const server = await this.getServer()\n          await (server as any).close()\n        },\n        ...this.cleanupListeners,\n      ].map((f) => f())\n    )\n  }\n\n  private async createServer(\n    options: ServerOptions | DevServerOptions\n  ): Promise<Server> {\n    let ServerImplementation: typeof Server\n    if (options.dev) {\n      ServerImplementation = require('./dev/next-dev-server').default\n    } else {\n      ServerImplementation = await getServerImpl()\n    }\n    const server = new ServerImplementation(options)\n\n    return server\n  }\n\n  private async [SYMBOL_LOAD_CONFIG]() {\n    const dir = resolve(this.options.dir || '.')\n\n    const config =\n      this.options.preloadedConfig ||\n      (await loadConfig(\n        this.options.dev ? PHASE_DEVELOPMENT_SERVER : PHASE_PRODUCTION_SERVER,\n        dir,\n        {\n          customConfig: this.options.conf,\n          silent: true,\n        }\n      ))\n\n    // check serialized build config when available\n    if (process.env.NODE_ENV === 'production') {\n      try {\n        const serializedConfig = require(\n          path.join(dir, '.next', SERVER_FILES_MANIFEST)\n        ).config\n\n        // @ts-expect-error internal field\n        config.experimental.isExperimentalCompile =\n          serializedConfig.experimental.isExperimentalCompile\n      } catch (_) {\n        // if distDir is customized we don't know until we\n        // load the config so fallback to loading the config\n        // from next.config.js\n      }\n    }\n\n    return config\n  }\n\n  private async getServer() {\n    if (!this.serverPromise) {\n      this.serverPromise = this[SYMBOL_LOAD_CONFIG]().then(async (conf) => {\n        if (this.standaloneMode) {\n          process.env.__NEXT_PRIVATE_STANDALONE_CONFIG = JSON.stringify(conf)\n        }\n\n        if (!this.options.dev) {\n          if (conf.output === 'standalone') {\n            if (!process.env.__NEXT_PRIVATE_STANDALONE_CONFIG) {\n              log.warn(\n                `\"next start\" does not work with \"output: standalone\" configuration. Use \"node .next/standalone/server.js\" instead.`\n              )\n            }\n          } else if (conf.output === 'export') {\n            throw new Error(\n              `\"next start\" does not work with \"output: export\" configuration. Use \"npx serve@latest out\" instead.`\n            )\n          }\n        }\n\n        this.server = await this.createServer({\n          ...this.options,\n          conf,\n        })\n        if (this.preparedAssetPrefix) {\n          this.server.setAssetPrefix(this.preparedAssetPrefix)\n        }\n        return this.server\n      })\n    }\n    return this.serverPromise\n  }\n\n  private async getServerRequestHandler() {\n    if (this.reqHandler) return this.reqHandler\n\n    // Memoize request handler creation\n    if (!this.reqHandlerPromise) {\n      this.reqHandlerPromise = this.getServer().then((server) => {\n        this.reqHandler = getTracer().wrap(\n          NextServerSpan.getServerRequestHandler,\n          server.getRequestHandler().bind(server)\n        )\n        delete this.reqHandlerPromise\n        return this.reqHandler\n      })\n    }\n    return this.reqHandlerPromise\n  }\n}\n\nclass NextCustomServer extends NextServer {\n  protected standaloneMode = true\n  private didWebSocketSetup: boolean = false\n\n  // @ts-expect-error These are initialized in prepare()\n  protected requestHandler: WorkerRequestHandler\n  // @ts-expect-error These are initialized in prepare()\n  protected upgradeHandler: WorkerUpgradeHandler\n  // @ts-expect-error These are initialized in prepare()\n  protected renderServer: NextServer\n\n  async prepare() {\n    const { getRequestHandlers } =\n      require('./lib/start-server') as typeof import('./lib/start-server')\n\n    const initResult = await getRequestHandlers({\n      dir: this.options.dir!,\n      port: this.options.port || 3000,\n      isDev: !!this.options.dev,\n      onCleanup: (listener) => this.cleanupListeners.push(listener),\n      hostname: this.options.hostname || 'localhost',\n      minimalMode: this.options.minimalMode,\n      quiet: this.options.quiet,\n    })\n    this.requestHandler = initResult[0]\n    this.upgradeHandler = initResult[1]\n    this.renderServer = initResult[2]\n  }\n\n  private setupWebSocketHandler(\n    customServer?: import('http').Server,\n    _req?: IncomingMessage\n  ) {\n    if (!this.didWebSocketSetup) {\n      this.didWebSocketSetup = true\n      customServer = customServer || (_req?.socket as any)?.server\n\n      if (customServer) {\n        customServer.on('upgrade', async (req, socket, head) => {\n          this.upgradeHandler(req, socket, head)\n        })\n      }\n    }\n  }\n\n  getRequestHandler() {\n    return async (\n      req: IncomingMessage,\n      res: ServerResponse,\n      parsedUrl?: UrlWithParsedQuery\n    ) => {\n      this.setupWebSocketHandler(this.options.httpServer, req)\n\n      if (parsedUrl) {\n        req.url = formatUrl(parsedUrl)\n      }\n\n      return this.requestHandler(req, res)\n    }\n  }\n\n  async render(...args: Parameters<Server['render']>) {\n    let [req, res, pathname, query, parsedUrl] = args\n    this.setupWebSocketHandler(this.options.httpServer, req as any)\n\n    if (!pathname.startsWith('/')) {\n      console.error(`Cannot render page with path \"${pathname}\"`)\n      pathname = `/${pathname}`\n    }\n    pathname = pathname === '/index' ? '/' : pathname\n\n    req.url = formatUrl({\n      ...parsedUrl,\n      pathname,\n      query,\n    })\n\n    await this.requestHandler(req as any, res as any)\n    return\n  }\n\n  setAssetPrefix(assetPrefix: string): void {\n    super.setAssetPrefix(assetPrefix)\n    this.renderServer.setAssetPrefix(assetPrefix)\n  }\n}\n\n// This file is used for when users run `require('next')`\nfunction createServer(options: NextServerOptions): NextServer {\n  // The package is used as a TypeScript plugin.\n  if (\n    options &&\n    'typescript' in options &&\n    'version' in (options as any).typescript\n  ) {\n    return require('./next-typescript').createTSPlugin(options)\n  }\n\n  if (options == null) {\n    throw new Error(\n      'The server has not been instantiated properly. https://nextjs.org/docs/messages/invalid-server-options'\n    )\n  }\n\n  if (\n    !('isNextDevCommand' in options) &&\n    process.env.NODE_ENV &&\n    !['production', 'development', 'test'].includes(process.env.NODE_ENV)\n  ) {\n    log.warn(NON_STANDARD_NODE_ENV)\n  }\n\n  if (options.dev && typeof options.dev !== 'boolean') {\n    console.warn(\n      \"Warning: 'dev' is not a boolean which could introduce unexpected behavior. https://nextjs.org/docs/messages/invalid-server-options\"\n    )\n  }\n\n  // When the caller is a custom server (using next()).\n  if (options.customServer !== false) {\n    const dir = resolve(options.dir || '.')\n\n    return new NextCustomServer({\n      ...options,\n      dir,\n    })\n  }\n\n  // When the caller is Next.js internals (i.e. render worker, start server, etc)\n  return new NextServer(options)\n}\n\n// Support commonjs `require('next')`\nmodule.exports = createServer\n// exports = module.exports\n\n// Support `import next from 'next'`\nexport default createServer\n"],"names":["log","loadConfig","path","resolve","NON_STANDARD_NODE_ENV","PHASE_DEVELOPMENT_SERVER","SERVER_FILES_MANIFEST","PHASE_PRODUCTION_SERVER","getTracer","NextServerSpan","formatUrl","ServerImpl","getServerImpl","undefined","Promise","require","default","SYMBOL_LOAD_CONFIG","Symbol","NextServer","constructor","options","cleanupListeners","hostname","port","getRequestHandler","req","res","parsedUrl","trace","requestHandler","getServerRequestHandler","getUpgradeHandler","socket","head","server","getServer","handleUpgrade","apply","setAssetPrefix","assetPrefix","preparedAssetPrefix","logError","args","render","renderToHTML","renderError","renderErrorToHTML","render404","prepare","serverFields","standaloneMode","Object","assign","dev","close","all","map","f","createServer","ServerImplementation","dir","config","preloadedConfig","customConfig","conf","silent","process","env","NODE_ENV","serializedConfig","join","experimental","isExperimentalCompile","_","serverPromise","then","__NEXT_PRIVATE_STANDALONE_CONFIG","JSON","stringify","output","warn","Error","reqHandler","reqHandlerPromise","wrap","bind","NextCustomServer","getRequestHandlers","initResult","isDev","onCleanup","listener","push","minimalMode","quiet","upgradeHandler","renderServer","setupWebSocketHandler","customServer","_req","didWebSocketSetup","on","httpServer","url","pathname","query","startsWith","console","error","typescript","createTSPlugin","includes","module","exports"],"mappings":"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"}