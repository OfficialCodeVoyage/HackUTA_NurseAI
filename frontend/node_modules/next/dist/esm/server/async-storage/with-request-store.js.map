{"version":3,"sources":["../../../src/server/async-storage/with-request-store.ts"],"sourcesContent":["import type { BaseNextRequest, BaseNextResponse } from '../base-http'\nimport type { IncomingHttpHeaders, IncomingMessage, ServerResponse } from 'http'\nimport type { AsyncLocalStorage } from 'async_hooks'\nimport type { RequestStore } from '../../client/components/request-async-storage.external'\nimport type { RenderOpts } from '../app-render/types'\nimport type { WithStore } from './with-store'\nimport type { NextRequest } from '../web/spec-extension/request'\nimport type { __ApiPreviewProps } from '../api-utils'\n\nimport { FLIGHT_HEADERS } from '../../client/components/app-router-headers'\nimport {\n  HeadersAdapter,\n  type ReadonlyHeaders,\n} from '../web/spec-extension/adapters/headers'\nimport {\n  MutableRequestCookiesAdapter,\n  RequestCookiesAdapter,\n  type ReadonlyRequestCookies,\n} from '../web/spec-extension/adapters/request-cookies'\nimport { ResponseCookies, RequestCookies } from '../web/spec-extension/cookies'\nimport { DraftModeProvider } from './draft-mode-provider'\nimport { splitCookiesString } from '../web/utils'\nimport { AfterContext } from '../after/after-context'\nimport type { RequestLifecycleOpts } from '../base-server'\nimport type { ServerComponentsHmrCache } from '../response-cache'\n\nfunction getHeaders(headers: Headers | IncomingHttpHeaders): ReadonlyHeaders {\n  const cleaned = HeadersAdapter.from(headers)\n  for (const header of FLIGHT_HEADERS) {\n    cleaned.delete(header.toLowerCase())\n  }\n\n  return HeadersAdapter.seal(cleaned)\n}\n\nfunction getMutableCookies(\n  headers: Headers | IncomingHttpHeaders,\n  onUpdateCookies?: (cookies: string[]) => void\n): ResponseCookies {\n  const cookies = new RequestCookies(HeadersAdapter.from(headers))\n  return MutableRequestCookiesAdapter.wrap(cookies, onUpdateCookies)\n}\n\nexport type WrapperRenderOpts = RequestLifecycleOpts &\n  Partial<\n    Pick<\n      RenderOpts,\n      | 'ComponentMod'\n      | 'onUpdateCookies'\n      | 'assetPrefix'\n      | 'reactLoadableManifest'\n    >\n  > & {\n    experimental: Pick<RenderOpts['experimental'], 'after'>\n    previewProps?: __ApiPreviewProps\n  }\n\nexport type RequestContext = {\n  req: IncomingMessage | BaseNextRequest | NextRequest\n  /**\n   * The URL of the request. This only specifies the pathname and the search\n   * part of the URL. This is only undefined when generating static paths (ie,\n   * there is no request in progress, nor do we know one).\n   */\n  url: {\n    /**\n     * The pathname of the requested URL.\n     */\n    pathname: string\n\n    /**\n     * The search part of the requested URL. If the request did not provide a\n     * search part, this will be an empty string.\n     */\n    search?: string\n  }\n  res?: ServerResponse | BaseNextResponse\n  renderOpts?: WrapperRenderOpts\n  isHmrRefresh?: boolean\n  serverComponentsHmrCache?: ServerComponentsHmrCache\n}\n\n/**\n * If middleware set cookies in this request (indicated by `x-middleware-set-cookie`),\n * then merge those into the existing cookie object, so that when `cookies()` is accessed\n * it's able to read the newly set cookies.\n */\nfunction mergeMiddlewareCookies(\n  req: RequestContext['req'],\n  existingCookies: RequestCookies | ResponseCookies\n) {\n  if (\n    'x-middleware-set-cookie' in req.headers &&\n    typeof req.headers['x-middleware-set-cookie'] === 'string'\n  ) {\n    const setCookieValue = req.headers['x-middleware-set-cookie']\n    const responseHeaders = new Headers()\n\n    for (const cookie of splitCookiesString(setCookieValue)) {\n      responseHeaders.append('set-cookie', cookie)\n    }\n\n    const responseCookies = new ResponseCookies(responseHeaders)\n\n    // Transfer cookies from ResponseCookies to RequestCookies\n    for (const cookie of responseCookies.getAll()) {\n      existingCookies.set(cookie)\n    }\n  }\n}\n\nexport const withRequestStore: WithStore<RequestStore, RequestContext> = <\n  Result,\n>(\n  storage: AsyncLocalStorage<RequestStore>,\n  {\n    req,\n    url,\n    res,\n    renderOpts,\n    isHmrRefresh,\n    serverComponentsHmrCache,\n  }: RequestContext,\n  callback: (store: RequestStore) => Result\n): Result => {\n  function defaultOnUpdateCookies(cookies: string[]) {\n    if (res) {\n      res.setHeader('Set-Cookie', cookies)\n    }\n  }\n\n  const cache: {\n    headers?: ReadonlyHeaders\n    cookies?: ReadonlyRequestCookies\n    mutableCookies?: ResponseCookies\n    draftMode?: DraftModeProvider\n  } = {}\n\n  const store: RequestStore = {\n    // Rather than just using the whole `url` here, we pull the parts we want\n    // to ensure we don't use parts of the URL that we shouldn't. This also\n    // lets us avoid requiring an empty string for `search` in the type.\n    url: { pathname: url.pathname, search: url.search ?? '' },\n    get headers() {\n      if (!cache.headers) {\n        // Seal the headers object that'll freeze out any methods that could\n        // mutate the underlying data.\n        cache.headers = getHeaders(req.headers)\n      }\n\n      return cache.headers\n    },\n    get cookies() {\n      if (!cache.cookies) {\n        // if middleware is setting cookie(s), then include those in\n        // the initial cached cookies so they can be read in render\n        const requestCookies = new RequestCookies(\n          HeadersAdapter.from(req.headers)\n        )\n\n        mergeMiddlewareCookies(req, requestCookies)\n\n        // Seal the cookies object that'll freeze out any methods that could\n        // mutate the underlying data.\n        cache.cookies = RequestCookiesAdapter.seal(requestCookies)\n      }\n\n      return cache.cookies\n    },\n    get mutableCookies() {\n      if (!cache.mutableCookies) {\n        const mutableCookies = getMutableCookies(\n          req.headers,\n          renderOpts?.onUpdateCookies ||\n            (res ? defaultOnUpdateCookies : undefined)\n        )\n\n        mergeMiddlewareCookies(req, mutableCookies)\n\n        cache.mutableCookies = mutableCookies\n      }\n      return cache.mutableCookies\n    },\n    get draftMode() {\n      if (!cache.draftMode) {\n        cache.draftMode = new DraftModeProvider(\n          renderOpts?.previewProps,\n          req,\n          this.cookies,\n          this.mutableCookies\n        )\n      }\n\n      return cache.draftMode\n    },\n\n    reactLoadableManifest: renderOpts?.reactLoadableManifest || {},\n    assetPrefix: renderOpts?.assetPrefix || '',\n    afterContext: createAfterContext(renderOpts),\n    isHmrRefresh,\n    serverComponentsHmrCache:\n      serverComponentsHmrCache ||\n      (globalThis as any).__serverComponentsHmrCache,\n  }\n\n  if (store.afterContext) {\n    return store.afterContext.run(store, () =>\n      storage.run(store, callback, store)\n    )\n  }\n\n  return storage.run(store, callback, store)\n}\n\nfunction createAfterContext(\n  renderOpts: WrapperRenderOpts | undefined\n): AfterContext | undefined {\n  if (!isAfterEnabled(renderOpts)) {\n    return undefined\n  }\n\n  const { waitUntil, onClose, ComponentMod } = renderOpts\n  const cacheScope = ComponentMod?.createCacheScope()\n\n  return new AfterContext({ waitUntil, onClose, cacheScope })\n}\n\nfunction isAfterEnabled(\n  renderOpts: WrapperRenderOpts | undefined\n): renderOpts is WrapperRenderOpts {\n  return renderOpts?.experimental?.after ?? false\n}\n"],"names":["FLIGHT_HEADERS","HeadersAdapter","MutableRequestCookiesAdapter","RequestCookiesAdapter","ResponseCookies","RequestCookies","DraftModeProvider","splitCookiesString","AfterContext","getHeaders","headers","cleaned","from","header","delete","toLowerCase","seal","getMutableCookies","onUpdateCookies","cookies","wrap","mergeMiddlewareCookies","req","existingCookies","setCookieValue","responseHeaders","Headers","cookie","append","responseCookies","getAll","set","withRequestStore","storage","url","res","renderOpts","isHmrRefresh","serverComponentsHmrCache","callback","defaultOnUpdateCookies","setHeader","cache","store","pathname","search","requestCookies","mutableCookies","undefined","draftMode","previewProps","reactLoadableManifest","assetPrefix","afterContext","createAfterContext","globalThis","__serverComponentsHmrCache","run","isAfterEnabled","waitUntil","onClose","ComponentMod","cacheScope","createCacheScope","experimental","after"],"mappings":"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"}