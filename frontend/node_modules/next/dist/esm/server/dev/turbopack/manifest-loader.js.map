{"version":3,"sources":["../../../../src/server/dev/turbopack/manifest-loader.ts"],"sourcesContent":["import type {\n  EdgeFunctionDefinition,\n  MiddlewareManifest,\n} from '../../../build/webpack/plugins/middleware-plugin'\nimport type { BuildManifest } from '../../get-page-files'\nimport type { AppBuildManifest } from '../../../build/webpack/plugins/app-build-manifest-plugin'\nimport type { PagesManifest } from '../../../build/webpack/plugins/pages-manifest-plugin'\nimport { pathToRegexp } from 'next/dist/compiled/path-to-regexp'\nimport type { ActionManifest } from '../../../build/webpack/plugins/flight-client-entry-plugin'\nimport type { NextFontManifest } from '../../../build/webpack/plugins/next-font-manifest-plugin'\nimport type { LoadableManifest } from '../../load-components'\nimport {\n  APP_BUILD_MANIFEST,\n  APP_PATHS_MANIFEST,\n  AUTOMATIC_FONT_OPTIMIZATION_MANIFEST,\n  BUILD_MANIFEST,\n  INTERCEPTION_ROUTE_REWRITE_MANIFEST,\n  MIDDLEWARE_BUILD_MANIFEST,\n  MIDDLEWARE_MANIFEST,\n  MIDDLEWARE_REACT_LOADABLE_MANIFEST,\n  NEXT_FONT_MANIFEST,\n  PAGES_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n  TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST,\n} from '../../../shared/lib/constants'\nimport { join, posix } from 'path'\nimport { readFile, writeFile } from 'fs/promises'\nimport type { SetupOpts } from '../../lib/router-utils/setup-dev-bundler'\nimport { deleteCache } from '../../../build/webpack/plugins/nextjs-require-cache-hot-reloader'\nimport { writeFileAtomic } from '../../../lib/fs/write-atomic'\nimport { isInterceptionRouteRewrite } from '../../../lib/generate-interception-routes-rewrites'\nimport {\n  type ClientBuildManifest,\n  normalizeRewritesForBuildManifest,\n  srcEmptySsgManifest,\n  processRoute,\n} from '../../../build/webpack/plugins/build-manifest-plugin'\nimport type { Entrypoints } from './types'\nimport getAssetPathFromRoute from '../../../shared/lib/router/utils/get-asset-path-from-route'\nimport { getEntryKey, type EntryKey } from './entry-key'\nimport type { CustomRoutes } from '../../../lib/load-custom-routes'\nimport { getSortedRoutes } from '../../../shared/lib/router/utils'\n\ninterface InstrumentationDefinition {\n  files: string[]\n  name: 'instrumentation'\n}\n\ntype TurbopackMiddlewareManifest = MiddlewareManifest & {\n  instrumentation?: InstrumentationDefinition\n}\n\nasync function readPartialManifest<T>(\n  distDir: string,\n  name:\n    | typeof MIDDLEWARE_MANIFEST\n    | typeof BUILD_MANIFEST\n    | typeof APP_BUILD_MANIFEST\n    | typeof PAGES_MANIFEST\n    | typeof APP_PATHS_MANIFEST\n    | `${typeof SERVER_REFERENCE_MANIFEST}.json`\n    | `${typeof NEXT_FONT_MANIFEST}.json`\n    | typeof REACT_LOADABLE_MANIFEST,\n  pageName: string,\n  type: 'pages' | 'app' | 'middleware' | 'instrumentation' = 'pages'\n): Promise<T> {\n  const manifestPath = posix.join(\n    distDir,\n    `server`,\n    type,\n    type === 'middleware' || type === 'instrumentation'\n      ? ''\n      : type === 'app'\n        ? pageName\n        : getAssetPathFromRoute(pageName),\n    name\n  )\n  return JSON.parse(await readFile(posix.join(manifestPath), 'utf-8')) as T\n}\n\nexport class TurbopackManifestLoader {\n  private actionManifests: Map<EntryKey, ActionManifest> = new Map()\n  private appBuildManifests: Map<EntryKey, AppBuildManifest> = new Map()\n  private appPathsManifests: Map<EntryKey, PagesManifest> = new Map()\n  private buildManifests: Map<EntryKey, BuildManifest> = new Map()\n  private fontManifests: Map<EntryKey, NextFontManifest> = new Map()\n  private loadableManifests: Map<EntryKey, LoadableManifest> = new Map()\n  private middlewareManifests: Map<EntryKey, TurbopackMiddlewareManifest> =\n    new Map()\n  private pagesManifests: Map<string, PagesManifest> = new Map()\n  private encryptionKey: string\n\n  private readonly distDir: string\n  private readonly buildId: string\n\n  constructor({\n    distDir,\n    buildId,\n    encryptionKey,\n  }: {\n    buildId: string\n    distDir: string\n    encryptionKey: string\n  }) {\n    this.distDir = distDir\n    this.buildId = buildId\n    this.encryptionKey = encryptionKey\n  }\n\n  delete(key: EntryKey) {\n    this.actionManifests.delete(key)\n    this.appBuildManifests.delete(key)\n    this.appPathsManifests.delete(key)\n    this.buildManifests.delete(key)\n    this.fontManifests.delete(key)\n    this.loadableManifests.delete(key)\n    this.middlewareManifests.delete(key)\n    this.pagesManifests.delete(key)\n  }\n\n  async loadActionManifest(pageName: string): Promise<void> {\n    this.actionManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        `${SERVER_REFERENCE_MANIFEST}.json`,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private async mergeActionManifests(manifests: Iterable<ActionManifest>) {\n    type ActionEntries = ActionManifest['edge' | 'node']\n    const manifest: ActionManifest = {\n      node: {},\n      edge: {},\n      encryptionKey: this.encryptionKey,\n    }\n\n    function mergeActionIds(\n      actionEntries: ActionEntries,\n      other: ActionEntries\n    ): void {\n      for (const key in other) {\n        const action = (actionEntries[key] ??= {\n          workers: {},\n          layer: {},\n        })\n        Object.assign(action.workers, other[key].workers)\n        Object.assign(action.layer, other[key].layer)\n      }\n    }\n\n    for (const m of manifests) {\n      mergeActionIds(manifest.node, m.node)\n      mergeActionIds(manifest.edge, m.edge)\n    }\n\n    return manifest\n  }\n\n  private async writeActionManifest(): Promise<void> {\n    const actionManifest = await this.mergeActionManifests(\n      this.actionManifests.values()\n    )\n    const actionManifestJsonPath = join(\n      this.distDir,\n      'server',\n      `${SERVER_REFERENCE_MANIFEST}.json`\n    )\n    const actionManifestJsPath = join(\n      this.distDir,\n      'server',\n      `${SERVER_REFERENCE_MANIFEST}.js`\n    )\n    const json = JSON.stringify(actionManifest, null, 2)\n    deleteCache(actionManifestJsonPath)\n    deleteCache(actionManifestJsPath)\n    await writeFile(actionManifestJsonPath, json, 'utf-8')\n    await writeFile(\n      actionManifestJsPath,\n      `self.__RSC_SERVER_MANIFEST=${JSON.stringify(json)}`,\n      'utf-8'\n    )\n  }\n\n  async loadAppBuildManifest(pageName: string): Promise<void> {\n    this.appBuildManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        APP_BUILD_MANIFEST,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private mergeAppBuildManifests(manifests: Iterable<AppBuildManifest>) {\n    const manifest: AppBuildManifest = {\n      pages: {},\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.pages, m.pages)\n    }\n    return manifest\n  }\n\n  private async writeAppBuildManifest(): Promise<void> {\n    const appBuildManifest = this.mergeAppBuildManifests(\n      this.appBuildManifests.values()\n    )\n    const appBuildManifestPath = join(this.distDir, APP_BUILD_MANIFEST)\n    deleteCache(appBuildManifestPath)\n    await writeFileAtomic(\n      appBuildManifestPath,\n      JSON.stringify(appBuildManifest, null, 2)\n    )\n  }\n\n  async loadAppPathsManifest(pageName: string): Promise<void> {\n    this.appPathsManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        APP_PATHS_MANIFEST,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private async writeAppPathsManifest(): Promise<void> {\n    const appPathsManifest = this.mergePagesManifests(\n      this.appPathsManifests.values()\n    )\n    const appPathsManifestPath = join(\n      this.distDir,\n      'server',\n      APP_PATHS_MANIFEST\n    )\n    deleteCache(appPathsManifestPath)\n    await writeFileAtomic(\n      appPathsManifestPath,\n      JSON.stringify(appPathsManifest, null, 2)\n    )\n  }\n\n  /**\n   * Turbopack doesn't support this functionality, so it writes an empty manifest.\n   */\n  private async writeAutomaticFontOptimizationManifest() {\n    const manifestPath = join(\n      this.distDir,\n      'server',\n      AUTOMATIC_FONT_OPTIMIZATION_MANIFEST\n    )\n\n    await writeFileAtomic(manifestPath, JSON.stringify([]))\n  }\n\n  async loadBuildManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.buildManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(this.distDir, BUILD_MANIFEST, pageName, type)\n    )\n  }\n\n  private mergeBuildManifests(manifests: Iterable<BuildManifest>) {\n    const manifest: Partial<BuildManifest> & Pick<BuildManifest, 'pages'> = {\n      pages: {\n        '/_app': [],\n      },\n      // Something in next.js depends on these to exist even for app dir rendering\n      devFiles: [],\n      ampDevFiles: [],\n      polyfillFiles: [],\n      lowPriorityFiles: [\n        `static/${this.buildId}/_ssgManifest.js`,\n        `static/${this.buildId}/_buildManifest.js`,\n      ],\n      rootMainFiles: [],\n      ampFirstPages: [],\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.pages, m.pages)\n      if (m.rootMainFiles.length) manifest.rootMainFiles = m.rootMainFiles\n      // polyfillFiles should always be the same, so we can overwrite instead of actually merging\n      if (m.polyfillFiles.length) manifest.polyfillFiles = m.polyfillFiles\n    }\n    return manifest\n  }\n\n  private async writeBuildManifest(\n    entrypoints: Entrypoints,\n    devRewrites: SetupOpts['fsChecker']['rewrites'] | undefined,\n    productionRewrites: CustomRoutes['rewrites'] | undefined\n  ): Promise<void> {\n    const rewrites = productionRewrites ?? {\n      ...devRewrites,\n      beforeFiles: (devRewrites?.beforeFiles ?? []).map(processRoute),\n      afterFiles: (devRewrites?.afterFiles ?? []).map(processRoute),\n      fallback: (devRewrites?.fallback ?? []).map(processRoute),\n    }\n    const buildManifest = this.mergeBuildManifests(this.buildManifests.values())\n    const buildManifestPath = join(this.distDir, BUILD_MANIFEST)\n    const middlewareBuildManifestPath = join(\n      this.distDir,\n      'server',\n      `${MIDDLEWARE_BUILD_MANIFEST}.js`\n    )\n    const interceptionRewriteManifestPath = join(\n      this.distDir,\n      'server',\n      `${INTERCEPTION_ROUTE_REWRITE_MANIFEST}.js`\n    )\n    deleteCache(buildManifestPath)\n    deleteCache(middlewareBuildManifestPath)\n    deleteCache(interceptionRewriteManifestPath)\n    await writeFileAtomic(\n      buildManifestPath,\n      JSON.stringify(buildManifest, null, 2)\n    )\n    await writeFileAtomic(\n      middlewareBuildManifestPath,\n      `self.__BUILD_MANIFEST=${JSON.stringify(buildManifest)};`\n    )\n\n    const interceptionRewrites = JSON.stringify(\n      rewrites.beforeFiles.filter(isInterceptionRouteRewrite)\n    )\n\n    await writeFileAtomic(\n      interceptionRewriteManifestPath,\n      `self.__INTERCEPTION_ROUTE_REWRITE_MANIFEST=${JSON.stringify(\n        interceptionRewrites\n      )};`\n    )\n\n    const pagesKeys = [...entrypoints.page.keys()]\n    if (entrypoints.global.app) {\n      pagesKeys.push('/_app')\n    }\n    if (entrypoints.global.error) {\n      pagesKeys.push('/_error')\n    }\n\n    const sortedPageKeys = getSortedRoutes(pagesKeys)\n    const content: ClientBuildManifest = {\n      __rewrites: normalizeRewritesForBuildManifest(rewrites) as any,\n      ...Object.fromEntries(\n        sortedPageKeys.map((pathname) => [\n          pathname,\n          [`static/chunks/pages${pathname === '/' ? '/index' : pathname}.js`],\n        ])\n      ),\n      sortedPages: sortedPageKeys,\n    }\n    const buildManifestJs = `self.__BUILD_MANIFEST = ${JSON.stringify(\n      content\n    )};self.__BUILD_MANIFEST_CB && self.__BUILD_MANIFEST_CB()`\n    await writeFileAtomic(\n      join(this.distDir, 'static', this.buildId, '_buildManifest.js'),\n      buildManifestJs\n    )\n    await writeFileAtomic(\n      join(this.distDir, 'static', this.buildId, '_ssgManifest.js'),\n      srcEmptySsgManifest\n    )\n  }\n\n  private async writeClientMiddlewareManifest(): Promise<void> {\n    const middlewareManifest = this.mergeMiddlewareManifests(\n      this.middlewareManifests.values()\n    )\n\n    const matchers = middlewareManifest?.middleware['/']?.matchers || []\n\n    const clientMiddlewareManifestPath = join(\n      this.distDir,\n      'static',\n      this.buildId,\n      `${TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST}`\n    )\n    deleteCache(clientMiddlewareManifestPath)\n    await writeFileAtomic(\n      clientMiddlewareManifestPath,\n      JSON.stringify(matchers, null, 2)\n    )\n  }\n\n  private async writeFallbackBuildManifest(): Promise<void> {\n    const fallbackBuildManifest = this.mergeBuildManifests(\n      [\n        this.buildManifests.get(getEntryKey('pages', 'server', '_app')),\n        this.buildManifests.get(getEntryKey('pages', 'server', '_error')),\n      ].filter(Boolean) as BuildManifest[]\n    )\n    const fallbackBuildManifestPath = join(\n      this.distDir,\n      `fallback-${BUILD_MANIFEST}`\n    )\n    deleteCache(fallbackBuildManifestPath)\n    await writeFileAtomic(\n      fallbackBuildManifestPath,\n      JSON.stringify(fallbackBuildManifest, null, 2)\n    )\n  }\n\n  async loadFontManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.fontManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        `${NEXT_FONT_MANIFEST}.json`,\n        pageName,\n        type\n      )\n    )\n  }\n\n  private mergeFontManifests(manifests: Iterable<NextFontManifest>) {\n    const manifest: NextFontManifest = {\n      app: {},\n      appUsingSizeAdjust: false,\n      pages: {},\n      pagesUsingSizeAdjust: false,\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.app, m.app)\n      Object.assign(manifest.pages, m.pages)\n\n      manifest.appUsingSizeAdjust =\n        manifest.appUsingSizeAdjust || m.appUsingSizeAdjust\n      manifest.pagesUsingSizeAdjust =\n        manifest.pagesUsingSizeAdjust || m.pagesUsingSizeAdjust\n    }\n    return manifest\n  }\n\n  private async writeNextFontManifest(): Promise<void> {\n    const fontManifest = this.mergeFontManifests(this.fontManifests.values())\n    const json = JSON.stringify(fontManifest, null, 2)\n\n    const fontManifestJsonPath = join(\n      this.distDir,\n      'server',\n      `${NEXT_FONT_MANIFEST}.json`\n    )\n    const fontManifestJsPath = join(\n      this.distDir,\n      'server',\n      `${NEXT_FONT_MANIFEST}.js`\n    )\n    deleteCache(fontManifestJsonPath)\n    deleteCache(fontManifestJsPath)\n    await writeFileAtomic(fontManifestJsonPath, json)\n    await writeFileAtomic(\n      fontManifestJsPath,\n      `self.__NEXT_FONT_MANIFEST=${JSON.stringify(json)}`\n    )\n  }\n\n  async loadLoadableManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.loadableManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        REACT_LOADABLE_MANIFEST,\n        pageName,\n        type\n      )\n    )\n  }\n\n  private mergeLoadableManifests(manifests: Iterable<LoadableManifest>) {\n    const manifest: LoadableManifest = {}\n    for (const m of manifests) {\n      Object.assign(manifest, m)\n    }\n    return manifest\n  }\n\n  private async writeLoadableManifest(): Promise<void> {\n    const loadableManifest = this.mergeLoadableManifests(\n      this.loadableManifests.values()\n    )\n    const loadableManifestPath = join(this.distDir, REACT_LOADABLE_MANIFEST)\n    const middlewareloadableManifestPath = join(\n      this.distDir,\n      'server',\n      `${MIDDLEWARE_REACT_LOADABLE_MANIFEST}.js`\n    )\n\n    const json = JSON.stringify(loadableManifest, null, 2)\n\n    deleteCache(loadableManifestPath)\n    deleteCache(middlewareloadableManifestPath)\n    await writeFileAtomic(loadableManifestPath, json)\n    await writeFileAtomic(\n      middlewareloadableManifestPath,\n      `self.__REACT_LOADABLE_MANIFEST=${JSON.stringify(json)}`\n    )\n  }\n\n  async loadMiddlewareManifest(\n    pageName: string,\n    type: 'pages' | 'app' | 'middleware' | 'instrumentation'\n  ): Promise<void> {\n    this.middlewareManifests.set(\n      getEntryKey(\n        type === 'middleware' || type === 'instrumentation' ? 'root' : type,\n        'server',\n        pageName\n      ),\n      await readPartialManifest(\n        this.distDir,\n        MIDDLEWARE_MANIFEST,\n        pageName,\n        type\n      )\n    )\n  }\n\n  getMiddlewareManifest(key: EntryKey) {\n    return this.middlewareManifests.get(key)\n  }\n\n  deleteMiddlewareManifest(key: EntryKey) {\n    return this.middlewareManifests.delete(key)\n  }\n\n  private mergeMiddlewareManifests(\n    manifests: Iterable<TurbopackMiddlewareManifest>\n  ): MiddlewareManifest {\n    const manifest: MiddlewareManifest = {\n      version: 3,\n      middleware: {},\n      sortedMiddleware: [],\n      functions: {},\n    }\n    let instrumentation: InstrumentationDefinition | undefined = undefined\n    for (const m of manifests) {\n      Object.assign(manifest.functions, m.functions)\n      Object.assign(manifest.middleware, m.middleware)\n      if (m.instrumentation) {\n        instrumentation = m.instrumentation\n      }\n    }\n    const updateFunctionDefinition = (\n      fun: EdgeFunctionDefinition\n    ): EdgeFunctionDefinition => {\n      return {\n        ...fun,\n        files: [...(instrumentation?.files ?? []), ...fun.files],\n      }\n    }\n    for (const key of Object.keys(manifest.middleware)) {\n      const value = manifest.middleware[key]\n      manifest.middleware[key] = updateFunctionDefinition(value)\n    }\n    for (const key of Object.keys(manifest.functions)) {\n      const value = manifest.functions[key]\n      manifest.functions[key] = updateFunctionDefinition(value)\n    }\n    for (const fun of Object.values(manifest.functions).concat(\n      Object.values(manifest.middleware)\n    )) {\n      for (const matcher of fun.matchers) {\n        if (!matcher.regexp) {\n          matcher.regexp = pathToRegexp(matcher.originalSource, [], {\n            delimiter: '/',\n            sensitive: false,\n            strict: true,\n          }).source.replaceAll('\\\\/', '/')\n        }\n      }\n    }\n    manifest.sortedMiddleware = Object.keys(manifest.middleware)\n\n    return manifest\n  }\n\n  private async writeMiddlewareManifest(): Promise<void> {\n    const middlewareManifest = this.mergeMiddlewareManifests(\n      this.middlewareManifests.values()\n    )\n    const middlewareManifestPath = join(\n      this.distDir,\n      'server',\n      MIDDLEWARE_MANIFEST\n    )\n    deleteCache(middlewareManifestPath)\n    await writeFileAtomic(\n      middlewareManifestPath,\n      JSON.stringify(middlewareManifest, null, 2)\n    )\n  }\n\n  async loadPagesManifest(pageName: string): Promise<void> {\n    this.pagesManifests.set(\n      getEntryKey('pages', 'server', pageName),\n      await readPartialManifest(this.distDir, PAGES_MANIFEST, pageName)\n    )\n  }\n\n  private mergePagesManifests(manifests: Iterable<PagesManifest>) {\n    const manifest: PagesManifest = {}\n    for (const m of manifests) {\n      Object.assign(manifest, m)\n    }\n    return manifest\n  }\n\n  private async writePagesManifest(): Promise<void> {\n    const pagesManifest = this.mergePagesManifests(this.pagesManifests.values())\n    const pagesManifestPath = join(this.distDir, 'server', PAGES_MANIFEST)\n    deleteCache(pagesManifestPath)\n    await writeFileAtomic(\n      pagesManifestPath,\n      JSON.stringify(pagesManifest, null, 2)\n    )\n  }\n\n  async writeManifests({\n    devRewrites,\n    productionRewrites,\n    entrypoints,\n  }: {\n    devRewrites: SetupOpts['fsChecker']['rewrites'] | undefined\n    productionRewrites: CustomRoutes['rewrites'] | undefined\n    entrypoints: Entrypoints\n  }) {\n    await this.writeActionManifest()\n    await this.writeAppBuildManifest()\n    await this.writeAppPathsManifest()\n    await this.writeAutomaticFontOptimizationManifest()\n    await this.writeBuildManifest(entrypoints, devRewrites, productionRewrites)\n    await this.writeFallbackBuildManifest()\n    await this.writeLoadableManifest()\n    await this.writeMiddlewareManifest()\n    await this.writeClientMiddlewareManifest()\n    await this.writeNextFontManifest()\n    await this.writePagesManifest()\n  }\n}\n"],"names":["pathToRegexp","APP_BUILD_MANIFEST","APP_PATHS_MANIFEST","AUTOMATIC_FONT_OPTIMIZATION_MANIFEST","BUILD_MANIFEST","INTERCEPTION_ROUTE_REWRITE_MANIFEST","MIDDLEWARE_BUILD_MANIFEST","MIDDLEWARE_MANIFEST","MIDDLEWARE_REACT_LOADABLE_MANIFEST","NEXT_FONT_MANIFEST","PAGES_MANIFEST","REACT_LOADABLE_MANIFEST","SERVER_REFERENCE_MANIFEST","TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST","join","posix","readFile","writeFile","deleteCache","writeFileAtomic","isInterceptionRouteRewrite","normalizeRewritesForBuildManifest","srcEmptySsgManifest","processRoute","getAssetPathFromRoute","getEntryKey","getSortedRoutes","readPartialManifest","distDir","name","pageName","type","manifestPath","JSON","parse","TurbopackManifestLoader","constructor","buildId","encryptionKey","actionManifests","Map","appBuildManifests","appPathsManifests","buildManifests","fontManifests","loadableManifests","middlewareManifests","pagesManifests","delete","key","loadActionManifest","set","mergeActionManifests","manifests","manifest","node","edge","mergeActionIds","actionEntries","other","action","workers","layer","Object","assign","m","writeActionManifest","actionManifest","values","actionManifestJsonPath","actionManifestJsPath","json","stringify","loadAppBuildManifest","mergeAppBuildManifests","pages","writeAppBuildManifest","appBuildManifest","appBuildManifestPath","loadAppPathsManifest","writeAppPathsManifest","appPathsManifest","mergePagesManifests","appPathsManifestPath","writeAutomaticFontOptimizationManifest","loadBuildManifest","mergeBuildManifests","devFiles","ampDevFiles","polyfillFiles","lowPriorityFiles","rootMainFiles","ampFirstPages","length","writeBuildManifest","entrypoints","devRewrites","productionRewrites","rewrites","beforeFiles","map","afterFiles","fallback","buildManifest","buildManifestPath","middlewareBuildManifestPath","interceptionRewriteManifestPath","interceptionRewrites","filter","pagesKeys","page","keys","global","app","push","error","sortedPageKeys","content","__rewrites","fromEntries","pathname","sortedPages","buildManifestJs","writeClientMiddlewareManifest","middlewareManifest","mergeMiddlewareManifests","matchers","middleware","clientMiddlewareManifestPath","writeFallbackBuildManifest","fallbackBuildManifest","get","Boolean","fallbackBuildManifestPath","loadFontManifest","mergeFontManifests","appUsingSizeAdjust","pagesUsingSizeAdjust","writeNextFontManifest","fontManifest","fontManifestJsonPath","fontManifestJsPath","loadLoadableManifest","mergeLoadableManifests","writeLoadableManifest","loadableManifest","loadableManifestPath","middlewareloadableManifestPath","loadMiddlewareManifest","getMiddlewareManifest","deleteMiddlewareManifest","version","sortedMiddleware","functions","instrumentation","undefined","updateFunctionDefinition","fun","files","value","concat","matcher","regexp","originalSource","delimiter","sensitive","strict","source","replaceAll","writeMiddlewareManifest","middlewareManifestPath","loadPagesManifest","writePagesManifest","pagesManifest","pagesManifestPath","writeManifests"],"mappings":"AAOA,SAASA,YAAY,QAAQ,oCAAmC;AAIhE,SACEC,kBAAkB,EAClBC,kBAAkB,EAClBC,oCAAoC,EACpCC,cAAc,EACdC,mCAAmC,EACnCC,yBAAyB,EACzBC,mBAAmB,EACnBC,kCAAkC,EAClCC,kBAAkB,EAClBC,cAAc,EACdC,uBAAuB,EACvBC,yBAAyB,EACzBC,oCAAoC,QAC/B,gCAA+B;AACtC,SAASC,IAAI,EAAEC,KAAK,QAAQ,OAAM;AAClC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,cAAa;AAEjD,SAASC,WAAW,QAAQ,mEAAkE;AAC9F,SAASC,eAAe,QAAQ,+BAA8B;AAC9D,SAASC,0BAA0B,QAAQ,qDAAoD;AAC/F,SAEEC,iCAAiC,EACjCC,mBAAmB,EACnBC,YAAY,QACP,uDAAsD;AAE7D,OAAOC,2BAA2B,6DAA4D;AAC9F,SAASC,WAAW,QAAuB,cAAa;AAExD,SAASC,eAAe,QAAQ,mCAAkC;AAWlE,eAAeC,oBACbC,OAAe,EACfC,IAQkC,EAClCC,QAAgB,EAChBC,OAA2D,OAAO;IAElE,MAAMC,eAAejB,MAAMD,IAAI,CAC7Bc,SACA,CAAC,MAAM,CAAC,EACRG,MACAA,SAAS,gBAAgBA,SAAS,oBAC9B,KACAA,SAAS,QACPD,WACAN,sBAAsBM,WAC5BD;IAEF,OAAOI,KAAKC,KAAK,CAAC,MAAMlB,SAASD,MAAMD,IAAI,CAACkB,eAAe;AAC7D;AAEA,OAAO,MAAMG;IAeXC,YAAY,EACVR,OAAO,EACPS,OAAO,EACPC,aAAa,EAKd,CAAE;aAtBKC,kBAAiD,IAAIC;aACrDC,oBAAqD,IAAID;aACzDE,oBAAkD,IAAIF;aACtDG,iBAA+C,IAAIH;aACnDI,gBAAiD,IAAIJ;aACrDK,oBAAqD,IAAIL;aACzDM,sBACN,IAAIN;aACEO,iBAA6C,IAAIP;QAevD,IAAI,CAACZ,OAAO,GAAGA;QACf,IAAI,CAACS,OAAO,GAAGA;QACf,IAAI,CAACC,aAAa,GAAGA;IACvB;IAEAU,OAAOC,GAAa,EAAE;QACpB,IAAI,CAACV,eAAe,CAACS,MAAM,CAACC;QAC5B,IAAI,CAACR,iBAAiB,CAACO,MAAM,CAACC;QAC9B,IAAI,CAACP,iBAAiB,CAACM,MAAM,CAACC;QAC9B,IAAI,CAACN,cAAc,CAACK,MAAM,CAACC;QAC3B,IAAI,CAACL,aAAa,CAACI,MAAM,CAACC;QAC1B,IAAI,CAACJ,iBAAiB,CAACG,MAAM,CAACC;QAC9B,IAAI,CAACH,mBAAmB,CAACE,MAAM,CAACC;QAChC,IAAI,CAACF,cAAc,CAACC,MAAM,CAACC;IAC7B;IAEA,MAAMC,mBAAmBpB,QAAgB,EAAiB;QACxD,IAAI,CAACS,eAAe,CAACY,GAAG,CACtB1B,YAAY,OAAO,UAAUK,WAC7B,MAAMH,oBACJ,IAAI,CAACC,OAAO,EACZ,CAAC,EAAEhB,0BAA0B,KAAK,CAAC,EACnCkB,UACA;IAGN;IAEA,MAAcsB,qBAAqBC,SAAmC,EAAE;QAEtE,MAAMC,WAA2B;YAC/BC,MAAM,CAAC;YACPC,MAAM,CAAC;YACPlB,eAAe,IAAI,CAACA,aAAa;QACnC;QAEA,SAASmB,eACPC,aAA4B,EAC5BC,KAAoB;YAEpB,IAAK,MAAMV,OAAOU,MAAO;gBACvB,MAAMC,SAAUF,aAAa,CAACT,IAAI,KAAK;oBACrCY,SAAS,CAAC;oBACVC,OAAO,CAAC;gBACV;gBACAC,OAAOC,MAAM,CAACJ,OAAOC,OAAO,EAAEF,KAAK,CAACV,IAAI,CAACY,OAAO;gBAChDE,OAAOC,MAAM,CAACJ,OAAOE,KAAK,EAAEH,KAAK,CAACV,IAAI,CAACa,KAAK;YAC9C;QACF;QAEA,KAAK,MAAMG,KAAKZ,UAAW;YACzBI,eAAeH,SAASC,IAAI,EAAEU,EAAEV,IAAI;YACpCE,eAAeH,SAASE,IAAI,EAAES,EAAET,IAAI;QACtC;QAEA,OAAOF;IACT;IAEA,MAAcY,sBAAqC;QACjD,MAAMC,iBAAiB,MAAM,IAAI,CAACf,oBAAoB,CACpD,IAAI,CAACb,eAAe,CAAC6B,MAAM;QAE7B,MAAMC,yBAAyBvD,KAC7B,IAAI,CAACc,OAAO,EACZ,UACA,CAAC,EAAEhB,0BAA0B,KAAK,CAAC;QAErC,MAAM0D,uBAAuBxD,KAC3B,IAAI,CAACc,OAAO,EACZ,UACA,CAAC,EAAEhB,0BAA0B,GAAG,CAAC;QAEnC,MAAM2D,OAAOtC,KAAKuC,SAAS,CAACL,gBAAgB,MAAM;QAClDjD,YAAYmD;QACZnD,YAAYoD;QACZ,MAAMrD,UAAUoD,wBAAwBE,MAAM;QAC9C,MAAMtD,UACJqD,sBACA,CAAC,2BAA2B,EAAErC,KAAKuC,SAAS,CAACD,MAAM,CAAC,EACpD;IAEJ;IAEA,MAAME,qBAAqB3C,QAAgB,EAAiB;QAC1D,IAAI,CAACW,iBAAiB,CAACU,GAAG,CACxB1B,YAAY,OAAO,UAAUK,WAC7B,MAAMH,oBACJ,IAAI,CAACC,OAAO,EACZ3B,oBACA6B,UACA;IAGN;IAEQ4C,uBAAuBrB,SAAqC,EAAE;QACpE,MAAMC,WAA6B;YACjCqB,OAAO,CAAC;QACV;QACA,KAAK,MAAMV,KAAKZ,UAAW;YACzBU,OAAOC,MAAM,CAACV,SAASqB,KAAK,EAAEV,EAAEU,KAAK;QACvC;QACA,OAAOrB;IACT;IAEA,MAAcsB,wBAAuC;QACnD,MAAMC,mBAAmB,IAAI,CAACH,sBAAsB,CAClD,IAAI,CAACjC,iBAAiB,CAAC2B,MAAM;QAE/B,MAAMU,uBAAuBhE,KAAK,IAAI,CAACc,OAAO,EAAE3B;QAChDiB,YAAY4D;QACZ,MAAM3D,gBACJ2D,sBACA7C,KAAKuC,SAAS,CAACK,kBAAkB,MAAM;IAE3C;IAEA,MAAME,qBAAqBjD,QAAgB,EAAiB;QAC1D,IAAI,CAACY,iBAAiB,CAACS,GAAG,CACxB1B,YAAY,OAAO,UAAUK,WAC7B,MAAMH,oBACJ,IAAI,CAACC,OAAO,EACZ1B,oBACA4B,UACA;IAGN;IAEA,MAAckD,wBAAuC;QACnD,MAAMC,mBAAmB,IAAI,CAACC,mBAAmB,CAC/C,IAAI,CAACxC,iBAAiB,CAAC0B,MAAM;QAE/B,MAAMe,uBAAuBrE,KAC3B,IAAI,CAACc,OAAO,EACZ,UACA1B;QAEFgB,YAAYiE;QACZ,MAAMhE,gBACJgE,sBACAlD,KAAKuC,SAAS,CAACS,kBAAkB,MAAM;IAE3C;IAEA;;GAEC,GACD,MAAcG,yCAAyC;QACrD,MAAMpD,eAAelB,KACnB,IAAI,CAACc,OAAO,EACZ,UACAzB;QAGF,MAAMgB,gBAAgBa,cAAcC,KAAKuC,SAAS,CAAC,EAAE;IACvD;IAEA,MAAMa,kBACJvD,QAAgB,EAChBC,OAAwB,OAAO,EAChB;QACf,IAAI,CAACY,cAAc,CAACQ,GAAG,CACrB1B,YAAYM,MAAM,UAAUD,WAC5B,MAAMH,oBAAoB,IAAI,CAACC,OAAO,EAAExB,gBAAgB0B,UAAUC;IAEtE;IAEQuD,oBAAoBjC,SAAkC,EAAE;QAC9D,MAAMC,WAAkE;YACtEqB,OAAO;gBACL,SAAS,EAAE;YACb;YACA,4EAA4E;YAC5EY,UAAU,EAAE;YACZC,aAAa,EAAE;YACfC,eAAe,EAAE;YACjBC,kBAAkB;gBAChB,CAAC,OAAO,EAAE,IAAI,CAACrD,OAAO,CAAC,gBAAgB,CAAC;gBACxC,CAAC,OAAO,EAAE,IAAI,CAACA,OAAO,CAAC,kBAAkB,CAAC;aAC3C;YACDsD,eAAe,EAAE;YACjBC,eAAe,EAAE;QACnB;QACA,KAAK,MAAM3B,KAAKZ,UAAW;YACzBU,OAAOC,MAAM,CAACV,SAASqB,KAAK,EAAEV,EAAEU,KAAK;YACrC,IAAIV,EAAE0B,aAAa,CAACE,MAAM,EAAEvC,SAASqC,aAAa,GAAG1B,EAAE0B,aAAa;YACpE,2FAA2F;YAC3F,IAAI1B,EAAEwB,aAAa,CAACI,MAAM,EAAEvC,SAASmC,aAAa,GAAGxB,EAAEwB,aAAa;QACtE;QACA,OAAOnC;IACT;IAEA,MAAcwC,mBACZC,WAAwB,EACxBC,WAA2D,EAC3DC,kBAAwD,EACzC;QACf,MAAMC,WAAWD,sBAAsB;YACrC,GAAGD,WAAW;YACdG,aAAa,AAACH,CAAAA,CAAAA,+BAAAA,YAAaG,WAAW,KAAI,EAAE,AAAD,EAAGC,GAAG,CAAC7E;YAClD8E,YAAY,AAACL,CAAAA,CAAAA,+BAAAA,YAAaK,UAAU,KAAI,EAAE,AAAD,EAAGD,GAAG,CAAC7E;YAChD+E,UAAU,AAACN,CAAAA,CAAAA,+BAAAA,YAAaM,QAAQ,KAAI,EAAE,AAAD,EAAGF,GAAG,CAAC7E;QAC9C;QACA,MAAMgF,gBAAgB,IAAI,CAACjB,mBAAmB,CAAC,IAAI,CAAC3C,cAAc,CAACyB,MAAM;QACzE,MAAMoC,oBAAoB1F,KAAK,IAAI,CAACc,OAAO,EAAExB;QAC7C,MAAMqG,8BAA8B3F,KAClC,IAAI,CAACc,OAAO,EACZ,UACA,CAAC,EAAEtB,0BAA0B,GAAG,CAAC;QAEnC,MAAMoG,kCAAkC5F,KACtC,IAAI,CAACc,OAAO,EACZ,UACA,CAAC,EAAEvB,oCAAoC,GAAG,CAAC;QAE7Ca,YAAYsF;QACZtF,YAAYuF;QACZvF,YAAYwF;QACZ,MAAMvF,gBACJqF,mBACAvE,KAAKuC,SAAS,CAAC+B,eAAe,MAAM;QAEtC,MAAMpF,gBACJsF,6BACA,CAAC,sBAAsB,EAAExE,KAAKuC,SAAS,CAAC+B,eAAe,CAAC,CAAC;QAG3D,MAAMI,uBAAuB1E,KAAKuC,SAAS,CACzC0B,SAASC,WAAW,CAACS,MAAM,CAACxF;QAG9B,MAAMD,gBACJuF,iCACA,CAAC,2CAA2C,EAAEzE,KAAKuC,SAAS,CAC1DmC,sBACA,CAAC,CAAC;QAGN,MAAME,YAAY;eAAId,YAAYe,IAAI,CAACC,IAAI;SAAG;QAC9C,IAAIhB,YAAYiB,MAAM,CAACC,GAAG,EAAE;YAC1BJ,UAAUK,IAAI,CAAC;QACjB;QACA,IAAInB,YAAYiB,MAAM,CAACG,KAAK,EAAE;YAC5BN,UAAUK,IAAI,CAAC;QACjB;QAEA,MAAME,iBAAiB1F,gBAAgBmF;QACvC,MAAMQ,UAA+B;YACnCC,YAAYjG,kCAAkC6E;YAC9C,GAAGnC,OAAOwD,WAAW,CACnBH,eAAehB,GAAG,CAAC,CAACoB,WAAa;oBAC/BA;oBACA;wBAAC,CAAC,mBAAmB,EAAEA,aAAa,MAAM,WAAWA,SAAS,GAAG,CAAC;qBAAC;iBACpE,EACF;YACDC,aAAaL;QACf;QACA,MAAMM,kBAAkB,CAAC,wBAAwB,EAAEzF,KAAKuC,SAAS,CAC/D6C,SACA,uDAAuD,CAAC;QAC1D,MAAMlG,gBACJL,KAAK,IAAI,CAACc,OAAO,EAAE,UAAU,IAAI,CAACS,OAAO,EAAE,sBAC3CqF;QAEF,MAAMvG,gBACJL,KAAK,IAAI,CAACc,OAAO,EAAE,UAAU,IAAI,CAACS,OAAO,EAAE,oBAC3Cf;IAEJ;IAEA,MAAcqG,gCAA+C;YAK1CC;QAJjB,MAAMA,qBAAqB,IAAI,CAACC,wBAAwB,CACtD,IAAI,CAAC/E,mBAAmB,CAACsB,MAAM;QAGjC,MAAM0D,WAAWF,CAAAA,uCAAAA,kCAAAA,mBAAoBG,UAAU,CAAC,IAAI,qBAAnCH,gCAAqCE,QAAQ,KAAI,EAAE;QAEpE,MAAME,+BAA+BlH,KACnC,IAAI,CAACc,OAAO,EACZ,UACA,IAAI,CAACS,OAAO,EACZ,CAAC,EAAExB,qCAAqC,CAAC;QAE3CK,YAAY8G;QACZ,MAAM7G,gBACJ6G,8BACA/F,KAAKuC,SAAS,CAACsD,UAAU,MAAM;IAEnC;IAEA,MAAcG,6BAA4C;QACxD,MAAMC,wBAAwB,IAAI,CAAC5C,mBAAmB,CACpD;YACE,IAAI,CAAC3C,cAAc,CAACwF,GAAG,CAAC1G,YAAY,SAAS,UAAU;YACvD,IAAI,CAACkB,cAAc,CAACwF,GAAG,CAAC1G,YAAY,SAAS,UAAU;SACxD,CAACmF,MAAM,CAACwB;QAEX,MAAMC,4BAA4BvH,KAChC,IAAI,CAACc,OAAO,EACZ,CAAC,SAAS,EAAExB,eAAe,CAAC;QAE9Bc,YAAYmH;QACZ,MAAMlH,gBACJkH,2BACApG,KAAKuC,SAAS,CAAC0D,uBAAuB,MAAM;IAEhD;IAEA,MAAMI,iBACJxG,QAAgB,EAChBC,OAAwB,OAAO,EAChB;QACf,IAAI,CAACa,aAAa,CAACO,GAAG,CACpB1B,YAAYM,MAAM,UAAUD,WAC5B,MAAMH,oBACJ,IAAI,CAACC,OAAO,EACZ,CAAC,EAAEnB,mBAAmB,KAAK,CAAC,EAC5BqB,UACAC;IAGN;IAEQwG,mBAAmBlF,SAAqC,EAAE;QAChE,MAAMC,WAA6B;YACjC2D,KAAK,CAAC;YACNuB,oBAAoB;YACpB7D,OAAO,CAAC;YACR8D,sBAAsB;QACxB;QACA,KAAK,MAAMxE,KAAKZ,UAAW;YACzBU,OAAOC,MAAM,CAACV,SAAS2D,GAAG,EAAEhD,EAAEgD,GAAG;YACjClD,OAAOC,MAAM,CAACV,SAASqB,KAAK,EAAEV,EAAEU,KAAK;YAErCrB,SAASkF,kBAAkB,GACzBlF,SAASkF,kBAAkB,IAAIvE,EAAEuE,kBAAkB;YACrDlF,SAASmF,oBAAoB,GAC3BnF,SAASmF,oBAAoB,IAAIxE,EAAEwE,oBAAoB;QAC3D;QACA,OAAOnF;IACT;IAEA,MAAcoF,wBAAuC;QACnD,MAAMC,eAAe,IAAI,CAACJ,kBAAkB,CAAC,IAAI,CAAC3F,aAAa,CAACwB,MAAM;QACtE,MAAMG,OAAOtC,KAAKuC,SAAS,CAACmE,cAAc,MAAM;QAEhD,MAAMC,uBAAuB9H,KAC3B,IAAI,CAACc,OAAO,EACZ,UACA,CAAC,EAAEnB,mBAAmB,KAAK,CAAC;QAE9B,MAAMoI,qBAAqB/H,KACzB,IAAI,CAACc,OAAO,EACZ,UACA,CAAC,EAAEnB,mBAAmB,GAAG,CAAC;QAE5BS,YAAY0H;QACZ1H,YAAY2H;QACZ,MAAM1H,gBAAgByH,sBAAsBrE;QAC5C,MAAMpD,gBACJ0H,oBACA,CAAC,0BAA0B,EAAE5G,KAAKuC,SAAS,CAACD,MAAM,CAAC;IAEvD;IAEA,MAAMuE,qBACJhH,QAAgB,EAChBC,OAAwB,OAAO,EAChB;QACf,IAAI,CAACc,iBAAiB,CAACM,GAAG,CACxB1B,YAAYM,MAAM,UAAUD,WAC5B,MAAMH,oBACJ,IAAI,CAACC,OAAO,EACZjB,yBACAmB,UACAC;IAGN;IAEQgH,uBAAuB1F,SAAqC,EAAE;QACpE,MAAMC,WAA6B,CAAC;QACpC,KAAK,MAAMW,KAAKZ,UAAW;YACzBU,OAAOC,MAAM,CAACV,UAAUW;QAC1B;QACA,OAAOX;IACT;IAEA,MAAc0F,wBAAuC;QACnD,MAAMC,mBAAmB,IAAI,CAACF,sBAAsB,CAClD,IAAI,CAAClG,iBAAiB,CAACuB,MAAM;QAE/B,MAAM8E,uBAAuBpI,KAAK,IAAI,CAACc,OAAO,EAAEjB;QAChD,MAAMwI,iCAAiCrI,KACrC,IAAI,CAACc,OAAO,EACZ,UACA,CAAC,EAAEpB,mCAAmC,GAAG,CAAC;QAG5C,MAAM+D,OAAOtC,KAAKuC,SAAS,CAACyE,kBAAkB,MAAM;QAEpD/H,YAAYgI;QACZhI,YAAYiI;QACZ,MAAMhI,gBAAgB+H,sBAAsB3E;QAC5C,MAAMpD,gBACJgI,gCACA,CAAC,+BAA+B,EAAElH,KAAKuC,SAAS,CAACD,MAAM,CAAC;IAE5D;IAEA,MAAM6E,uBACJtH,QAAgB,EAChBC,IAAwD,EACzC;QACf,IAAI,CAACe,mBAAmB,CAACK,GAAG,CAC1B1B,YACEM,SAAS,gBAAgBA,SAAS,oBAAoB,SAASA,MAC/D,UACAD,WAEF,MAAMH,oBACJ,IAAI,CAACC,OAAO,EACZrB,qBACAuB,UACAC;IAGN;IAEAsH,sBAAsBpG,GAAa,EAAE;QACnC,OAAO,IAAI,CAACH,mBAAmB,CAACqF,GAAG,CAAClF;IACtC;IAEAqG,yBAAyBrG,GAAa,EAAE;QACtC,OAAO,IAAI,CAACH,mBAAmB,CAACE,MAAM,CAACC;IACzC;IAEQ4E,yBACNxE,SAAgD,EAC5B;QACpB,MAAMC,WAA+B;YACnCiG,SAAS;YACTxB,YAAY,CAAC;YACbyB,kBAAkB,EAAE;YACpBC,WAAW,CAAC;QACd;QACA,IAAIC,kBAAyDC;QAC7D,KAAK,MAAM1F,KAAKZ,UAAW;YACzBU,OAAOC,MAAM,CAACV,SAASmG,SAAS,EAAExF,EAAEwF,SAAS;YAC7C1F,OAAOC,MAAM,CAACV,SAASyE,UAAU,EAAE9D,EAAE8D,UAAU;YAC/C,IAAI9D,EAAEyF,eAAe,EAAE;gBACrBA,kBAAkBzF,EAAEyF,eAAe;YACrC;QACF;QACA,MAAME,2BAA2B,CAC/BC;YAEA,OAAO;gBACL,GAAGA,GAAG;gBACNC,OAAO;uBAAKJ,CAAAA,mCAAAA,gBAAiBI,KAAK,KAAI,EAAE;uBAAMD,IAAIC,KAAK;iBAAC;YAC1D;QACF;QACA,KAAK,MAAM7G,OAAOc,OAAOgD,IAAI,CAACzD,SAASyE,UAAU,EAAG;YAClD,MAAMgC,QAAQzG,SAASyE,UAAU,CAAC9E,IAAI;YACtCK,SAASyE,UAAU,CAAC9E,IAAI,GAAG2G,yBAAyBG;QACtD;QACA,KAAK,MAAM9G,OAAOc,OAAOgD,IAAI,CAACzD,SAASmG,SAAS,EAAG;YACjD,MAAMM,QAAQzG,SAASmG,SAAS,CAACxG,IAAI;YACrCK,SAASmG,SAAS,CAACxG,IAAI,GAAG2G,yBAAyBG;QACrD;QACA,KAAK,MAAMF,OAAO9F,OAAOK,MAAM,CAACd,SAASmG,SAAS,EAAEO,MAAM,CACxDjG,OAAOK,MAAM,CAACd,SAASyE,UAAU,GAChC;YACD,KAAK,MAAMkC,WAAWJ,IAAI/B,QAAQ,CAAE;gBAClC,IAAI,CAACmC,QAAQC,MAAM,EAAE;oBACnBD,QAAQC,MAAM,GAAGlK,aAAaiK,QAAQE,cAAc,EAAE,EAAE,EAAE;wBACxDC,WAAW;wBACXC,WAAW;wBACXC,QAAQ;oBACV,GAAGC,MAAM,CAACC,UAAU,CAAC,OAAO;gBAC9B;YACF;QACF;QACAlH,SAASkG,gBAAgB,GAAGzF,OAAOgD,IAAI,CAACzD,SAASyE,UAAU;QAE3D,OAAOzE;IACT;IAEA,MAAcmH,0BAAyC;QACrD,MAAM7C,qBAAqB,IAAI,CAACC,wBAAwB,CACtD,IAAI,CAAC/E,mBAAmB,CAACsB,MAAM;QAEjC,MAAMsG,yBAAyB5J,KAC7B,IAAI,CAACc,OAAO,EACZ,UACArB;QAEFW,YAAYwJ;QACZ,MAAMvJ,gBACJuJ,wBACAzI,KAAKuC,SAAS,CAACoD,oBAAoB,MAAM;IAE7C;IAEA,MAAM+C,kBAAkB7I,QAAgB,EAAiB;QACvD,IAAI,CAACiB,cAAc,CAACI,GAAG,CACrB1B,YAAY,SAAS,UAAUK,WAC/B,MAAMH,oBAAoB,IAAI,CAACC,OAAO,EAAElB,gBAAgBoB;IAE5D;IAEQoD,oBAAoB7B,SAAkC,EAAE;QAC9D,MAAMC,WAA0B,CAAC;QACjC,KAAK,MAAMW,KAAKZ,UAAW;YACzBU,OAAOC,MAAM,CAACV,UAAUW;QAC1B;QACA,OAAOX;IACT;IAEA,MAAcsH,qBAAoC;QAChD,MAAMC,gBAAgB,IAAI,CAAC3F,mBAAmB,CAAC,IAAI,CAACnC,cAAc,CAACqB,MAAM;QACzE,MAAM0G,oBAAoBhK,KAAK,IAAI,CAACc,OAAO,EAAE,UAAUlB;QACvDQ,YAAY4J;QACZ,MAAM3J,gBACJ2J,mBACA7I,KAAKuC,SAAS,CAACqG,eAAe,MAAM;IAExC;IAEA,MAAME,eAAe,EACnB/E,WAAW,EACXC,kBAAkB,EAClBF,WAAW,EAKZ,EAAE;QACD,MAAM,IAAI,CAAC7B,mBAAmB;QAC9B,MAAM,IAAI,CAACU,qBAAqB;QAChC,MAAM,IAAI,CAACI,qBAAqB;QAChC,MAAM,IAAI,CAACI,sCAAsC;QACjD,MAAM,IAAI,CAACU,kBAAkB,CAACC,aAAaC,aAAaC;QACxD,MAAM,IAAI,CAACgC,0BAA0B;QACrC,MAAM,IAAI,CAACe,qBAAqB;QAChC,MAAM,IAAI,CAACyB,uBAAuB;QAClC,MAAM,IAAI,CAAC9C,6BAA6B;QACxC,MAAM,IAAI,CAACe,qBAAqB;QAChC,MAAM,IAAI,CAACkC,kBAAkB;IAC/B;AACF"}