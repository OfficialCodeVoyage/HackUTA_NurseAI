{"version":3,"sources":["../../../src/server/dev/static-paths-worker.ts"],"sourcesContent":["import type { NextConfigComplete } from '../config-shared'\n\nimport '../require-hook'\nimport '../node-environment'\n\nimport {\n  buildAppStaticPaths,\n  buildStaticPaths,\n  collectGenerateParams,\n} from '../../build/utils'\nimport type { GenerateParamsResults } from '../../build/utils'\nimport { loadComponents } from '../load-components'\nimport { setHttpClientAndAgentOptions } from '../setup-http-agent-env'\nimport type { IncrementalCache } from '../lib/incremental-cache'\nimport { isAppRouteRouteModule } from '../route-modules/checks'\n\ntype RuntimeConfig = {\n  configFileName: string\n  publicRuntimeConfig: { [key: string]: any }\n  serverRuntimeConfig: { [key: string]: any }\n}\n\n// we call getStaticPaths in a separate process to ensure\n// side-effects aren't relied on in dev that will break\n// during a production build\nexport async function loadStaticPaths({\n  dir,\n  distDir,\n  pathname,\n  config,\n  httpAgentOptions,\n  locales,\n  defaultLocale,\n  isAppPath,\n  page,\n  isrFlushToDisk,\n  fetchCacheKeyPrefix,\n  maxMemoryCacheSize,\n  requestHeaders,\n  cacheHandler,\n}: {\n  dir: string\n  distDir: string\n  pathname: string\n  config: RuntimeConfig\n  httpAgentOptions: NextConfigComplete['httpAgentOptions']\n  locales?: string[]\n  defaultLocale?: string\n  isAppPath: boolean\n  page: string\n  isrFlushToDisk?: boolean\n  fetchCacheKeyPrefix?: string\n  maxMemoryCacheSize?: number\n  requestHeaders: IncrementalCache['requestHeaders']\n  cacheHandler?: string\n}): Promise<{\n  paths?: string[]\n  encodedPaths?: string[]\n  fallback?: boolean | 'blocking'\n}> {\n  // update work memory runtime-config\n  require('../../shared/lib/runtime-config.external').setConfig(config)\n  setHttpClientAndAgentOptions({\n    httpAgentOptions,\n  })\n\n  const components = await loadComponents({\n    distDir,\n    // In `pages/`, the page is the same as the pathname.\n    page: page || pathname,\n    isAppPath,\n  })\n\n  if (!components.getStaticPaths && !isAppPath) {\n    // we shouldn't get to this point since the worker should\n    // only be called for SSG pages with getStaticPaths\n    throw new Error(\n      `Invariant: failed to load page with getStaticPaths for ${pathname}`\n    )\n  }\n\n  if (isAppPath) {\n    const { routeModule } = components\n    const generateParams: GenerateParamsResults =\n      routeModule && isAppRouteRouteModule(routeModule)\n        ? [\n            {\n              config: {\n                revalidate: routeModule.userland.revalidate,\n                dynamic: routeModule.userland.dynamic,\n                dynamicParams: routeModule.userland.dynamicParams,\n              },\n              generateStaticParams: routeModule.userland.generateStaticParams,\n              segmentPath: pathname,\n            },\n          ]\n        : await collectGenerateParams(components.ComponentMod.tree)\n\n    return await buildAppStaticPaths({\n      dir,\n      page: pathname,\n      generateParams,\n      configFileName: config.configFileName,\n      distDir,\n      requestHeaders,\n      cacheHandler,\n      isrFlushToDisk,\n      fetchCacheKeyPrefix,\n      maxMemoryCacheSize,\n      ComponentMod: components.ComponentMod,\n    })\n  }\n\n  return await buildStaticPaths({\n    page: pathname,\n    getStaticPaths: components.getStaticPaths,\n    configFileName: config.configFileName,\n    locales,\n    defaultLocale,\n  })\n}\n"],"names":["buildAppStaticPaths","buildStaticPaths","collectGenerateParams","loadComponents","setHttpClientAndAgentOptions","isAppRouteRouteModule","loadStaticPaths","dir","distDir","pathname","config","httpAgentOptions","locales","defaultLocale","isAppPath","page","isrFlushToDisk","fetchCacheKeyPrefix","maxMemoryCacheSize","requestHeaders","cacheHandler","require","setConfig","components","getStaticPaths","Error","routeModule","generateParams","revalidate","userland","dynamic","dynamicParams","generateStaticParams","segmentPath","ComponentMod","tree","configFileName"],"mappings":"AAEA,OAAO,kBAAiB;AACxB,OAAO,sBAAqB;AAE5B,SACEA,mBAAmB,EACnBC,gBAAgB,EAChBC,qBAAqB,QAChB,oBAAmB;AAE1B,SAASC,cAAc,QAAQ,qBAAoB;AACnD,SAASC,4BAA4B,QAAQ,0BAAyB;AAEtE,SAASC,qBAAqB,QAAQ,0BAAyB;AAQ/D,yDAAyD;AACzD,uDAAuD;AACvD,4BAA4B;AAC5B,OAAO,eAAeC,gBAAgB,EACpCC,GAAG,EACHC,OAAO,EACPC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EAChBC,OAAO,EACPC,aAAa,EACbC,SAAS,EACTC,IAAI,EACJC,cAAc,EACdC,mBAAmB,EACnBC,kBAAkB,EAClBC,cAAc,EACdC,YAAY,EAgBb;IAKC,oCAAoC;IACpCC,QAAQ,4CAA4CC,SAAS,CAACZ;IAC9DN,6BAA6B;QAC3BO;IACF;IAEA,MAAMY,aAAa,MAAMpB,eAAe;QACtCK;QACA,qDAAqD;QACrDO,MAAMA,QAAQN;QACdK;IACF;IAEA,IAAI,CAACS,WAAWC,cAAc,IAAI,CAACV,WAAW;QAC5C,yDAAyD;QACzD,mDAAmD;QACnD,MAAM,IAAIW,MACR,CAAC,uDAAuD,EAAEhB,SAAS,CAAC;IAExE;IAEA,IAAIK,WAAW;QACb,MAAM,EAAEY,WAAW,EAAE,GAAGH;QACxB,MAAMI,iBACJD,eAAerB,sBAAsBqB,eACjC;YACE;gBACEhB,QAAQ;oBACNkB,YAAYF,YAAYG,QAAQ,CAACD,UAAU;oBAC3CE,SAASJ,YAAYG,QAAQ,CAACC,OAAO;oBACrCC,eAAeL,YAAYG,QAAQ,CAACE,aAAa;gBACnD;gBACAC,sBAAsBN,YAAYG,QAAQ,CAACG,oBAAoB;gBAC/DC,aAAaxB;YACf;SACD,GACD,MAAMP,sBAAsBqB,WAAWW,YAAY,CAACC,IAAI;QAE9D,OAAO,MAAMnC,oBAAoB;YAC/BO;YACAQ,MAAMN;YACNkB;YACAS,gBAAgB1B,OAAO0B,cAAc;YACrC5B;YACAW;YACAC;YACAJ;YACAC;YACAC;YACAgB,cAAcX,WAAWW,YAAY;QACvC;IACF;IAEA,OAAO,MAAMjC,iBAAiB;QAC5Bc,MAAMN;QACNe,gBAAgBD,WAAWC,cAAc;QACzCY,gBAAgB1B,OAAO0B,cAAc;QACrCxB;QACAC;IACF;AACF"}