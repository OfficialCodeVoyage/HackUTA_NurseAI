{"version":3,"sources":["../../../src/server/web/adapter.ts"],"sourcesContent":["import type { RequestData, FetchEventResult } from './types'\nimport type { RequestInit } from './spec-extension/request'\nimport { PageSignatureError } from './error'\nimport { fromNodeOutgoingHttpHeaders, normalizeNextQueryParam } from './utils'\nimport { NextFetchEvent } from './spec-extension/fetch-event'\nimport { NextRequest } from './spec-extension/request'\nimport { NextResponse } from './spec-extension/response'\nimport { relativizeURL } from '../../shared/lib/router/utils/relativize-url'\nimport { waitUntilSymbol } from './spec-extension/fetch-event'\nimport { NextURL } from './next-url'\nimport { stripInternalSearchParams } from '../internal-utils'\nimport { normalizeRscURL } from '../../shared/lib/router/utils/app-paths'\nimport { FLIGHT_HEADERS } from '../../client/components/app-router-headers'\nimport { ensureInstrumentationRegistered } from './globals'\nimport {\n  withRequestStore,\n  type WrapperRenderOpts,\n} from '../async-storage/with-request-store'\nimport { requestAsyncStorage } from '../../client/components/request-async-storage.external'\nimport { getTracer } from '../lib/trace/tracer'\nimport type { TextMapGetter } from 'next/dist/compiled/@opentelemetry/api'\nimport { MiddlewareSpan } from '../lib/trace/constants'\nimport { CloseController } from './web-on-close'\nimport { getEdgePreviewProps } from './get-edge-preview-props'\n\nexport class NextRequestHint extends NextRequest {\n  sourcePage: string\n  fetchMetrics?: FetchEventResult['fetchMetrics']\n\n  constructor(params: {\n    init: RequestInit\n    input: Request | string\n    page: string\n  }) {\n    super(params.input, params.init)\n    this.sourcePage = params.page\n  }\n\n  get request() {\n    throw new PageSignatureError({ page: this.sourcePage })\n  }\n\n  respondWith() {\n    throw new PageSignatureError({ page: this.sourcePage })\n  }\n\n  waitUntil() {\n    throw new PageSignatureError({ page: this.sourcePage })\n  }\n}\n\nconst headersGetter: TextMapGetter<Headers> = {\n  keys: (headers) => Array.from(headers.keys()),\n  get: (headers, key) => headers.get(key) ?? undefined,\n}\n\nexport type AdapterOptions = {\n  handler: (req: NextRequestHint, event: NextFetchEvent) => Promise<Response>\n  page: string\n  request: RequestData\n  IncrementalCache?: typeof import('../lib/incremental-cache').IncrementalCache\n}\n\nlet propagator: <T>(request: NextRequestHint, fn: () => T) => T = (\n  request,\n  fn\n) => {\n  const tracer = getTracer()\n  return tracer.withPropagatedContext(request.headers, fn, headersGetter)\n}\n\nlet testApisIntercepted = false\n\nfunction ensureTestApisIntercepted() {\n  if (!testApisIntercepted) {\n    testApisIntercepted = true\n    if (process.env.NEXT_PRIVATE_TEST_PROXY === 'true') {\n      const {\n        interceptTestApis,\n        wrapRequestHandler,\n      } = require('next/dist/experimental/testmode/server-edge')\n      interceptTestApis()\n      propagator = wrapRequestHandler(propagator)\n    }\n  }\n}\n\nexport async function adapter(\n  params: AdapterOptions\n): Promise<FetchEventResult> {\n  ensureTestApisIntercepted()\n  await ensureInstrumentationRegistered()\n\n  // TODO-APP: use explicit marker for this\n  const isEdgeRendering = typeof self.__BUILD_MANIFEST !== 'undefined'\n\n  params.request.url = normalizeRscURL(params.request.url)\n\n  const requestUrl = new NextURL(params.request.url, {\n    headers: params.request.headers,\n    nextConfig: params.request.nextConfig,\n  })\n\n  // Iterator uses an index to keep track of the current iteration. Because of deleting and appending below we can't just use the iterator.\n  // Instead we use the keys before iteration.\n  const keys = [...requestUrl.searchParams.keys()]\n  for (const key of keys) {\n    const value = requestUrl.searchParams.getAll(key)\n\n    normalizeNextQueryParam(key, (normalizedKey) => {\n      requestUrl.searchParams.delete(normalizedKey)\n\n      for (const val of value) {\n        requestUrl.searchParams.append(normalizedKey, val)\n      }\n      requestUrl.searchParams.delete(key)\n    })\n  }\n\n  // Ensure users only see page requests, never data requests.\n  const buildId = requestUrl.buildId\n  requestUrl.buildId = ''\n\n  const isNextDataRequest = params.request.headers['x-nextjs-data']\n\n  if (isNextDataRequest && requestUrl.pathname === '/index') {\n    requestUrl.pathname = '/'\n  }\n\n  const requestHeaders = fromNodeOutgoingHttpHeaders(params.request.headers)\n  const flightHeaders = new Map()\n  // Headers should only be stripped for middleware\n  if (!isEdgeRendering) {\n    for (const header of FLIGHT_HEADERS) {\n      const key = header.toLowerCase()\n      const value = requestHeaders.get(key)\n      if (value) {\n        flightHeaders.set(key, value)\n        requestHeaders.delete(key)\n      }\n    }\n  }\n\n  const normalizeUrl = process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE\n    ? new URL(params.request.url)\n    : requestUrl\n\n  const request = new NextRequestHint({\n    page: params.page,\n    // Strip internal query parameters off the request.\n    input: stripInternalSearchParams(normalizeUrl, true).toString(),\n    init: {\n      body: params.request.body,\n      geo: params.request.geo,\n      headers: requestHeaders,\n      ip: params.request.ip,\n      method: params.request.method,\n      nextConfig: params.request.nextConfig,\n      signal: params.request.signal,\n    },\n  })\n\n  /**\n   * This allows to identify the request as a data request. The user doesn't\n   * need to know about this property neither use it. We add it for testing\n   * purposes.\n   */\n  if (isNextDataRequest) {\n    Object.defineProperty(request, '__isData', {\n      enumerable: false,\n      value: true,\n    })\n  }\n\n  if (\n    !(globalThis as any).__incrementalCache &&\n    (params as any).IncrementalCache\n  ) {\n    ;(globalThis as any).__incrementalCache = new (\n      params as any\n    ).IncrementalCache({\n      appDir: true,\n      fetchCache: true,\n      minimalMode: process.env.NODE_ENV !== 'development',\n      fetchCacheKeyPrefix: process.env.__NEXT_FETCH_CACHE_KEY_PREFIX,\n      dev: process.env.NODE_ENV === 'development',\n      requestHeaders: params.request.headers as any,\n      requestProtocol: 'https',\n      getPrerenderManifest: () => {\n        return {\n          version: -1 as any, // letting us know this doesn't conform to spec\n          routes: {},\n          dynamicRoutes: {},\n          notFoundRoutes: [],\n          preview: getEdgePreviewProps(),\n        }\n      },\n    })\n  }\n\n  const event = new NextFetchEvent({ request, page: params.page })\n  let response\n  let cookiesFromResponse\n\n  response = await propagator(request, () => {\n    // we only care to make async storage available for middleware\n    const isMiddleware =\n      params.page === '/middleware' || params.page === '/src/middleware'\n\n    if (isMiddleware) {\n      // if we're in an edge function, we only get a subset of `nextConfig` (no `experimental`),\n      // so we have to inject it via DefinePlugin.\n      // in `next start` this will be passed normally (see `NextNodeServer.runMiddleware`).\n      const isAfterEnabled =\n        params.request.nextConfig?.experimental?.after ??\n        !!process.env.__NEXT_AFTER\n\n      let waitUntil: WrapperRenderOpts['waitUntil'] = undefined\n      let closeController: CloseController | undefined = undefined\n\n      if (isAfterEnabled) {\n        waitUntil = event.waitUntil.bind(event)\n        closeController = new CloseController()\n      }\n\n      return getTracer().trace(\n        MiddlewareSpan.execute,\n        {\n          spanName: `middleware ${request.method} ${request.nextUrl.pathname}`,\n          attributes: {\n            'http.target': request.nextUrl.pathname,\n            'http.method': request.method,\n          },\n        },\n        async () => {\n          try {\n            const previewProps = getEdgePreviewProps()\n\n            return await withRequestStore(\n              requestAsyncStorage,\n              {\n                req: request,\n                url: request.nextUrl,\n                renderOpts: {\n                  onUpdateCookies: (cookies) => {\n                    cookiesFromResponse = cookies\n                  },\n                  previewProps,\n                  waitUntil,\n                  onClose: closeController\n                    ? closeController.onClose.bind(closeController)\n                    : undefined,\n                  experimental: {\n                    after: isAfterEnabled,\n                  },\n                },\n              },\n              () => params.handler(request, event)\n            )\n          } finally {\n            // middleware cannot stream, so we can consider the response closed\n            // as soon as the handler returns.\n            if (closeController) {\n              // we can delay running it until a bit later --\n              // if it's needed, we'll have a `waitUntil` lock anyway.\n              setTimeout(() => {\n                closeController!.dispatchClose()\n              }, 0)\n            }\n          }\n        }\n      )\n    }\n    return params.handler(request, event)\n  })\n\n  // check if response is a Response object\n  if (response && !(response instanceof Response)) {\n    throw new TypeError('Expected an instance of Response to be returned')\n  }\n\n  if (response && cookiesFromResponse) {\n    response.headers.set('set-cookie', cookiesFromResponse)\n  }\n\n  /**\n   * For rewrites we must always include the locale in the final pathname\n   * so we re-create the NextURL forcing it to include it when the it is\n   * an internal rewrite. Also we make sure the outgoing rewrite URL is\n   * a data URL if the request was a data request.\n   */\n  const rewrite = response?.headers.get('x-middleware-rewrite')\n  if (response && rewrite && !isEdgeRendering) {\n    const rewriteUrl = new NextURL(rewrite, {\n      forceLocale: true,\n      headers: params.request.headers,\n      nextConfig: params.request.nextConfig,\n    })\n\n    if (!process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE) {\n      if (rewriteUrl.host === request.nextUrl.host) {\n        rewriteUrl.buildId = buildId || rewriteUrl.buildId\n        response.headers.set('x-middleware-rewrite', String(rewriteUrl))\n      }\n    }\n\n    /**\n     * When the request is a data request we must show if there was a rewrite\n     * with an internal header so the client knows which component to load\n     * from the data request.\n     */\n    const relativizedRewrite = relativizeURL(\n      String(rewriteUrl),\n      String(requestUrl)\n    )\n\n    if (\n      isNextDataRequest &&\n      // if the rewrite is external and external rewrite\n      // resolving config is enabled don't add this header\n      // so the upstream app can set it instead\n      !(\n        process.env.__NEXT_EXTERNAL_MIDDLEWARE_REWRITE_RESOLVE &&\n        relativizedRewrite.match(/http(s)?:\\/\\//)\n      )\n    ) {\n      response.headers.set('x-nextjs-rewrite', relativizedRewrite)\n    }\n  }\n\n  /**\n   * For redirects we will not include the locale in case when it is the\n   * default and we must also make sure the outgoing URL is a data one if\n   * the incoming request was a data request.\n   */\n  const redirect = response?.headers.get('Location')\n  if (response && redirect && !isEdgeRendering) {\n    const redirectURL = new NextURL(redirect, {\n      forceLocale: false,\n      headers: params.request.headers,\n      nextConfig: params.request.nextConfig,\n    })\n\n    /**\n     * Responses created from redirects have immutable headers so we have\n     * to clone the response to be able to modify it.\n     */\n    response = new Response(response.body, response)\n\n    if (!process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE) {\n      if (redirectURL.host === request.nextUrl.host) {\n        redirectURL.buildId = buildId || redirectURL.buildId\n        response.headers.set('Location', String(redirectURL))\n      }\n    }\n\n    /**\n     * When the request is a data request we can't use the location header as\n     * it may end up with CORS error. Instead we map to an internal header so\n     * the client knows the destination.\n     */\n    if (isNextDataRequest) {\n      response.headers.delete('Location')\n      response.headers.set(\n        'x-nextjs-redirect',\n        relativizeURL(String(redirectURL), String(requestUrl))\n      )\n    }\n  }\n\n  const finalResponse = response ? response : NextResponse.next()\n\n  // Flight headers are not overridable / removable so they are applied at the end.\n  const middlewareOverrideHeaders = finalResponse.headers.get(\n    'x-middleware-override-headers'\n  )\n  const overwrittenHeaders: string[] = []\n  if (middlewareOverrideHeaders) {\n    for (const [key, value] of flightHeaders) {\n      finalResponse.headers.set(`x-middleware-request-${key}`, value)\n      overwrittenHeaders.push(key)\n    }\n\n    if (overwrittenHeaders.length > 0) {\n      finalResponse.headers.set(\n        'x-middleware-override-headers',\n        middlewareOverrideHeaders + ',' + overwrittenHeaders.join(',')\n      )\n    }\n  }\n\n  return {\n    response: finalResponse,\n    waitUntil: Promise.all(event[waitUntilSymbol]),\n    fetchMetrics: request.fetchMetrics,\n  }\n}\n"],"names":["PageSignatureError","fromNodeOutgoingHttpHeaders","normalizeNextQueryParam","NextFetchEvent","NextRequest","NextResponse","relativizeURL","waitUntilSymbol","NextURL","stripInternalSearchParams","normalizeRscURL","FLIGHT_HEADERS","ensureInstrumentationRegistered","withRequestStore","requestAsyncStorage","getTracer","MiddlewareSpan","CloseController","getEdgePreviewProps","NextRequestHint","constructor","params","input","init","sourcePage","page","request","respondWith","waitUntil","headersGetter","keys","headers","Array","from","get","key","undefined","propagator","fn","tracer","withPropagatedContext","testApisIntercepted","ensureTestApisIntercepted","process","env","NEXT_PRIVATE_TEST_PROXY","interceptTestApis","wrapRequestHandler","require","adapter","isEdgeRendering","self","__BUILD_MANIFEST","url","requestUrl","nextConfig","searchParams","value","getAll","normalizedKey","delete","val","append","buildId","isNextDataRequest","pathname","requestHeaders","flightHeaders","Map","header","toLowerCase","set","normalizeUrl","__NEXT_NO_MIDDLEWARE_URL_NORMALIZE","URL","toString","body","geo","ip","method","signal","Object","defineProperty","enumerable","globalThis","__incrementalCache","IncrementalCache","appDir","fetchCache","minimalMode","NODE_ENV","fetchCacheKeyPrefix","__NEXT_FETCH_CACHE_KEY_PREFIX","dev","requestProtocol","getPrerenderManifest","version","routes","dynamicRoutes","notFoundRoutes","preview","event","response","cookiesFromResponse","isMiddleware","isAfterEnabled","experimental","after","__NEXT_AFTER","closeController","bind","trace","execute","spanName","nextUrl","attributes","previewProps","req","renderOpts","onUpdateCookies","cookies","onClose","handler","setTimeout","dispatchClose","Response","TypeError","rewrite","rewriteUrl","forceLocale","host","String","relativizedRewrite","__NEXT_EXTERNAL_MIDDLEWARE_REWRITE_RESOLVE","match","redirect","redirectURL","finalResponse","next","middlewareOverrideHeaders","overwrittenHeaders","push","length","join","Promise","all","fetchMetrics"],"mappings":"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"}