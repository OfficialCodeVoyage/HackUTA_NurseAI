{"version":3,"sources":["../../../src/client/components/app-router.tsx"],"sourcesContent":["'use client'\n\nimport React, {\n  use,\n  useEffect,\n  useMemo,\n  useCallback,\n  startTransition,\n  useInsertionEffect,\n  useDeferredValue,\n} from 'react'\nimport {\n  AppRouterContext,\n  LayoutRouterContext,\n  GlobalLayoutRouterContext,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  CacheNode,\n  AppRouterInstance,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport {\n  ACTION_HMR_REFRESH,\n  ACTION_NAVIGATE,\n  ACTION_PREFETCH,\n  ACTION_REFRESH,\n  ACTION_RESTORE,\n  ACTION_SERVER_PATCH,\n  PrefetchKind,\n} from './router-reducer/router-reducer-types'\nimport type {\n  AppRouterState,\n  ReducerActions,\n  RouterChangeByServerResponse,\n  RouterNavigate,\n} from './router-reducer/router-reducer-types'\nimport { createHrefFromUrl } from './router-reducer/create-href-from-url'\nimport {\n  SearchParamsContext,\n  PathnameContext,\n  PathParamsContext,\n} from '../../shared/lib/hooks-client-context.shared-runtime'\nimport {\n  useReducerWithReduxDevtools,\n  useUnwrapState,\n  type ReduxDevtoolsSyncFn,\n} from './use-reducer-with-devtools'\nimport { ErrorBoundary, type ErrorComponent } from './error-boundary'\nimport { isBot } from '../../shared/lib/router/utils/is-bot'\nimport { addBasePath } from '../add-base-path'\nimport { AppRouterAnnouncer } from './app-router-announcer'\nimport { RedirectBoundary } from './redirect-boundary'\nimport { findHeadInCache } from './router-reducer/reducers/find-head-in-cache'\nimport { unresolvedThenable } from './unresolved-thenable'\nimport { removeBasePath } from '../remove-base-path'\nimport { hasBasePath } from '../has-base-path'\nimport { getSelectedParams } from './router-reducer/compute-changed-path'\nimport type { FlightRouterState } from '../../server/app-render/types'\nimport { useNavFailureHandler } from './nav-failure-handler'\nimport { useServerActionDispatcher } from '../app-call-server'\nimport type { AppRouterActionQueue } from '../../shared/lib/router/action-queue'\n\nconst globalMutable: {\n  pendingMpaPath?: string\n} = {}\n\nfunction isExternalURL(url: URL) {\n  return url.origin !== window.location.origin\n}\n\nfunction HistoryUpdater({\n  appRouterState,\n  sync,\n}: {\n  appRouterState: AppRouterState\n  sync: ReduxDevtoolsSyncFn\n}) {\n  useInsertionEffect(() => {\n    if (process.env.__NEXT_APP_NAV_FAIL_HANDLING) {\n      // clear pending URL as navigation is no longer\n      // in flight\n      window.next.__pendingUrl = undefined\n    }\n\n    const { tree, pushRef, canonicalUrl } = appRouterState\n    const historyState = {\n      ...(pushRef.preserveCustomHistoryState ? window.history.state : {}),\n      // Identifier is shortened intentionally.\n      // __NA is used to identify if the history entry can be handled by the app-router.\n      // __N is used to identify if the history entry can be handled by the old router.\n      __NA: true,\n      __PRIVATE_NEXTJS_INTERNALS_TREE: tree,\n    }\n    if (\n      pushRef.pendingPush &&\n      // Skip pushing an additional history entry if the canonicalUrl is the same as the current url.\n      // This mirrors the browser behavior for normal navigation.\n      createHrefFromUrl(new URL(window.location.href)) !== canonicalUrl\n    ) {\n      // This intentionally mutates React state, pushRef is overwritten to ensure additional push/replace calls do not trigger an additional history entry.\n      pushRef.pendingPush = false\n      window.history.pushState(historyState, '', canonicalUrl)\n    } else {\n      window.history.replaceState(historyState, '', canonicalUrl)\n    }\n\n    sync(appRouterState)\n  }, [appRouterState, sync])\n  return null\n}\n\nexport function createEmptyCacheNode(): CacheNode {\n  return {\n    lazyData: null,\n    rsc: null,\n    prefetchRsc: null,\n    head: null,\n    prefetchHead: null,\n    parallelRoutes: new Map(),\n    loading: null,\n  }\n}\n\n/**\n * Server response that only patches the cache and tree.\n */\nfunction useChangeByServerResponse(\n  dispatch: React.Dispatch<ReducerActions>\n): RouterChangeByServerResponse {\n  return useCallback(\n    ({ previousTree, serverResponse }) => {\n      startTransition(() => {\n        dispatch({\n          type: ACTION_SERVER_PATCH,\n          previousTree,\n          serverResponse,\n        })\n      })\n    },\n    [dispatch]\n  )\n}\n\nfunction useNavigate(dispatch: React.Dispatch<ReducerActions>): RouterNavigate {\n  return useCallback(\n    (href, navigateType, shouldScroll) => {\n      const url = new URL(addBasePath(href), location.href)\n\n      if (process.env.__NEXT_APP_NAV_FAIL_HANDLING) {\n        window.next.__pendingUrl = url\n      }\n\n      return dispatch({\n        type: ACTION_NAVIGATE,\n        url,\n        isExternalUrl: isExternalURL(url),\n        locationSearch: location.search,\n        shouldScroll: shouldScroll ?? true,\n        navigateType,\n      })\n    },\n    [dispatch]\n  )\n}\n\nfunction copyNextJsInternalHistoryState(data: any) {\n  if (data == null) data = {}\n  const currentState = window.history.state\n  const __NA = currentState?.__NA\n  if (__NA) {\n    data.__NA = __NA\n  }\n  const __PRIVATE_NEXTJS_INTERNALS_TREE =\n    currentState?.__PRIVATE_NEXTJS_INTERNALS_TREE\n  if (__PRIVATE_NEXTJS_INTERNALS_TREE) {\n    data.__PRIVATE_NEXTJS_INTERNALS_TREE = __PRIVATE_NEXTJS_INTERNALS_TREE\n  }\n\n  return data\n}\n\nfunction Head({\n  headCacheNode,\n}: {\n  headCacheNode: CacheNode | null\n}): React.ReactNode {\n  // If this segment has a `prefetchHead`, it's the statically prefetched data.\n  // We should use that on initial render instead of `head`. Then we'll switch\n  // to `head` when the dynamic response streams in.\n  const head = headCacheNode !== null ? headCacheNode.head : null\n  const prefetchHead =\n    headCacheNode !== null ? headCacheNode.prefetchHead : null\n\n  // If no prefetch data is available, then we go straight to rendering `head`.\n  const resolvedPrefetchRsc = prefetchHead !== null ? prefetchHead : head\n\n  // We use `useDeferredValue` to handle switching between the prefetched and\n  // final values. The second argument is returned on initial render, then it\n  // re-renders with the first argument.\n  //\n  // @ts-expect-error The second argument to `useDeferredValue` is only\n  // available in the experimental builds. When its disabled, it will always\n  // return `head`.\n  return useDeferredValue(head, resolvedPrefetchRsc)\n}\n\n/**\n * The global router that wraps the application components.\n */\nfunction Router({\n  actionQueue,\n  assetPrefix,\n}: {\n  actionQueue: AppRouterActionQueue\n  assetPrefix: string\n}) {\n  const [state, dispatch, sync] = useReducerWithReduxDevtools(actionQueue)\n  const { canonicalUrl } = useUnwrapState(state)\n  // Add memoized pathname/query for useSearchParams and usePathname.\n  const { searchParams, pathname } = useMemo(() => {\n    const url = new URL(\n      canonicalUrl,\n      typeof window === 'undefined' ? 'http://n' : window.location.href\n    )\n\n    return {\n      // This is turned into a readonly class in `useSearchParams`\n      searchParams: url.searchParams,\n      pathname: hasBasePath(url.pathname)\n        ? removeBasePath(url.pathname)\n        : url.pathname,\n    }\n  }, [canonicalUrl])\n\n  const changeByServerResponse = useChangeByServerResponse(dispatch)\n  const navigate = useNavigate(dispatch)\n  useServerActionDispatcher(dispatch)\n\n  /**\n   * The app router that is exposed through `useRouter`. It's only concerned with dispatching actions to the reducer, does not hold state.\n   */\n  const appRouter = useMemo<AppRouterInstance>(() => {\n    const routerInstance: AppRouterInstance = {\n      back: () => window.history.back(),\n      forward: () => window.history.forward(),\n      prefetch: (href, options) => {\n        // Don't prefetch for bots as they don't navigate.\n        if (isBot(window.navigator.userAgent)) {\n          return\n        }\n\n        let url: URL\n        try {\n          url = new URL(addBasePath(href), window.location.href)\n        } catch (_) {\n          throw new Error(\n            `Cannot prefetch '${href}' because it cannot be converted to a URL.`\n          )\n        }\n\n        // Don't prefetch during development (improves compilation performance)\n        if (process.env.NODE_ENV === 'development') {\n          return\n        }\n\n        // External urls can't be prefetched in the same way.\n        if (isExternalURL(url)) {\n          return\n        }\n        startTransition(() => {\n          dispatch({\n            type: ACTION_PREFETCH,\n            url,\n            kind: options?.kind ?? PrefetchKind.FULL,\n          })\n        })\n      },\n      replace: (href, options = {}) => {\n        startTransition(() => {\n          navigate(href, 'replace', options.scroll ?? true)\n        })\n      },\n      push: (href, options = {}) => {\n        startTransition(() => {\n          navigate(href, 'push', options.scroll ?? true)\n        })\n      },\n      refresh: () => {\n        startTransition(() => {\n          dispatch({\n            type: ACTION_REFRESH,\n            origin: window.location.origin,\n          })\n        })\n      },\n      hmrRefresh: () => {\n        if (process.env.NODE_ENV !== 'development') {\n          throw new Error(\n            'hmrRefresh can only be used in development mode. Please use refresh instead.'\n          )\n        } else {\n          startTransition(() => {\n            dispatch({\n              type: ACTION_HMR_REFRESH,\n              origin: window.location.origin,\n            })\n          })\n        }\n      },\n    }\n\n    return routerInstance\n  }, [dispatch, navigate])\n\n  useEffect(() => {\n    // Exists for debugging purposes. Don't use in application code.\n    if (window.next) {\n      window.next.router = appRouter\n    }\n  }, [appRouter])\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const { cache, prefetchCache, tree } = useUnwrapState(state)\n\n    // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      // Add `window.nd` for debugging purposes.\n      // This is not meant for use in applications as concurrent rendering will affect the cache/tree/router.\n      // @ts-ignore this is for debugging\n      window.nd = {\n        router: appRouter,\n        cache,\n        prefetchCache,\n        tree,\n      }\n    }, [appRouter, cache, prefetchCache, tree])\n  }\n\n  useEffect(() => {\n    // If the app is restored from bfcache, it's possible that\n    // pushRef.mpaNavigation is true, which would mean that any re-render of this component\n    // would trigger the mpa navigation logic again from the lines below.\n    // This will restore the router to the initial state in the event that the app is restored from bfcache.\n    function handlePageShow(event: PageTransitionEvent) {\n      if (\n        !event.persisted ||\n        !window.history.state?.__PRIVATE_NEXTJS_INTERNALS_TREE\n      ) {\n        return\n      }\n\n      // Clear the pendingMpaPath value so that a subsequent MPA navigation to the same URL can be triggered.\n      // This is necessary because if the browser restored from bfcache, the pendingMpaPath would still be set to the value\n      // of the last MPA navigation.\n      globalMutable.pendingMpaPath = undefined\n\n      dispatch({\n        type: ACTION_RESTORE,\n        url: new URL(window.location.href),\n        tree: window.history.state.__PRIVATE_NEXTJS_INTERNALS_TREE,\n      })\n    }\n\n    window.addEventListener('pageshow', handlePageShow)\n\n    return () => {\n      window.removeEventListener('pageshow', handlePageShow)\n    }\n  }, [dispatch])\n\n  // When mpaNavigation flag is set do a hard navigation to the new url.\n  // Infinitely suspend because we don't actually want to rerender any child\n  // components with the new URL and any entangled state updates shouldn't\n  // commit either (eg: useTransition isPending should stay true until the page\n  // unloads).\n  //\n  // This is a side effect in render. Don't try this at home, kids. It's\n  // probably safe because we know this is a singleton component and it's never\n  // in <Offscreen>. At least I hope so. (It will run twice in dev strict mode,\n  // but that's... fine?)\n  const { pushRef } = useUnwrapState(state)\n  if (pushRef.mpaNavigation) {\n    // if there's a re-render, we don't want to trigger another redirect if one is already in flight to the same URL\n    if (globalMutable.pendingMpaPath !== canonicalUrl) {\n      const location = window.location\n      if (pushRef.pendingPush) {\n        location.assign(canonicalUrl)\n      } else {\n        location.replace(canonicalUrl)\n      }\n\n      globalMutable.pendingMpaPath = canonicalUrl\n    }\n    // TODO-APP: Should we listen to navigateerror here to catch failed\n    // navigations somehow? And should we call window.stop() if a SPA navigation\n    // should interrupt an MPA one?\n    use(unresolvedThenable)\n  }\n\n  useEffect(() => {\n    const originalPushState = window.history.pushState.bind(window.history)\n    const originalReplaceState = window.history.replaceState.bind(\n      window.history\n    )\n\n    // Ensure the canonical URL in the Next.js Router is updated when the URL is changed so that `usePathname` and `useSearchParams` hold the pushed values.\n    const applyUrlFromHistoryPushReplace = (\n      url: string | URL | null | undefined\n    ) => {\n      const href = window.location.href\n      const tree: FlightRouterState | undefined =\n        window.history.state?.__PRIVATE_NEXTJS_INTERNALS_TREE\n\n      startTransition(() => {\n        dispatch({\n          type: ACTION_RESTORE,\n          url: new URL(url ?? href, href),\n          tree,\n        })\n      })\n    }\n\n    /**\n     * Patch pushState to ensure external changes to the history are reflected in the Next.js Router.\n     * Ensures Next.js internal history state is copied to the new history entry.\n     * Ensures usePathname and useSearchParams hold the newly provided url.\n     */\n    window.history.pushState = function pushState(\n      data: any,\n      _unused: string,\n      url?: string | URL | null\n    ): void {\n      // Avoid a loop when Next.js internals trigger pushState/replaceState\n      if (data?.__NA || data?._N) {\n        return originalPushState(data, _unused, url)\n      }\n\n      data = copyNextJsInternalHistoryState(data)\n\n      if (url) {\n        applyUrlFromHistoryPushReplace(url)\n      }\n\n      return originalPushState(data, _unused, url)\n    }\n\n    /**\n     * Patch replaceState to ensure external changes to the history are reflected in the Next.js Router.\n     * Ensures Next.js internal history state is copied to the new history entry.\n     * Ensures usePathname and useSearchParams hold the newly provided url.\n     */\n    window.history.replaceState = function replaceState(\n      data: any,\n      _unused: string,\n      url?: string | URL | null\n    ): void {\n      // Avoid a loop when Next.js internals trigger pushState/replaceState\n      if (data?.__NA || data?._N) {\n        return originalReplaceState(data, _unused, url)\n      }\n      data = copyNextJsInternalHistoryState(data)\n\n      if (url) {\n        applyUrlFromHistoryPushReplace(url)\n      }\n      return originalReplaceState(data, _unused, url)\n    }\n\n    /**\n     * Handle popstate event, this is used to handle back/forward in the browser.\n     * By default dispatches ACTION_RESTORE, however if the history entry was not pushed/replaced by app-router it will reload the page.\n     * That case can happen when the old router injected the history entry.\n     */\n    const onPopState = (event: PopStateEvent) => {\n      if (!event.state) {\n        // TODO-APP: this case only happens when pushState/replaceState was called outside of Next.js. It should probably reload the page in this case.\n        return\n      }\n\n      // This case happens when the history entry was pushed by the `pages` router.\n      if (!event.state.__NA) {\n        window.location.reload()\n        return\n      }\n\n      // TODO-APP: Ideally the back button should not use startTransition as it should apply the updates synchronously\n      // Without startTransition works if the cache is there for this path\n      startTransition(() => {\n        dispatch({\n          type: ACTION_RESTORE,\n          url: new URL(window.location.href),\n          tree: event.state.__PRIVATE_NEXTJS_INTERNALS_TREE,\n        })\n      })\n    }\n\n    // Register popstate event to call onPopstate.\n    window.addEventListener('popstate', onPopState)\n    return () => {\n      window.history.pushState = originalPushState\n      window.history.replaceState = originalReplaceState\n      window.removeEventListener('popstate', onPopState)\n    }\n  }, [dispatch])\n\n  const { cache, tree, nextUrl, focusAndScrollRef, buildId } =\n    useUnwrapState(state)\n\n  const matchingHead = useMemo(() => {\n    return findHeadInCache(cache, tree[1])\n  }, [cache, tree])\n\n  // Add memoized pathParams for useParams.\n  const pathParams = useMemo(() => {\n    return getSelectedParams(tree)\n  }, [tree])\n\n  const layoutRouterContext = useMemo(() => {\n    return {\n      childNodes: cache.parallelRoutes,\n      tree,\n      // Root node always has `url`\n      // Provided in AppTreeContext to ensure it can be overwritten in layout-router\n      url: canonicalUrl,\n      loading: cache.loading,\n    }\n  }, [cache.parallelRoutes, tree, canonicalUrl, cache.loading])\n\n  const globalLayoutRouterContext = useMemo(() => {\n    return {\n      buildId,\n      changeByServerResponse,\n      tree,\n      focusAndScrollRef,\n      nextUrl,\n    }\n  }, [buildId, changeByServerResponse, tree, focusAndScrollRef, nextUrl])\n\n  let head\n  if (matchingHead !== null) {\n    // The head is wrapped in an extra component so we can use\n    // `useDeferredValue` to swap between the prefetched and final versions of\n    // the head. (This is what LayoutRouter does for segment data, too.)\n    //\n    // The `key` is used to remount the component whenever the head moves to\n    // a different segment.\n    const [headCacheNode, headKey] = matchingHead\n    head = <Head key={headKey} headCacheNode={headCacheNode} />\n  } else {\n    head = null\n  }\n\n  let content = (\n    <RedirectBoundary>\n      {head}\n      {cache.rsc}\n      <AppRouterAnnouncer tree={tree} />\n    </RedirectBoundary>\n  )\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof window !== 'undefined') {\n      const DevRootNotFoundBoundary: typeof import('./dev-root-not-found-boundary').DevRootNotFoundBoundary =\n        require('./dev-root-not-found-boundary').DevRootNotFoundBoundary\n      content = <DevRootNotFoundBoundary>{content}</DevRootNotFoundBoundary>\n    }\n    const HotReloader: typeof import('./react-dev-overlay/app/hot-reloader-client').default =\n      require('./react-dev-overlay/app/hot-reloader-client').default\n\n    content = <HotReloader assetPrefix={assetPrefix}>{content}</HotReloader>\n  }\n\n  return (\n    <>\n      <HistoryUpdater appRouterState={useUnwrapState(state)} sync={sync} />\n      <RuntimeStyles />\n      <PathParamsContext.Provider value={pathParams}>\n        <PathnameContext.Provider value={pathname}>\n          <SearchParamsContext.Provider value={searchParams}>\n            <GlobalLayoutRouterContext.Provider\n              value={globalLayoutRouterContext}\n            >\n              <AppRouterContext.Provider value={appRouter}>\n                <LayoutRouterContext.Provider value={layoutRouterContext}>\n                  {content}\n                </LayoutRouterContext.Provider>\n              </AppRouterContext.Provider>\n            </GlobalLayoutRouterContext.Provider>\n          </SearchParamsContext.Provider>\n        </PathnameContext.Provider>\n      </PathParamsContext.Provider>\n    </>\n  )\n}\n\nexport default function AppRouter({\n  actionQueue,\n  globalErrorComponent,\n  assetPrefix,\n}: {\n  actionQueue: AppRouterActionQueue\n  globalErrorComponent: ErrorComponent\n  assetPrefix: string\n}) {\n  useNavFailureHandler()\n\n  return (\n    <ErrorBoundary errorComponent={globalErrorComponent}>\n      <Router actionQueue={actionQueue} assetPrefix={assetPrefix} />\n    </ErrorBoundary>\n  )\n}\n\nconst runtimeStyles = new Set<string>()\nlet runtimeStyleChanged = new Set<() => void>()\n\nglobalThis._N_E_STYLE_LOAD = function (href: string) {\n  let len = runtimeStyles.size\n  runtimeStyles.add(href)\n  if (runtimeStyles.size !== len) {\n    runtimeStyleChanged.forEach((cb) => cb())\n  }\n  // TODO figure out how to get a promise here\n  // But maybe it's not necessary as react would block rendering until it's loaded\n  return Promise.resolve()\n}\n\nfunction RuntimeStyles() {\n  const [, forceUpdate] = React.useState(0)\n  const renderedStylesSize = runtimeStyles.size\n  useEffect(() => {\n    const changed = () => forceUpdate((c) => c + 1)\n    runtimeStyleChanged.add(changed)\n    if (renderedStylesSize !== runtimeStyles.size) {\n      changed()\n    }\n    return () => {\n      runtimeStyleChanged.delete(changed)\n    }\n  }, [renderedStylesSize, forceUpdate])\n\n  const dplId = process.env.NEXT_DEPLOYMENT_ID\n    ? `?dpl=${process.env.NEXT_DEPLOYMENT_ID}`\n    : ''\n  return [...runtimeStyles].map((href, i) => (\n    <link\n      key={i}\n      rel=\"stylesheet\"\n      href={`${href}${dplId}`}\n      // @ts-ignore\n      precedence=\"next\"\n      // TODO figure out crossOrigin and nonce\n      // crossOrigin={TODO}\n      // nonce={TODO}\n    />\n  ))\n}\n"],"names":["React","use","useEffect","useMemo","useCallback","startTransition","useInsertionEffect","useDeferredValue","AppRouterContext","LayoutRouterContext","GlobalLayoutRouterContext","ACTION_HMR_REFRESH","ACTION_NAVIGATE","ACTION_PREFETCH","ACTION_REFRESH","ACTION_RESTORE","ACTION_SERVER_PATCH","PrefetchKind","createHrefFromUrl","SearchParamsContext","PathnameContext","PathParamsContext","useReducerWithReduxDevtools","useUnwrapState","ErrorBoundary","isBot","addBasePath","AppRouterAnnouncer","RedirectBoundary","findHeadInCache","unresolvedThenable","removeBasePath","hasBasePath","getSelectedParams","useNavFailureHandler","useServerActionDispatcher","globalMutable","isExternalURL","url","origin","window","location","HistoryUpdater","appRouterState","sync","process","env","__NEXT_APP_NAV_FAIL_HANDLING","next","__pendingUrl","undefined","tree","pushRef","canonicalUrl","historyState","preserveCustomHistoryState","history","state","__NA","__PRIVATE_NEXTJS_INTERNALS_TREE","pendingPush","URL","href","pushState","replaceState","createEmptyCacheNode","lazyData","rsc","prefetchRsc","head","prefetchHead","parallelRoutes","Map","loading","useChangeByServerResponse","dispatch","previousTree","serverResponse","type","useNavigate","navigateType","shouldScroll","isExternalUrl","locationSearch","search","copyNextJsInternalHistoryState","data","currentState","Head","headCacheNode","resolvedPrefetchRsc","Router","actionQueue","assetPrefix","searchParams","pathname","changeByServerResponse","navigate","appRouter","routerInstance","back","forward","prefetch","options","navigator","userAgent","_","Error","NODE_ENV","kind","FULL","replace","scroll","push","refresh","hmrRefresh","router","cache","prefetchCache","nd","handlePageShow","event","persisted","pendingMpaPath","addEventListener","removeEventListener","mpaNavigation","assign","originalPushState","bind","originalReplaceState","applyUrlFromHistoryPushReplace","_unused","_N","onPopState","reload","nextUrl","focusAndScrollRef","buildId","matchingHead","pathParams","layoutRouterContext","childNodes","globalLayoutRouterContext","headKey","content","DevRootNotFoundBoundary","require","HotReloader","default","RuntimeStyles","Provider","value","AppRouter","globalErrorComponent","errorComponent","runtimeStyles","Set","runtimeStyleChanged","globalThis","_N_E_STYLE_LOAD","len","size","add","forEach","cb","Promise","resolve","forceUpdate","useState","renderedStylesSize","changed","c","delete","dplId","NEXT_DEPLOYMENT_ID","map","i","link","rel","precedence"],"mappings":"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"}