{"version":3,"sources":["../../../../../src/client/components/router-reducer/reducers/server-action-reducer.ts"],"sourcesContent":["import type {\n  ActionFlightResponse,\n  ActionResult,\n  FlightData,\n} from '../../../../server/app-render/types'\nimport { callServer } from '../../../app-call-server'\nimport {\n  ACTION_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_URL,\n  RSC_CONTENT_TYPE_HEADER,\n} from '../../app-router-headers'\n// // eslint-disable-next-line import/no-extraneous-dependencies\n// import { createFromFetch } from 'react-server-dom-webpack/client'\n// // eslint-disable-next-line import/no-extraneous-dependencies\n// import { encodeReply } from 'react-server-dom-webpack/client'\nconst { createFromFetch, encodeReply } = (\n  !!process.env.NEXT_RUNTIME\n    ? // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge')\n    : // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client')\n) as typeof import('react-server-dom-webpack/client')\n\nimport type {\n  ReadonlyReducerState,\n  ReducerState,\n  ServerActionAction,\n  ServerActionMutable,\n} from '../router-reducer-types'\nimport { addBasePath } from '../../../add-base-path'\nimport { createHrefFromUrl } from '../create-href-from-url'\nimport { handleExternalUrl } from './navigate-reducer'\nimport { applyRouterStatePatchToTree } from '../apply-router-state-patch-to-tree'\nimport { isNavigatingToNewRootLayout } from '../is-navigating-to-new-root-layout'\nimport type { CacheNode } from '../../../../shared/lib/app-router-context.shared-runtime'\nimport { handleMutable } from '../handle-mutable'\nimport { fillLazyItemsTillLeafWithHead } from '../fill-lazy-items-till-leaf-with-head'\nimport { createEmptyCacheNode } from '../../app-router'\nimport { hasInterceptionRouteInCurrentTree } from './has-interception-route-in-current-tree'\nimport { handleSegmentMismatch } from '../handle-segment-mismatch'\nimport { refreshInactiveParallelSegments } from '../refetch-inactive-parallel-segments'\n\ntype FetchServerActionResult = {\n  redirectLocation: URL | undefined\n  actionResult?: ActionResult\n  actionFlightData?: FlightData | undefined | null\n  revalidatedParts: {\n    tag: boolean\n    cookie: boolean\n    paths: string[]\n  }\n}\n\nasync function fetchServerAction(\n  state: ReadonlyReducerState,\n  nextUrl: ReadonlyReducerState['nextUrl'],\n  { actionId, actionArgs }: ServerActionAction\n): Promise<FetchServerActionResult> {\n  const body = await encodeReply(actionArgs)\n\n  const res = await fetch('', {\n    method: 'POST',\n    headers: {\n      Accept: RSC_CONTENT_TYPE_HEADER,\n      [ACTION_HEADER]: actionId,\n      [NEXT_ROUTER_STATE_TREE_HEADER]: encodeURIComponent(\n        JSON.stringify(state.tree)\n      ),\n      ...(process.env.NEXT_DEPLOYMENT_ID\n        ? {\n            'x-deployment-id': process.env.NEXT_DEPLOYMENT_ID,\n          }\n        : {}),\n      ...(nextUrl\n        ? {\n            [NEXT_URL]: nextUrl,\n          }\n        : {}),\n    },\n    body,\n  })\n\n  const location = res.headers.get('x-action-redirect')\n  let revalidatedParts: FetchServerActionResult['revalidatedParts']\n  try {\n    const revalidatedHeader = JSON.parse(\n      res.headers.get('x-action-revalidated') || '[[],0,0]'\n    )\n    revalidatedParts = {\n      paths: revalidatedHeader[0] || [],\n      tag: !!revalidatedHeader[1],\n      cookie: revalidatedHeader[2],\n    }\n  } catch (e) {\n    revalidatedParts = {\n      paths: [],\n      tag: false,\n      cookie: false,\n    }\n  }\n\n  const redirectLocation = location\n    ? new URL(\n        addBasePath(location),\n        // Ensure relative redirects in Server Actions work, e.g. redirect('./somewhere-else')\n        new URL(state.canonicalUrl, window.location.href)\n      )\n    : undefined\n\n  const contentType = res.headers.get('content-type')\n\n  if (contentType === RSC_CONTENT_TYPE_HEADER) {\n    const response: ActionFlightResponse = await createFromFetch(\n      Promise.resolve(res),\n      {\n        callServer,\n      }\n    )\n\n    if (location) {\n      // if it was a redirection, then result is just a regular RSC payload\n      return {\n        actionFlightData: response.f,\n        redirectLocation,\n        revalidatedParts,\n      }\n    }\n\n    return {\n      actionResult: response.a,\n      actionFlightData: response.f,\n      redirectLocation,\n      revalidatedParts,\n    }\n  }\n\n  // Handle invalid server action responses\n  if (res.status >= 400) {\n    // The server can respond with a text/plain error message, but we'll fallback to something generic\n    // if there isn't one.\n    const error =\n      contentType === 'text/plain'\n        ? await res.text()\n        : 'An unexpected response was received from the server.'\n\n    throw new Error(error)\n  }\n\n  return {\n    redirectLocation,\n    revalidatedParts,\n  }\n}\n\n/*\n * This reducer is responsible for calling the server action and processing any side-effects from the server action.\n * It does not mutate the state by itself but rather delegates to other reducers to do the actual mutation.\n */\nexport function serverActionReducer(\n  state: ReadonlyReducerState,\n  action: ServerActionAction\n): ReducerState {\n  const { resolve, reject } = action\n  const mutable: ServerActionMutable = {}\n  const href = state.canonicalUrl\n\n  let currentTree = state.tree\n\n  mutable.preserveCustomHistoryState = false\n\n  // only pass along the `nextUrl` param (used for interception routes) if the current route was intercepted.\n  // If the route has been intercepted, the action should be as well.\n  // Otherwise the server action might be intercepted with the wrong action id\n  // (ie, one that corresponds with the intercepted route)\n  const nextUrl =\n    state.nextUrl && hasInterceptionRouteInCurrentTree(state.tree)\n      ? state.nextUrl\n      : null\n\n  return fetchServerAction(state, nextUrl, action).then(\n    async ({\n      actionResult,\n      actionFlightData: flightData,\n      redirectLocation,\n    }) => {\n      // Make sure the redirection is a push instead of a replace.\n      // Issue: https://github.com/vercel/next.js/issues/53911\n      if (redirectLocation) {\n        state.pushRef.pendingPush = true\n        mutable.pendingPush = true\n      }\n\n      if (!flightData) {\n        resolve(actionResult)\n\n        // If there is a redirect but no flight data we need to do a mpaNavigation.\n        if (redirectLocation) {\n          return handleExternalUrl(\n            state,\n            mutable,\n            redirectLocation.href,\n            state.pushRef.pendingPush\n          )\n        }\n        return state\n      }\n\n      if (typeof flightData === 'string') {\n        // Handle case when navigating to page in `pages` from `app`\n        return handleExternalUrl(\n          state,\n          mutable,\n          flightData,\n          state.pushRef.pendingPush\n        )\n      }\n\n      if (redirectLocation) {\n        const newHref = createHrefFromUrl(redirectLocation, false)\n        mutable.canonicalUrl = newHref\n      }\n\n      for (const flightDataPath of flightData) {\n        // FlightDataPath with more than two items means unexpected Flight data was returned\n        if (flightDataPath.length !== 3) {\n          // TODO-APP: handle this case better\n          console.log('SERVER ACTION APPLY FAILED')\n          return state\n        }\n\n        // Given the path can only have two items the items are only the router state and rsc for the root.\n        const [treePatch] = flightDataPath\n        const newTree = applyRouterStatePatchToTree(\n          // TODO-APP: remove ''\n          [''],\n          currentTree,\n          treePatch,\n          redirectLocation\n            ? createHrefFromUrl(redirectLocation)\n            : state.canonicalUrl\n        )\n\n        if (newTree === null) {\n          return handleSegmentMismatch(state, action, treePatch)\n        }\n\n        if (isNavigatingToNewRootLayout(currentTree, newTree)) {\n          return handleExternalUrl(\n            state,\n            mutable,\n            href,\n            state.pushRef.pendingPush\n          )\n        }\n\n        // The one before last item is the router state tree patch\n        const [cacheNodeSeedData, head] = flightDataPath.slice(-2)\n        const rsc = cacheNodeSeedData !== null ? cacheNodeSeedData[2] : null\n\n        // Handles case where prefetch only returns the router tree patch without rendered components.\n        if (rsc !== null) {\n          const cache: CacheNode = createEmptyCacheNode()\n          cache.rsc = rsc\n          cache.prefetchRsc = null\n          cache.loading = cacheNodeSeedData[3]\n          fillLazyItemsTillLeafWithHead(\n            cache,\n            // Existing cache is not passed in as `router.refresh()` has to invalidate the entire cache.\n            undefined,\n            treePatch,\n            cacheNodeSeedData,\n            head\n          )\n\n          await refreshInactiveParallelSegments({\n            state,\n            updatedTree: newTree,\n            updatedCache: cache,\n            includeNextUrl: Boolean(nextUrl),\n            canonicalUrl: mutable.canonicalUrl || state.canonicalUrl,\n          })\n\n          mutable.cache = cache\n          mutable.prefetchCache = new Map()\n        }\n\n        mutable.patchedTree = newTree\n        currentTree = newTree\n      }\n\n      resolve(actionResult)\n\n      return handleMutable(state, mutable)\n    },\n    (e: any) => {\n      // When the server action is rejected we don't update the state and instead call the reject handler of the promise.\n      reject(e)\n\n      return state\n    }\n  )\n}\n"],"names":["callServer","ACTION_HEADER","NEXT_ROUTER_STATE_TREE_HEADER","NEXT_URL","RSC_CONTENT_TYPE_HEADER","createFromFetch","encodeReply","process","env","NEXT_RUNTIME","require","addBasePath","createHrefFromUrl","handleExternalUrl","applyRouterStatePatchToTree","isNavigatingToNewRootLayout","handleMutable","fillLazyItemsTillLeafWithHead","createEmptyCacheNode","hasInterceptionRouteInCurrentTree","handleSegmentMismatch","refreshInactiveParallelSegments","fetchServerAction","state","nextUrl","actionId","actionArgs","body","res","fetch","method","headers","Accept","encodeURIComponent","JSON","stringify","tree","NEXT_DEPLOYMENT_ID","location","get","revalidatedParts","revalidatedHeader","parse","paths","tag","cookie","e","redirectLocation","URL","canonicalUrl","window","href","undefined","contentType","response","Promise","resolve","actionFlightData","f","actionResult","a","status","error","text","Error","serverActionReducer","action","reject","mutable","currentTree","preserveCustomHistoryState","then","flightData","pushRef","pendingPush","newHref","flightDataPath","length","console","log","treePatch","newTree","cacheNodeSeedData","head","slice","rsc","cache","prefetchRsc","loading","updatedTree","updatedCache","includeNextUrl","Boolean","prefetchCache","Map","patchedTree"],"mappings":"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"}