{"version":3,"sources":["../../../../src/client/components/router-reducer/create-initial-router-state.ts"],"sourcesContent":["import type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport type { FlightDataPath } from '../../../server/app-render/types'\n\nimport { createHrefFromUrl } from './create-href-from-url'\nimport { fillLazyItemsTillLeafWithHead } from './fill-lazy-items-till-leaf-with-head'\nimport { extractPathFromFlightRouterState } from './compute-changed-path'\nimport { createPrefetchCacheEntryForInitialLoad } from './prefetch-cache-utils'\nimport { PrefetchKind, type PrefetchCacheEntry } from './router-reducer-types'\nimport { addRefreshMarkerToActiveParallelSegments } from './refetch-inactive-parallel-segments'\n\nexport interface InitialRouterStateParameters {\n  buildId: string\n  initialCanonicalUrl: string\n  initialParallelRoutes: CacheNode['parallelRoutes']\n  initialFlightData: FlightDataPath[]\n  location: Location | null\n  couldBeIntercepted?: boolean\n}\n\nexport function createInitialRouterState({\n  buildId,\n  initialFlightData,\n  initialCanonicalUrl,\n  initialParallelRoutes,\n  location,\n  couldBeIntercepted,\n}: InitialRouterStateParameters) {\n  // The initialFlightData is an array of FlightDataPath arrays.\n  // For the root render, there'll only be a top-level FlightDataPath array.\n  const [initialTree, initialSeedData, initialHead] = initialFlightData[0]\n  const isServer = !location\n  const rsc = initialSeedData[2]\n\n  const cache: CacheNode = {\n    lazyData: null,\n    rsc: rsc,\n    prefetchRsc: null,\n    head: null,\n    prefetchHead: null,\n    // The cache gets seeded during the first render. `initialParallelRoutes` ensures the cache from the first render is there during the second render.\n    parallelRoutes: isServer ? new Map() : initialParallelRoutes,\n    loading: initialSeedData[3],\n  }\n\n  const canonicalUrl =\n    // location.href is read as the initial value for canonicalUrl in the browser\n    // This is safe to do as canonicalUrl can't be rendered, it's only used to control the history updates in the useEffect further down in this file.\n    location\n      ? // window.location does not have the same type as URL but has all the fields createHrefFromUrl needs.\n        createHrefFromUrl(location)\n      : initialCanonicalUrl\n\n  addRefreshMarkerToActiveParallelSegments(initialTree, canonicalUrl)\n\n  const prefetchCache = new Map<string, PrefetchCacheEntry>()\n\n  // When the cache hasn't been seeded yet we fill the cache with the head.\n  if (initialParallelRoutes === null || initialParallelRoutes.size === 0) {\n    fillLazyItemsTillLeafWithHead(\n      cache,\n      undefined,\n      initialTree,\n      initialSeedData,\n      initialHead\n    )\n  }\n\n  const initialState = {\n    buildId,\n    tree: initialTree,\n    cache,\n    prefetchCache,\n    pushRef: {\n      pendingPush: false,\n      mpaNavigation: false,\n      // First render needs to preserve the previous window.history.state\n      // to avoid it being overwritten on navigation back/forward with MPA Navigation.\n      preserveCustomHistoryState: true,\n    },\n    focusAndScrollRef: {\n      apply: false,\n      onlyHashChange: false,\n      hashFragment: null,\n      segmentPaths: [],\n    },\n    canonicalUrl,\n    nextUrl:\n      // the || operator is intentional, the pathname can be an empty string\n      (extractPathFromFlightRouterState(initialTree) || location?.pathname) ??\n      null,\n  }\n\n  if (location) {\n    // Seed the prefetch cache with this page's data.\n    // This is to prevent needlessly re-prefetching a page that is already reusable,\n    // and will avoid triggering a loading state/data fetch stall when navigating back to the page.\n    const url = new URL(\n      `${location.pathname}${location.search}`,\n      location.origin\n    )\n\n    createPrefetchCacheEntryForInitialLoad({\n      url,\n      kind: PrefetchKind.AUTO,\n      data: {\n        f: initialFlightData,\n        c: undefined,\n        i: !!couldBeIntercepted,\n        // TODO: the server should probably send a value for this. Default to false for now.\n        p: false,\n      },\n      tree: initialState.tree,\n      prefetchCache: initialState.prefetchCache,\n      nextUrl: initialState.nextUrl,\n    })\n  }\n\n  return initialState\n}\n"],"names":["createHrefFromUrl","fillLazyItemsTillLeafWithHead","extractPathFromFlightRouterState","createPrefetchCacheEntryForInitialLoad","PrefetchKind","addRefreshMarkerToActiveParallelSegments","createInitialRouterState","buildId","initialFlightData","initialCanonicalUrl","initialParallelRoutes","location","couldBeIntercepted","initialTree","initialSeedData","initialHead","isServer","rsc","cache","lazyData","prefetchRsc","head","prefetchHead","parallelRoutes","Map","loading","canonicalUrl","prefetchCache","size","undefined","initialState","tree","pushRef","pendingPush","mpaNavigation","preserveCustomHistoryState","focusAndScrollRef","apply","onlyHashChange","hashFragment","segmentPaths","nextUrl","pathname","url","URL","search","origin","kind","AUTO","data","f","c","i","p"],"mappings":"AAGA,SAASA,iBAAiB,QAAQ,yBAAwB;AAC1D,SAASC,6BAA6B,QAAQ,wCAAuC;AACrF,SAASC,gCAAgC,QAAQ,yBAAwB;AACzE,SAASC,sCAAsC,QAAQ,yBAAwB;AAC/E,SAASC,YAAY,QAAiC,yBAAwB;AAC9E,SAASC,wCAAwC,QAAQ,uCAAsC;AAW/F,OAAO,SAASC,yBAAyB,KAOV;IAPU,IAAA,EACvCC,OAAO,EACPC,iBAAiB,EACjBC,mBAAmB,EACnBC,qBAAqB,EACrBC,QAAQ,EACRC,kBAAkB,EACW,GAPU;IAQvC,8DAA8D;IAC9D,0EAA0E;IAC1E,MAAM,CAACC,aAAaC,iBAAiBC,YAAY,GAAGP,iBAAiB,CAAC,EAAE;IACxE,MAAMQ,WAAW,CAACL;IAClB,MAAMM,MAAMH,eAAe,CAAC,EAAE;IAE9B,MAAMI,QAAmB;QACvBC,UAAU;QACVF,KAAKA;QACLG,aAAa;QACbC,MAAM;QACNC,cAAc;QACd,oJAAoJ;QACpJC,gBAAgBP,WAAW,IAAIQ,QAAQd;QACvCe,SAASX,eAAe,CAAC,EAAE;IAC7B;IAEA,MAAMY,eACJ,6EAA6E;IAC7E,kJAAkJ;IAClJf,WAEIX,kBAAkBW,YAClBF;IAENJ,yCAAyCQ,aAAaa;IAEtD,MAAMC,gBAAgB,IAAIH;IAE1B,yEAAyE;IACzE,IAAId,0BAA0B,QAAQA,sBAAsBkB,IAAI,KAAK,GAAG;QACtE3B,8BACEiB,OACAW,WACAhB,aACAC,iBACAC;IAEJ;QAsBI,sEAAsE;IACrEb;IArBL,MAAM4B,eAAe;QACnBvB;QACAwB,MAAMlB;QACNK;QACAS;QACAK,SAAS;YACPC,aAAa;YACbC,eAAe;YACf,mEAAmE;YACnE,gFAAgF;YAChFC,4BAA4B;QAC9B;QACAC,mBAAmB;YACjBC,OAAO;YACPC,gBAAgB;YAChBC,cAAc;YACdC,cAAc,EAAE;QAClB;QACAd;QACAe,SAEE,CAACvC,OAAAA,iCAAiCW,iBAAgBF,4BAAAA,SAAU+B,QAAQ,aAAnExC,OACD;IACJ;IAEA,IAAIS,UAAU;QACZ,iDAAiD;QACjD,gFAAgF;QAChF,+FAA+F;QAC/F,MAAMgC,MAAM,IAAIC,IACd,AAAC,KAAEjC,SAAS+B,QAAQ,GAAG/B,SAASkC,MAAM,EACtClC,SAASmC,MAAM;QAGjB3C,uCAAuC;YACrCwC;YACAI,MAAM3C,aAAa4C,IAAI;YACvBC,MAAM;gBACJC,GAAG1C;gBACH2C,GAAGtB;gBACHuB,GAAG,CAAC,CAACxC;gBACL,oFAAoF;gBACpFyC,GAAG;YACL;YACAtB,MAAMD,aAAaC,IAAI;YACvBJ,eAAeG,aAAaH,aAAa;YACzCc,SAASX,aAAaW,OAAO;QAC/B;IACF;IAEA,OAAOX;AACT"}