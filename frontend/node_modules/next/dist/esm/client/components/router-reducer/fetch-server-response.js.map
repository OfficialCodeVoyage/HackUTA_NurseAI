{"version":3,"sources":["../../../../src/client/components/router-reducer/fetch-server-response.ts"],"sourcesContent":["'use client'\n\n// @ts-ignore\n// eslint-disable-next-line import/no-extraneous-dependencies\n// import { createFromFetch } from 'react-server-dom-webpack/client'\nconst { createFromFetch } = (\n  !!process.env.NEXT_RUNTIME\n    ? // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge')\n    : // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client')\n) as typeof import('react-server-dom-webpack/client')\n\nimport type {\n  FlightRouterState,\n  NavigationFlightResponse,\n  FetchServerResponseResult,\n} from '../../../server/app-render/types'\nimport {\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_RSC_UNION_QUERY,\n  NEXT_URL,\n  RSC_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n  NEXT_HMR_REFRESH_HEADER,\n  NEXT_IS_PRERENDER_HEADER,\n} from '../app-router-headers'\nimport { callServer } from '../../app-call-server'\nimport { PrefetchKind } from './router-reducer-types'\nimport { hexHash } from '../../../shared/lib/hash'\n\nexport interface FetchServerResponseOptions {\n  readonly flightRouterState: FlightRouterState\n  readonly nextUrl: string | null\n  readonly buildId: string\n  readonly prefetchKind?: PrefetchKind\n  readonly isHmrRefresh?: boolean\n}\n\nfunction urlToUrlWithoutFlightMarker(url: string): URL {\n  const urlWithoutFlightParameters = new URL(url, location.origin)\n  urlWithoutFlightParameters.searchParams.delete(NEXT_RSC_UNION_QUERY)\n  if (process.env.NODE_ENV === 'production') {\n    if (\n      process.env.__NEXT_CONFIG_OUTPUT === 'export' &&\n      urlWithoutFlightParameters.pathname.endsWith('.txt')\n    ) {\n      const { pathname } = urlWithoutFlightParameters\n      const length = pathname.endsWith('/index.txt') ? 10 : 4\n      // Slice off `/index.txt` or `.txt` from the end of the pathname\n      urlWithoutFlightParameters.pathname = pathname.slice(0, -length)\n    }\n  }\n  return urlWithoutFlightParameters\n}\n\nfunction doMpaNavigation(url: string): FetchServerResponseResult {\n  return {\n    f: urlToUrlWithoutFlightMarker(url).toString(),\n    c: undefined,\n    i: false,\n    p: false,\n  }\n}\n\n/**\n * Fetch the flight data for the provided url. Takes in the current router state\n * to decide what to render server-side.\n */\nexport async function fetchServerResponse(\n  url: URL,\n  options: FetchServerResponseOptions\n): Promise<FetchServerResponseResult> {\n  const { flightRouterState, nextUrl, buildId, prefetchKind } = options\n\n  const headers: {\n    [RSC_HEADER]: '1'\n    [NEXT_ROUTER_STATE_TREE_HEADER]: string\n    [NEXT_URL]?: string\n    [NEXT_ROUTER_PREFETCH_HEADER]?: '1'\n    [NEXT_HMR_REFRESH_HEADER]?: '1'\n    // A header that is only added in test mode to assert on fetch priority\n    'Next-Test-Fetch-Priority'?: RequestInit['priority']\n  } = {\n    // Enable flight response\n    [RSC_HEADER]: '1',\n    // Provide the current router state\n    [NEXT_ROUTER_STATE_TREE_HEADER]: encodeURIComponent(\n      JSON.stringify(flightRouterState)\n    ),\n  }\n\n  /**\n   * Three cases:\n   * - `prefetchKind` is `undefined`, it means it's a normal navigation, so we want to prefetch the page data fully\n   * - `prefetchKind` is `full` - we want to prefetch the whole page so same as above\n   * - `prefetchKind` is `auto` - if the page is dynamic, prefetch the page data partially, if static prefetch the page data fully\n   */\n  if (prefetchKind === PrefetchKind.AUTO) {\n    headers[NEXT_ROUTER_PREFETCH_HEADER] = '1'\n  }\n\n  if (process.env.NODE_ENV === 'development' && options.isHmrRefresh) {\n    headers[NEXT_HMR_REFRESH_HEADER] = '1'\n  }\n\n  if (nextUrl) {\n    headers[NEXT_URL] = nextUrl\n  }\n\n  const uniqueCacheQuery = hexHash(\n    [\n      headers[NEXT_ROUTER_PREFETCH_HEADER] || '0',\n      headers[NEXT_ROUTER_STATE_TREE_HEADER],\n      headers[NEXT_URL],\n    ].join(',')\n  )\n\n  try {\n    let fetchUrl = new URL(url)\n    if (process.env.NODE_ENV === 'production') {\n      if (process.env.__NEXT_CONFIG_OUTPUT === 'export') {\n        if (fetchUrl.pathname.endsWith('/')) {\n          fetchUrl.pathname += 'index.txt'\n        } else {\n          fetchUrl.pathname += '.txt'\n        }\n      }\n    }\n\n    // Add unique cache query to avoid caching conflicts on CDN which don't respect the Vary header\n    fetchUrl.searchParams.set(NEXT_RSC_UNION_QUERY, uniqueCacheQuery)\n\n    // When creating a \"temporary\" prefetch (the \"on-demand\" prefetch that gets created on navigation, if one doesn't exist)\n    // we send the request with a \"high\" priority as it's in response to a user interaction that could be blocking a transition.\n    // Otherwise, all other prefetches are sent with a \"low\" priority.\n    // We use \"auto\" for in all other cases to match the existing default, as this function is shared outside of prefetching.\n    const fetchPriority = prefetchKind\n      ? prefetchKind === PrefetchKind.TEMPORARY\n        ? 'high'\n        : 'low'\n      : 'auto'\n\n    if (process.env.__NEXT_TEST_MODE) {\n      headers['Next-Test-Fetch-Priority'] = fetchPriority\n    }\n\n    const res = await fetch(fetchUrl, {\n      // Backwards compat for older browsers. `same-origin` is the default in modern browsers.\n      credentials: 'same-origin',\n      headers,\n      priority: fetchPriority,\n    })\n\n    const responseUrl = urlToUrlWithoutFlightMarker(res.url)\n    const canonicalUrl = res.redirected ? responseUrl : undefined\n\n    const contentType = res.headers.get('content-type') || ''\n    const interception = !!res.headers.get('vary')?.includes(NEXT_URL)\n    const isPrerender = !!res.headers.get(NEXT_IS_PRERENDER_HEADER)\n    let isFlightResponse = contentType === RSC_CONTENT_TYPE_HEADER\n\n    if (process.env.NODE_ENV === 'production') {\n      if (process.env.__NEXT_CONFIG_OUTPUT === 'export') {\n        if (!isFlightResponse) {\n          isFlightResponse = contentType.startsWith('text/plain')\n        }\n      }\n    }\n\n    // If fetch returns something different than flight response handle it like a mpa navigation\n    // If the fetch was not 200, we also handle it like a mpa navigation\n    if (!isFlightResponse || !res.ok) {\n      // in case the original URL came with a hash, preserve it before redirecting to the new URL\n      if (url.hash) {\n        responseUrl.hash = url.hash\n      }\n\n      return doMpaNavigation(responseUrl.toString())\n    }\n\n    // Handle the `fetch` readable stream that can be unwrapped by `React.use`.\n    const response: NavigationFlightResponse = await createFromFetch(\n      Promise.resolve(res),\n      {\n        callServer,\n      }\n    )\n\n    if (buildId !== response.b) {\n      return doMpaNavigation(res.url)\n    }\n\n    return {\n      f: response.f,\n      c: canonicalUrl,\n      i: interception,\n      p: isPrerender,\n    }\n  } catch (err) {\n    console.error(\n      `Failed to fetch RSC payload for ${url}. Falling back to browser navigation.`,\n      err\n    )\n    // If fetch fails handle it like a mpa navigation\n    // TODO-APP: Add a test for the case where a CORS request fails, e.g. external url redirect coming from the response.\n    // See https://github.com/vercel/next.js/issues/43605#issuecomment-1451617521 for a reproduction.\n    return {\n      f: url.toString(),\n      c: undefined,\n      i: false,\n      p: false,\n    }\n  }\n}\n"],"names":["createFromFetch","process","env","NEXT_RUNTIME","require","NEXT_ROUTER_PREFETCH_HEADER","NEXT_ROUTER_STATE_TREE_HEADER","NEXT_RSC_UNION_QUERY","NEXT_URL","RSC_HEADER","RSC_CONTENT_TYPE_HEADER","NEXT_HMR_REFRESH_HEADER","NEXT_IS_PRERENDER_HEADER","callServer","PrefetchKind","hexHash","urlToUrlWithoutFlightMarker","url","urlWithoutFlightParameters","URL","location","origin","searchParams","delete","NODE_ENV","__NEXT_CONFIG_OUTPUT","pathname","endsWith","length","slice","doMpaNavigation","f","toString","c","undefined","i","p","fetchServerResponse","options","flightRouterState","nextUrl","buildId","prefetchKind","headers","encodeURIComponent","JSON","stringify","AUTO","isHmrRefresh","uniqueCacheQuery","join","res","fetchUrl","set","fetchPriority","TEMPORARY","__NEXT_TEST_MODE","fetch","credentials","priority","responseUrl","canonicalUrl","redirected","contentType","get","interception","includes","isPrerender","isFlightResponse","startsWith","ok","hash","response","Promise","resolve","b","err","console","error"],"mappings":"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"}