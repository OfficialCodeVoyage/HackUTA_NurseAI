{"version":3,"sources":["../../../src/client/components/request-async-storage.external.ts"],"sourcesContent":["import type { AsyncLocalStorage } from 'async_hooks'\nimport type { DraftModeProvider } from '../../server/async-storage/draft-mode-provider'\nimport type { ResponseCookies } from '../../server/web/spec-extension/cookies'\nimport type { ReadonlyHeaders } from '../../server/web/spec-extension/adapters/headers'\nimport type { ReadonlyRequestCookies } from '../../server/web/spec-extension/adapters/request-cookies'\n\n// Share the instance module in the next-shared layer\nimport { requestAsyncStorage } from './request-async-storage-instance' with { 'turbopack-transition': 'next-shared' }\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\nimport type { AfterContext } from '../../server/after/after-context'\nimport type { ServerComponentsHmrCache } from '../../server/response-cache'\n\nexport interface RequestStore {\n  /**\n   * The URL of the request. This only specifies the pathname and the search\n   * part of the URL.\n   */\n  readonly url: {\n    /**\n     * The pathname of the requested URL.\n     */\n    readonly pathname: string\n\n    /**\n     * The search part of the requested URL. If the request did not provide a\n     * search part, this will be an empty string.\n     */\n    readonly search: string\n  }\n\n  readonly headers: ReadonlyHeaders\n  readonly cookies: ReadonlyRequestCookies\n  readonly mutableCookies: ResponseCookies\n  readonly draftMode: DraftModeProvider\n  readonly reactLoadableManifest: DeepReadonly<\n    Record<string, { files: string[] }>\n  >\n  readonly assetPrefix: string\n  readonly afterContext: AfterContext | undefined\n  readonly isHmrRefresh?: boolean\n  readonly serverComponentsHmrCache?: ServerComponentsHmrCache\n}\n\nexport type RequestAsyncStorage = AsyncLocalStorage<RequestStore>\n\nexport { requestAsyncStorage }\n\nexport function getExpectedRequestStore(callingExpression: string) {\n  const store = requestAsyncStorage.getStore()\n  if (store) return store\n  throw new Error(\n    `\\`${callingExpression}\\` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context`\n  )\n}\n"],"names":["requestAsyncStorage","getExpectedRequestStore","callingExpression","store","getStore","Error"],"mappings":"AAMA,qDAAqD;AACrD,SAASA,mBAAmB,QAAQ,wCAAwC;IAAE,wBAAwB;AAAc,EAAC;AAsCrH,SAASA,mBAAmB,GAAE;AAE9B,OAAO,SAASC,wBAAwBC,iBAAyB;IAC/D,MAAMC,QAAQH,oBAAoBI,QAAQ;IAC1C,IAAID,OAAO,OAAOA;IAClB,MAAM,IAAIE,MACR,AAAC,MAAIH,oBAAkB;AAE3B"}