{"version":3,"sources":["../../../src/client/components/redirect.ts"],"sourcesContent":["import { requestAsyncStorage } from './request-async-storage.external'\nimport type { ResponseCookies } from '../../server/web/spec-extension/cookies'\nimport { actionAsyncStorage } from './action-async-storage.external'\nimport { RedirectStatusCode } from './redirect-status-code'\n\nconst REDIRECT_ERROR_CODE = 'NEXT_REDIRECT'\n\nexport enum RedirectType {\n  push = 'push',\n  replace = 'replace',\n}\n\nexport type RedirectError<U extends string> = Error & {\n  digest: `${typeof REDIRECT_ERROR_CODE};${RedirectType};${U};${RedirectStatusCode};`\n  mutableCookies: ResponseCookies\n}\n\nexport function getRedirectError(\n  url: string,\n  type: RedirectType,\n  statusCode: RedirectStatusCode = RedirectStatusCode.TemporaryRedirect\n): RedirectError<typeof url> {\n  const error = new Error(REDIRECT_ERROR_CODE) as RedirectError<typeof url>\n  error.digest = `${REDIRECT_ERROR_CODE};${type};${url};${statusCode};`\n  const requestStore = requestAsyncStorage.getStore()\n  if (requestStore) {\n    error.mutableCookies = requestStore.mutableCookies\n  }\n  return error\n}\n\n/**\n * This function allows you to redirect the user to another URL. It can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a meta tag to redirect the user to the target page.\n * - In a Route Handler or Server Action, it will serve a 307/303 to the caller.\n *\n * Read more: [Next.js Docs: `redirect`](https://nextjs.org/docs/app/api-reference/functions/redirect)\n */\nexport function redirect(\n  /** The URL to redirect to */\n  url: string,\n  type: RedirectType = RedirectType.replace\n): never {\n  const actionStore = actionAsyncStorage.getStore()\n  throw getRedirectError(\n    url,\n    type,\n    // If we're in an action, we want to use a 303 redirect\n    // as we don't want the POST request to follow the redirect,\n    // as it could result in erroneous re-submissions.\n    actionStore?.isAction\n      ? RedirectStatusCode.SeeOther\n      : RedirectStatusCode.TemporaryRedirect\n  )\n}\n\n/**\n * This function allows you to redirect the user to another URL. It can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a meta tag to redirect the user to the target page.\n * - In a Route Handler or Server Action, it will serve a 308/303 to the caller.\n *\n * Read more: [Next.js Docs: `redirect`](https://nextjs.org/docs/app/api-reference/functions/redirect)\n */\nexport function permanentRedirect(\n  /** The URL to redirect to */\n  url: string,\n  type: RedirectType = RedirectType.replace\n): never {\n  const actionStore = actionAsyncStorage.getStore()\n  throw getRedirectError(\n    url,\n    type,\n    // If we're in an action, we want to use a 303 redirect\n    // as we don't want the POST request to follow the redirect,\n    // as it could result in erroneous re-submissions.\n    actionStore?.isAction\n      ? RedirectStatusCode.SeeOther\n      : RedirectStatusCode.PermanentRedirect\n  )\n}\n\n/**\n * Checks an error to determine if it's an error generated by the\n * `redirect(url)` helper.\n *\n * @param error the error that may reference a redirect error\n * @returns true if the error is a redirect error\n */\nexport function isRedirectError<U extends string>(\n  error: unknown\n): error is RedirectError<U> {\n  if (\n    typeof error !== 'object' ||\n    error === null ||\n    !('digest' in error) ||\n    typeof error.digest !== 'string'\n  ) {\n    return false\n  }\n\n  const digest = error.digest.split(';')\n  const [errorCode, type] = digest\n  const destination = digest.slice(2, -2).join(';')\n  const status = digest.at(-2)\n\n  const statusCode = Number(status)\n\n  return (\n    errorCode === REDIRECT_ERROR_CODE &&\n    (type === 'replace' || type === 'push') &&\n    typeof destination === 'string' &&\n    !isNaN(statusCode) &&\n    statusCode in RedirectStatusCode\n  )\n}\n\n/**\n * Returns the encoded URL from the error if it's a RedirectError, null\n * otherwise. Note that this does not validate the URL returned.\n *\n * @param error the error that may be a redirect error\n * @return the url if the error was a redirect error\n */\nexport function getURLFromRedirectError<U extends string>(\n  error: RedirectError<U>\n): U\nexport function getURLFromRedirectError(error: unknown): string | null {\n  if (!isRedirectError(error)) return null\n\n  // Slices off the beginning of the digest that contains the code and the\n  // separating ';'.\n  return error.digest.split(';').slice(2, -2).join(';')\n}\n\nexport function getRedirectTypeFromError<U extends string>(\n  error: RedirectError<U>\n): RedirectType {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error')\n  }\n\n  return error.digest.split(';', 2)[1] as RedirectType\n}\n\nexport function getRedirectStatusCodeFromError<U extends string>(\n  error: RedirectError<U>\n): number {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error')\n  }\n\n  return Number(error.digest.split(';').at(-2))\n}\n"],"names":["requestAsyncStorage","actionAsyncStorage","RedirectStatusCode","REDIRECT_ERROR_CODE","RedirectType","getRedirectError","url","type","statusCode","TemporaryRedirect","error","Error","digest","requestStore","getStore","mutableCookies","redirect","actionStore","isAction","SeeOther","permanentRedirect","PermanentRedirect","isRedirectError","split","errorCode","destination","slice","join","status","at","Number","isNaN","getURLFromRedirectError","getRedirectTypeFromError","getRedirectStatusCodeFromError"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,mCAAkC;AAEtE,SAASC,kBAAkB,QAAQ,kCAAiC;AACpE,SAASC,kBAAkB,QAAQ,yBAAwB;AAE3D,MAAMC,sBAAsB;;UAEhBC;;;GAAAA,iBAAAA;AAUZ,OAAO,SAASC,iBACdC,GAAW,EACXC,IAAkB,EAClBC,UAAqE;IAArEA,IAAAA,uBAAAA,aAAiCN,mBAAmBO,iBAAiB;IAErE,MAAMC,QAAQ,IAAIC,MAAMR;IACxBO,MAAME,MAAM,GAAG,AAAGT,sBAAoB,MAAGI,OAAK,MAAGD,MAAI,MAAGE,aAAW;IACnE,MAAMK,eAAeb,oBAAoBc,QAAQ;IACjD,IAAID,cAAc;QAChBH,MAAMK,cAAc,GAAGF,aAAaE,cAAc;IACpD;IACA,OAAOL;AACT;AAEA;;;;;;;;;;CAUC,GACD,OAAO,SAASM,SACd,2BAA2B,GAC3BV,GAAW,EACXC,IAAyC;IAAzCA,IAAAA,iBAAAA;IAEA,MAAMU,cAAchB,mBAAmBa,QAAQ;IAC/C,MAAMT,iBACJC,KACAC,MACA,uDAAuD;IACvD,4DAA4D;IAC5D,kDAAkD;IAClDU,CAAAA,+BAAAA,YAAaC,QAAQ,IACjBhB,mBAAmBiB,QAAQ,GAC3BjB,mBAAmBO,iBAAiB;AAE5C;AAEA;;;;;;;;;;CAUC,GACD,OAAO,SAASW,kBACd,2BAA2B,GAC3Bd,GAAW,EACXC,IAAyC;IAAzCA,IAAAA,iBAAAA;IAEA,MAAMU,cAAchB,mBAAmBa,QAAQ;IAC/C,MAAMT,iBACJC,KACAC,MACA,uDAAuD;IACvD,4DAA4D;IAC5D,kDAAkD;IAClDU,CAAAA,+BAAAA,YAAaC,QAAQ,IACjBhB,mBAAmBiB,QAAQ,GAC3BjB,mBAAmBmB,iBAAiB;AAE5C;AAEA;;;;;;CAMC,GACD,OAAO,SAASC,gBACdZ,KAAc;IAEd,IACE,OAAOA,UAAU,YACjBA,UAAU,QACV,CAAE,CAAA,YAAYA,KAAI,KAClB,OAAOA,MAAME,MAAM,KAAK,UACxB;QACA,OAAO;IACT;IAEA,MAAMA,SAASF,MAAME,MAAM,CAACW,KAAK,CAAC;IAClC,MAAM,CAACC,WAAWjB,KAAK,GAAGK;IAC1B,MAAMa,cAAcb,OAAOc,KAAK,CAAC,GAAG,CAAC,GAAGC,IAAI,CAAC;IAC7C,MAAMC,SAAShB,OAAOiB,EAAE,CAAC,CAAC;IAE1B,MAAMrB,aAAasB,OAAOF;IAE1B,OACEJ,cAAcrB,uBACbI,CAAAA,SAAS,aAAaA,SAAS,MAAK,KACrC,OAAOkB,gBAAgB,YACvB,CAACM,MAAMvB,eACPA,cAAcN;AAElB;AAYA,OAAO,SAAS8B,wBAAwBtB,KAAc;IACpD,IAAI,CAACY,gBAAgBZ,QAAQ,OAAO;IAEpC,wEAAwE;IACxE,kBAAkB;IAClB,OAAOA,MAAME,MAAM,CAACW,KAAK,CAAC,KAAKG,KAAK,CAAC,GAAG,CAAC,GAAGC,IAAI,CAAC;AACnD;AAEA,OAAO,SAASM,yBACdvB,KAAuB;IAEvB,IAAI,CAACY,gBAAgBZ,QAAQ;QAC3B,MAAM,IAAIC,MAAM;IAClB;IAEA,OAAOD,MAAME,MAAM,CAACW,KAAK,CAAC,KAAK,EAAE,CAAC,EAAE;AACtC;AAEA,OAAO,SAASW,+BACdxB,KAAuB;IAEvB,IAAI,CAACY,gBAAgBZ,QAAQ;QAC3B,MAAM,IAAIC,MAAM;IAClB;IAEA,OAAOmB,OAAOpB,MAAME,MAAM,CAACW,KAAK,CAAC,KAAKM,EAAE,CAAC,CAAC;AAC5C"}