{"version":3,"sources":["../../../src/client/components/search-params.ts"],"sourcesContent":["import type { ParsedUrlQuery } from 'querystring'\n\nimport { staticGenerationAsyncStorage } from './static-generation-async-storage.external'\nimport { trackDynamicDataAccessed } from '../../server/app-render/dynamic-rendering'\nimport { ReflectAdapter } from '../../server/web/spec-extension/adapters/reflect'\n\n/**\n * Takes a ParsedUrlQuery object and either returns it unmodified or returns an empty object\n *\n * Even though we do not track read access on the returned searchParams we need to\n * return an empty object if we are doing a 'force-static' render. This is to ensure\n * we don't encode the searchParams into the flight data.\n */\nexport function createUntrackedSearchParams(\n  searchParams: ParsedUrlQuery\n): ParsedUrlQuery {\n  const store = staticGenerationAsyncStorage.getStore()\n  if (store && store.forceStatic) {\n    return {}\n  } else {\n    return searchParams\n  }\n}\n\n/**\n * Takes a ParsedUrlQuery object and returns a Proxy that tracks read access to the object\n *\n * If running in the browser will always return the provided searchParams object.\n * When running during SSR will return empty during a 'force-static' render and\n * otherwise it returns a searchParams object which tracks reads to trigger dynamic rendering\n * behavior if appropriate\n */\nexport function createDynamicallyTrackedSearchParams(\n  searchParams: ParsedUrlQuery\n): ParsedUrlQuery {\n  const store = staticGenerationAsyncStorage.getStore()\n  if (!store) {\n    // we assume we are in a route handler or page render. just return the searchParams\n    return searchParams\n  } else if (store.forceStatic) {\n    // If we forced static we omit searchParams entirely. This is true both during SSR\n    // and browser render because we need there to be parity between these environments\n    return {}\n  } else {\n    // We need to track dynamic access with a Proxy. If `dynamic = \"error\"`, we use this information\n    // to fail the build. This also signals to the patched fetch that it's inside\n    // of a dynamic render and should bail from data cache. We implement get, has, and ownKeys because\n    // these can all be used to exfiltrate information about searchParams.\n\n    const trackedSearchParams: ParsedUrlQuery = store.isStaticGeneration\n      ? {}\n      : searchParams\n\n    return new Proxy(trackedSearchParams, {\n      get(target, prop, receiver) {\n        if (typeof prop === 'string') {\n          trackDynamicDataAccessed(store, `searchParams.${prop}`)\n        }\n        return ReflectAdapter.get(target, prop, receiver)\n      },\n      has(target, prop) {\n        if (typeof prop === 'string') {\n          trackDynamicDataAccessed(store, `searchParams.${prop}`)\n        }\n        return Reflect.has(target, prop)\n      },\n      ownKeys(target) {\n        trackDynamicDataAccessed(store, 'searchParams')\n        return Reflect.ownKeys(target)\n      },\n    })\n  }\n}\n"],"names":["staticGenerationAsyncStorage","trackDynamicDataAccessed","ReflectAdapter","createUntrackedSearchParams","searchParams","store","getStore","forceStatic","createDynamicallyTrackedSearchParams","trackedSearchParams","isStaticGeneration","Proxy","get","target","prop","receiver","has","Reflect","ownKeys"],"mappings":"AAEA,SAASA,4BAA4B,QAAQ,6CAA4C;AACzF,SAASC,wBAAwB,QAAQ,4CAA2C;AACpF,SAASC,cAAc,QAAQ,mDAAkD;AAEjF;;;;;;CAMC,GACD,OAAO,SAASC,4BACdC,YAA4B;IAE5B,MAAMC,QAAQL,6BAA6BM,QAAQ;IACnD,IAAID,SAASA,MAAME,WAAW,EAAE;QAC9B,OAAO,CAAC;IACV,OAAO;QACL,OAAOH;IACT;AACF;AAEA;;;;;;;CAOC,GACD,OAAO,SAASI,qCACdJ,YAA4B;IAE5B,MAAMC,QAAQL,6BAA6BM,QAAQ;IACnD,IAAI,CAACD,OAAO;QACV,mFAAmF;QACnF,OAAOD;IACT,OAAO,IAAIC,MAAME,WAAW,EAAE;QAC5B,kFAAkF;QAClF,mFAAmF;QACnF,OAAO,CAAC;IACV,OAAO;QACL,gGAAgG;QAChG,6EAA6E;QAC7E,kGAAkG;QAClG,sEAAsE;QAEtE,MAAME,sBAAsCJ,MAAMK,kBAAkB,GAChE,CAAC,IACDN;QAEJ,OAAO,IAAIO,MAAMF,qBAAqB;YACpCG,KAAIC,MAAM,EAAEC,IAAI,EAAEC,QAAQ;gBACxB,IAAI,OAAOD,SAAS,UAAU;oBAC5Bb,yBAAyBI,OAAO,AAAC,kBAAeS;gBAClD;gBACA,OAAOZ,eAAeU,GAAG,CAACC,QAAQC,MAAMC;YAC1C;YACAC,KAAIH,MAAM,EAAEC,IAAI;gBACd,IAAI,OAAOA,SAAS,UAAU;oBAC5Bb,yBAAyBI,OAAO,AAAC,kBAAeS;gBAClD;gBACA,OAAOG,QAAQD,GAAG,CAACH,QAAQC;YAC7B;YACAI,SAAQL,MAAM;gBACZZ,yBAAyBI,OAAO;gBAChC,OAAOY,QAAQC,OAAO,CAACL;YACzB;QACF;IACF;AACF"}