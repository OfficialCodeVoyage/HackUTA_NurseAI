{"version":3,"sources":["../../../../../src/build/webpack/loaders/metadata/resolve-route-data.ts"],"sourcesContent":["import type { MetadataRoute } from '../../../../lib/metadata/types/metadata-interface'\nimport { resolveArray } from '../../../../lib/metadata/generate/utils'\n\n// convert robots data to txt string\nexport function resolveRobots(data: MetadataRoute.Robots): string {\n  let content = ''\n  const rules = Array.isArray(data.rules) ? data.rules : [data.rules]\n  for (const rule of rules) {\n    const userAgent = resolveArray(rule.userAgent || ['*'])\n    for (const agent of userAgent) {\n      content += `User-Agent: ${agent}\\n`\n    }\n    if (rule.allow) {\n      const allow = resolveArray(rule.allow)\n      for (const item of allow) {\n        content += `Allow: ${item}\\n`\n      }\n    }\n    if (rule.disallow) {\n      const disallow = resolveArray(rule.disallow)\n      for (const item of disallow) {\n        content += `Disallow: ${item}\\n`\n      }\n    }\n    if (rule.crawlDelay) {\n      content += `Crawl-delay: ${rule.crawlDelay}\\n`\n    }\n    content += '\\n'\n  }\n  if (data.host) {\n    content += `Host: ${data.host}\\n`\n  }\n  if (data.sitemap) {\n    const sitemap = resolveArray(data.sitemap)\n    // TODO-METADATA: support injecting sitemap url into robots.txt\n    sitemap.forEach((item) => {\n      content += `Sitemap: ${item}\\n`\n    })\n  }\n\n  return content\n}\n\n// TODO-METADATA: support multi sitemap files\n// convert sitemap data to xml string\nexport function resolveSitemap(data: MetadataRoute.Sitemap): string {\n  const hasAlternates = data.some(\n    (item) => Object.keys(item.alternates ?? {}).length > 0\n  )\n\n  let content = ''\n  content += '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n  content += '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"'\n  if (hasAlternates) {\n    content += ' xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\\n'\n  } else {\n    content += '>\\n'\n  }\n  for (const item of data) {\n    content += '<url>\\n'\n    content += `<loc>${item.url}</loc>\\n`\n\n    const languages = item.alternates?.languages\n    if (languages && Object.keys(languages).length) {\n      // Since sitemap is separated from the page rendering, there's not metadataBase accessible yet.\n      // we give the default setting that won't effect the languages resolving.\n      for (const language in languages) {\n        content += `<xhtml:link rel=\"alternate\" hreflang=\"${language}\" href=\"${\n          languages[language as keyof typeof languages]\n        }\" />\\n`\n      }\n    }\n    if (item.lastModified) {\n      const serializedDate =\n        item.lastModified instanceof Date\n          ? item.lastModified.toISOString()\n          : item.lastModified\n\n      content += `<lastmod>${serializedDate}</lastmod>\\n`\n    }\n\n    if (item.changeFrequency) {\n      content += `<changefreq>${item.changeFrequency}</changefreq>\\n`\n    }\n\n    if (typeof item.priority === 'number') {\n      content += `<priority>${item.priority}</priority>\\n`\n    }\n\n    content += '</url>\\n'\n  }\n\n  content += '</urlset>\\n'\n\n  return content\n}\n\nexport function resolveManifest(data: MetadataRoute.Manifest): string {\n  return JSON.stringify(data)\n}\n\nexport function resolveRouteData(\n  data: MetadataRoute.Robots | MetadataRoute.Sitemap | MetadataRoute.Manifest,\n  fileType: 'robots' | 'sitemap' | 'manifest'\n): string {\n  if (fileType === 'robots') {\n    return resolveRobots(data as MetadataRoute.Robots)\n  }\n  if (fileType === 'sitemap') {\n    return resolveSitemap(data as MetadataRoute.Sitemap)\n  }\n  if (fileType === 'manifest') {\n    return resolveManifest(data as MetadataRoute.Manifest)\n  }\n  return ''\n}\n"],"names":["resolveArray","resolveRobots","data","content","rules","Array","isArray","rule","userAgent","agent","allow","item","disallow","crawlDelay","host","sitemap","forEach","resolveSitemap","hasAlternates","some","Object","keys","alternates","length","url","languages","language","lastModified","serializedDate","Date","toISOString","changeFrequency","priority","resolveManifest","JSON","stringify","resolveRouteData","fileType"],"mappings":"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"}