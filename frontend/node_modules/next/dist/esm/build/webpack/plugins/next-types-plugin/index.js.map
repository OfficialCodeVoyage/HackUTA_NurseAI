{"version":3,"sources":["../../../../../src/build/webpack/plugins/next-types-plugin/index.ts"],"sourcesContent":["import type { Rewrite, Redirect } from '../../../../lib/load-custom-routes'\nimport type { Token } from 'next/dist/compiled/path-to-regexp'\n\nimport fs from 'fs/promises'\nimport { webpack, sources } from 'next/dist/compiled/webpack/webpack'\nimport { parse } from 'next/dist/compiled/path-to-regexp'\nimport path from 'path'\n\nimport { WEBPACK_LAYERS } from '../../../../lib/constants'\nimport { denormalizePagePath } from '../../../../shared/lib/page-path/denormalize-page-path'\nimport { ensureLeadingSlash } from '../../../../shared/lib/page-path/ensure-leading-slash'\nimport { normalizePathSep } from '../../../../shared/lib/page-path/normalize-path-sep'\nimport { HTTP_METHODS } from '../../../../server/web/http'\nimport { isDynamicRoute } from '../../../../shared/lib/router/utils'\nimport { normalizeAppPath } from '../../../../shared/lib/router/utils/app-paths'\nimport { getPageFromPath } from '../../../entries'\nimport type { PageExtensions } from '../../../page-extensions-type'\nimport { devPageFiles } from './shared'\nimport { getProxiedPluginState } from '../../../build-context'\n\nconst PLUGIN_NAME = 'NextTypesPlugin'\n\ntype Rewrites = {\n  fallback: Rewrite[]\n  afterFiles: Rewrite[]\n  beforeFiles: Rewrite[]\n}\n\ninterface Options {\n  dir: string\n  distDir: string\n  appDir: string\n  dev: boolean\n  isEdgeServer: boolean\n  pageExtensions: PageExtensions\n  typedRoutes: boolean\n  originalRewrites: Rewrites | undefined\n  originalRedirects: Redirect[] | undefined\n}\n\nfunction createTypeGuardFile(\n  fullPath: string,\n  relativePath: string,\n  options: {\n    type: 'layout' | 'page' | 'route'\n    slots?: string[]\n  }\n) {\n  return `// File: ${fullPath}\nimport * as entry from '${relativePath}.js'\n${\n  options.type === 'route'\n    ? `import type { NextRequest } from 'next/server.js'`\n    : `import type { ResolvingMetadata, ResolvingViewport } from 'next/dist/lib/metadata/types/metadata-interface.js'`\n}\n\ntype TEntry = typeof import('${relativePath}.js')\n\n// Check that the entry is a valid entry\ncheckFields<Diff<{\n  ${\n    options.type === 'route'\n      ? HTTP_METHODS.map((method) => `${method}?: Function`).join('\\n  ')\n      : 'default: Function'\n  }\n  config?: {}\n  generateStaticParams?: Function\n  revalidate?: RevalidateRange<TEntry> | false\n  dynamic?: 'auto' | 'force-dynamic' | 'error' | 'force-static'\n  dynamicParams?: boolean\n  fetchCache?: 'auto' | 'force-no-store' | 'only-no-store' | 'default-no-store' | 'default-cache' | 'only-cache' | 'force-cache'\n  preferredRegion?: 'auto' | 'global' | 'home' | string | string[]\n  runtime?: 'nodejs' | 'experimental-edge' | 'edge'\n  maxDuration?: number\n  ${\n    options.type === 'route'\n      ? ''\n      : `\n  metadata?: any\n  generateMetadata?: Function\n  viewport?: any\n  generateViewport?: Function\n  experimental_ppr?: boolean\n  `\n  }\n}, TEntry, ''>>()\n\n${\n  options.type === 'route'\n    ? HTTP_METHODS.map(\n        (method) => `// Check the prop type of the entry function\nif ('${method}' in entry) {\n  checkFields<\n    Diff<\n      ParamCheck<Request | NextRequest>,\n      {\n        __tag__: '${method}'\n        __param_position__: 'first'\n        __param_type__: FirstArg<MaybeField<TEntry, '${method}'>>\n      },\n      '${method}'\n    >\n  >()\n  checkFields<\n    Diff<\n      ParamCheck<PageParams>,\n      {\n        __tag__: '${method}'\n        __param_position__: 'second'\n        __param_type__: SecondArg<MaybeField<TEntry, '${method}'>>\n      },\n      '${method}'\n    >\n  >()\n  ${\n    ''\n    // Adding void to support never return type without explicit return:\n    // e.g. notFound() will interrupt the execution but the handler return type is inferred as void.\n    // x-ref: https://github.com/microsoft/TypeScript/issues/16608#issuecomment-309327984\n  }\n  checkFields<\n    Diff<\n      {\n        __tag__: '${method}',\n        __return_type__: Response | void | never | Promise<Response | void | never>\n      },\n      {\n        __tag__: '${method}',\n        __return_type__: ReturnType<MaybeField<TEntry, '${method}'>>\n      },\n      '${method}'\n    >\n  >()\n}\n`\n      ).join('')\n    : `// Check the prop type of the entry function\ncheckFields<Diff<${\n        options.type === 'page' ? 'PageProps' : 'LayoutProps'\n      }, FirstArg<TEntry['default']>, 'default'>>()\n\n// Check the arguments and return type of the generateMetadata function\nif ('generateMetadata' in entry) {\n  checkFields<Diff<${\n    options.type === 'page' ? 'PageProps' : 'LayoutProps'\n  }, FirstArg<MaybeField<TEntry, 'generateMetadata'>>, 'generateMetadata'>>()\n  checkFields<Diff<ResolvingMetadata, SecondArg<MaybeField<TEntry, 'generateMetadata'>>, 'generateMetadata'>>()\n}\n\n// Check the arguments and return type of the generateViewport function\nif ('generateViewport' in entry) {\n  checkFields<Diff<${\n    options.type === 'page' ? 'PageProps' : 'LayoutProps'\n  }, FirstArg<MaybeField<TEntry, 'generateViewport'>>, 'generateViewport'>>()\n  checkFields<Diff<ResolvingViewport, SecondArg<MaybeField<TEntry, 'generateViewport'>>, 'generateViewport'>>()\n}\n`\n}\n// Check the arguments and return type of the generateStaticParams function\nif ('generateStaticParams' in entry) {\n  checkFields<Diff<{ params: PageParams }, FirstArg<MaybeField<TEntry, 'generateStaticParams'>>, 'generateStaticParams'>>()\n  checkFields<Diff<{ __tag__: 'generateStaticParams', __return_type__: any[] | Promise<any[]> }, { __tag__: 'generateStaticParams', __return_type__: ReturnType<MaybeField<TEntry, 'generateStaticParams'>> }>>()\n}\n\ntype PageParams = any\nexport interface PageProps {\n  params?: any\n  searchParams?: any\n}\nexport interface LayoutProps {\n  children?: React.ReactNode\n${\n  options.slots\n    ? options.slots.map((slot) => `  ${slot}: React.ReactNode`).join('\\n')\n    : ''\n}\n  params?: any\n}\n\n// =============\n// Utility types\ntype RevalidateRange<T> = T extends { revalidate: any } ? NonNegative<T['revalidate']> : never\n\n// If T is unknown or any, it will be an empty {} type. Otherwise, it will be the same as Omit<T, keyof Base>.\ntype OmitWithTag<T, K extends keyof any, _M> = Omit<T, K>\ntype Diff<Base, T extends Base, Message extends string = ''> = 0 extends (1 & T) ? {} : OmitWithTag<T, keyof Base, Message>\n\ntype FirstArg<T extends Function> = T extends (...args: [infer T, any]) => any ? unknown extends T ? any : T : never\ntype SecondArg<T extends Function> = T extends (...args: [any, infer T]) => any ? unknown extends T ? any : T : never\ntype MaybeField<T, K extends string> = T extends { [k in K]: infer G } ? G extends Function ? G : never : never\n\n${\n  options.type === 'route'\n    ? `type ParamCheck<T> = {\n  __tag__: string\n  __param_position__: string\n  __param_type__: T\n}`\n    : ''\n}\n\nfunction checkFields<_ extends { [k in keyof any]: never }>() {}\n\n// https://github.com/sindresorhus/type-fest\ntype Numeric = number | bigint\ntype Zero = 0 | 0n\ntype Negative<T extends Numeric> = T extends Zero ? never : \\`\\${T}\\` extends \\`-\\${string}\\` ? T : never\ntype NonNegative<T extends Numeric> = T extends Zero ? T : Negative<T> extends never ? T : '__invalid_negative_number__'\n`\n}\n\nasync function collectNamedSlots(layoutPath: string) {\n  const layoutDir = path.dirname(layoutPath)\n  const items = await fs.readdir(layoutDir, { withFileTypes: true })\n  const slots = []\n  for (const item of items) {\n    if (\n      item.isDirectory() &&\n      item.name.startsWith('@') &&\n      // `@children slots are matched to the children prop, and should not be handled separately for type-checking\n      item.name !== '@children'\n    ) {\n      slots.push(item.name.slice(1))\n    }\n  }\n  return slots\n}\n\n// By exposing the static route types separately as string literals,\n// editors can provide autocompletion for them. However it's currently not\n// possible to provide the same experience for dynamic routes.\n\nconst pluginState = getProxiedPluginState({\n  routeTypes: {\n    edge: {\n      static: '',\n      dynamic: '',\n    },\n    node: {\n      static: '',\n      dynamic: '',\n    },\n    extra: {\n      static: '',\n      dynamic: '',\n    },\n  } as Record<'edge' | 'node' | 'extra', Record<'static' | 'dynamic', string>>,\n})\n\nfunction formatRouteToRouteType(route: string) {\n  const isDynamic = isDynamicRoute(route)\n  if (isDynamic) {\n    route = route\n      .split('/')\n      .map((part) => {\n        if (part.startsWith('[') && part.endsWith(']')) {\n          if (part.startsWith('[...')) {\n            // /[...slug]\n            return `\\${CatchAllSlug<T>}`\n          } else if (part.startsWith('[[...') && part.endsWith(']]')) {\n            // /[[...slug]]\n            return `\\${OptionalCatchAllSlug<T>}`\n          }\n          // /[slug]\n          return `\\${SafeSlug<T>}`\n        }\n        return part\n      })\n      .join('/')\n  }\n\n  return {\n    isDynamic,\n    routeType: `\\n    | \\`${route}\\``,\n  }\n}\n\n// Whether redirects and rewrites have been converted into routeTypes or not.\nlet redirectsRewritesTypesProcessed = false\n\n// Convert redirects and rewrites into routeTypes.\nfunction addRedirectsRewritesRouteTypes(\n  rewrites: Rewrites | undefined,\n  redirects: Redirect[] | undefined\n) {\n  function addExtraRoute(source: string) {\n    let tokens: Token[] | undefined\n    try {\n      tokens = parse(source)\n    } catch {\n      // Ignore invalid routes - they will be handled by other checks.\n    }\n\n    if (Array.isArray(tokens)) {\n      const possibleNormalizedRoutes = ['']\n      let slugCnt = 1\n\n      function append(suffix: string) {\n        for (let i = 0; i < possibleNormalizedRoutes.length; i++) {\n          possibleNormalizedRoutes[i] += suffix\n        }\n      }\n\n      function fork(suffix: string) {\n        const currentLength = possibleNormalizedRoutes.length\n        for (let i = 0; i < currentLength; i++) {\n          possibleNormalizedRoutes.push(possibleNormalizedRoutes[i] + suffix)\n        }\n      }\n\n      for (const token of tokens) {\n        if (typeof token === 'object') {\n          // Make sure the slug is always named.\n          const slug =\n            token.name || (slugCnt++ === 1 ? 'slug' : `slug${slugCnt}`)\n\n          if (token.modifier === '*') {\n            append(`${token.prefix}[[...${slug}]]`)\n          } else if (token.modifier === '+') {\n            append(`${token.prefix}[...${slug}]`)\n          } else if (token.modifier === '') {\n            if (token.pattern === '[^\\\\/#\\\\?]+?') {\n              // A safe slug\n              append(`${token.prefix}[${slug}]`)\n            } else if (token.pattern === '.*') {\n              // An optional catch-all slug\n              append(`${token.prefix}[[...${slug}]]`)\n            } else if (token.pattern === '.+') {\n              // A catch-all slug\n              append(`${token.prefix}[...${slug}]`)\n            } else {\n              // Other regex patterns are not supported. Skip this route.\n              return\n            }\n          } else if (token.modifier === '?') {\n            if (/^[a-zA-Z0-9_/]*$/.test(token.pattern)) {\n              // An optional slug with plain text only, fork the route.\n              append(token.prefix)\n              fork(token.pattern)\n            } else {\n              // Optional modifier `?` and regex patterns are not supported.\n              return\n            }\n          }\n        } else if (typeof token === 'string') {\n          append(token)\n        }\n      }\n\n      for (const normalizedRoute of possibleNormalizedRoutes) {\n        const { isDynamic, routeType } = formatRouteToRouteType(normalizedRoute)\n        pluginState.routeTypes.extra[isDynamic ? 'dynamic' : 'static'] +=\n          routeType\n      }\n    }\n  }\n\n  if (rewrites) {\n    for (const rewrite of rewrites.beforeFiles) {\n      addExtraRoute(rewrite.source)\n    }\n    for (const rewrite of rewrites.afterFiles) {\n      addExtraRoute(rewrite.source)\n    }\n    for (const rewrite of rewrites.fallback) {\n      addExtraRoute(rewrite.source)\n    }\n  }\n\n  if (redirects) {\n    for (const redirect of redirects) {\n      // Skip internal redirects\n      // https://github.com/vercel/next.js/blob/8ff3d7ff57836c24088474175d595b4d50b3f857/packages/next/src/lib/load-custom-routes.ts#L704-L710\n      if (!('internal' in redirect)) {\n        addExtraRoute(redirect.source)\n      }\n    }\n  }\n}\n\nfunction createRouteDefinitions() {\n  let staticRouteTypes = ''\n  let dynamicRouteTypes = ''\n\n  for (const type of ['edge', 'node', 'extra'] as const) {\n    staticRouteTypes += pluginState.routeTypes[type].static\n    dynamicRouteTypes += pluginState.routeTypes[type].dynamic\n  }\n\n  // If both StaticRoutes and DynamicRoutes are empty, fallback to type 'string'.\n  const routeTypesFallback =\n    !staticRouteTypes && !dynamicRouteTypes ? 'string' : ''\n\n  return `// Type definitions for Next.js routes\n\n/**\n * Internal types used by the Next.js router and Link component.\n * These types are not meant to be used directly.\n * @internal\n */\ndeclare namespace __next_route_internal_types__ {\n  type SearchOrHash = \\`?\\${string}\\` | \\`#\\${string}\\`\n  type WithProtocol = \\`\\${string}:\\${string}\\`\n\n  type Suffix = '' | SearchOrHash\n\n  type SafeSlug<S extends string> = S extends \\`\\${string}/\\${string}\\`\n    ? never\n    : S extends \\`\\${string}\\${SearchOrHash}\\`\n    ? never\n    : S extends ''\n    ? never\n    : S\n\n  type CatchAllSlug<S extends string> = S extends \\`\\${string}\\${SearchOrHash}\\`\n    ? never\n    : S extends ''\n    ? never\n    : S\n\n  type OptionalCatchAllSlug<S extends string> =\n    S extends \\`\\${string}\\${SearchOrHash}\\` ? never : S\n\n  type StaticRoutes = ${staticRouteTypes || 'never'}\n  type DynamicRoutes<T extends string = string> = ${\n    dynamicRouteTypes || 'never'\n  }\n\n  type RouteImpl<T> = ${\n    routeTypesFallback ||\n    `\n    ${\n      // This keeps autocompletion working for static routes.\n      '| StaticRoutes'\n    }\n    | SearchOrHash\n    | WithProtocol\n    | \\`\\${StaticRoutes}\\${SearchOrHash}\\`\n    | (T extends \\`\\${DynamicRoutes<infer _>}\\${Suffix}\\` ? T : never)\n    `\n  }\n}\n\ndeclare module 'next' {\n  export { default } from 'next/types.js'\n  export * from 'next/types.js'\n\n  export type Route<T extends string = string> =\n    __next_route_internal_types__.RouteImpl<T>\n}\n\ndeclare module 'next/link' {\n  import type { LinkProps as OriginalLinkProps } from 'next/dist/client/link.js'\n  import type { AnchorHTMLAttributes, DetailedHTMLProps } from 'react'\n  import type { UrlObject } from 'url'\n\n  type LinkRestProps = Omit<\n    Omit<\n      DetailedHTMLProps<\n        AnchorHTMLAttributes<HTMLAnchorElement>,\n        HTMLAnchorElement\n      >,\n      keyof OriginalLinkProps\n    > &\n      OriginalLinkProps,\n    'href'\n  >\n\n  export type LinkProps<RouteInferType> = LinkRestProps & {\n    /**\n     * The path or URL to navigate to. This is the only required prop. It can also be an object.\n     * @see https://nextjs.org/docs/api-reference/next/link\n     */\n    href: __next_route_internal_types__.RouteImpl<RouteInferType> | UrlObject\n  }\n\n  export default function Link<RouteType>(props: LinkProps<RouteType>): JSX.Element\n}\n\ndeclare module 'next/navigation' {\n  export * from 'next/dist/client/components/navigation.js'\n\n  import type { NavigateOptions, AppRouterInstance as OriginalAppRouterInstance } from 'next/dist/shared/lib/app-router-context.shared-runtime.js'\n  interface AppRouterInstance extends OriginalAppRouterInstance {\n    /**\n     * Navigate to the provided href.\n     * Pushes a new history entry.\n     */\n    push<RouteType>(href: __next_route_internal_types__.RouteImpl<RouteType>, options?: NavigateOptions): void\n    /**\n     * Navigate to the provided href.\n     * Replaces the current history entry.\n     */\n    replace<RouteType>(href: __next_route_internal_types__.RouteImpl<RouteType>, options?: NavigateOptions): void\n    /**\n     * Prefetch the provided href.\n     */\n    prefetch<RouteType>(href: __next_route_internal_types__.RouteImpl<RouteType>): void\n  }\n\n  export declare function useRouter(): AppRouterInstance;\n}\n`\n}\n\nconst appTypesBasePath = path.join('types', 'app')\n\nexport class NextTypesPlugin {\n  dir: string\n  distDir: string\n  appDir: string\n  dev: boolean\n  isEdgeServer: boolean\n  pageExtensions: string[]\n  pagesDir: string\n  typedRoutes: boolean\n  distDirAbsolutePath: string\n\n  constructor(options: Options) {\n    this.dir = options.dir\n    this.distDir = options.distDir\n    this.appDir = options.appDir\n    this.dev = options.dev\n    this.isEdgeServer = options.isEdgeServer\n    this.pageExtensions = options.pageExtensions\n    this.pagesDir = path.join(this.appDir, '..', 'pages')\n    this.typedRoutes = options.typedRoutes\n    this.distDirAbsolutePath = path.join(this.dir, this.distDir)\n    if (this.typedRoutes && !redirectsRewritesTypesProcessed) {\n      redirectsRewritesTypesProcessed = true\n      addRedirectsRewritesRouteTypes(\n        options.originalRewrites,\n        options.originalRedirects\n      )\n    }\n  }\n\n  getRelativePathFromAppTypesDir(moduleRelativePathToAppDir: string) {\n    const moduleAbsolutePath = path.join(\n      this.appDir,\n      moduleRelativePathToAppDir\n    )\n\n    const moduleInAppTypesAbsolutePath = path.join(\n      this.distDirAbsolutePath,\n      appTypesBasePath,\n      moduleRelativePathToAppDir\n    )\n\n    return path.relative(\n      moduleInAppTypesAbsolutePath + '/..',\n      moduleAbsolutePath\n    )\n  }\n\n  collectPage(filePath: string) {\n    if (!this.typedRoutes) return\n\n    const isApp = filePath.startsWith(this.appDir + path.sep)\n    const isPages = !isApp && filePath.startsWith(this.pagesDir + path.sep)\n\n    if (!isApp && !isPages) {\n      return\n    }\n\n    // Filter out non-page and non-route files in app dir\n    if (isApp && !/[/\\\\](?:page|route)\\.[^.]+$/.test(filePath)) {\n      return\n    }\n\n    // Filter out non-page files in pages dir\n    if (\n      isPages &&\n      /[/\\\\](?:_app|_document|_error|404|500)\\.[^.]+$/.test(filePath)\n    ) {\n      return\n    }\n\n    let route = (isApp ? normalizeAppPath : denormalizePagePath)(\n      ensureLeadingSlash(\n        getPageFromPath(\n          path.relative(isApp ? this.appDir : this.pagesDir, filePath),\n          this.pageExtensions\n        )\n      )\n    )\n\n    const { isDynamic, routeType } = formatRouteToRouteType(route)\n\n    pluginState.routeTypes[this.isEdgeServer ? 'edge' : 'node'][\n      isDynamic ? 'dynamic' : 'static'\n    ] += routeType\n  }\n\n  apply(compiler: webpack.Compiler) {\n    // From asset root to dist root\n    const assetDirRelative = this.dev\n      ? '..'\n      : this.isEdgeServer\n        ? '..'\n        : '../..'\n\n    const handleModule = async (mod: webpack.NormalModule, assets: any) => {\n      if (!mod.resource) return\n\n      const pageExtensionsRegex = new RegExp(\n        `\\\\.(${this.pageExtensions.join('|')})$`\n      )\n\n      if (!pageExtensionsRegex.test(mod.resource)) return\n\n      if (!mod.resource.startsWith(this.appDir + path.sep)) {\n        if (!this.dev) {\n          if (mod.resource.startsWith(this.pagesDir + path.sep)) {\n            this.collectPage(mod.resource)\n          }\n        }\n        return\n      }\n      if (mod.layer !== WEBPACK_LAYERS.reactServerComponents) return\n\n      const IS_LAYOUT = /[/\\\\]layout\\.[^./\\\\]+$/.test(mod.resource)\n      const IS_PAGE = !IS_LAYOUT && /[/\\\\]page\\.[^.]+$/.test(mod.resource)\n      const IS_ROUTE = !IS_PAGE && /[/\\\\]route\\.[^.]+$/.test(mod.resource)\n      const IS_IMPORTABLE = /\\.(js|jsx|ts|tsx|mjs|cjs)$/.test(mod.resource)\n      const relativePathToApp = path.relative(this.appDir, mod.resource)\n\n      if (!this.dev) {\n        if (IS_PAGE || IS_ROUTE) {\n          this.collectPage(mod.resource)\n        }\n      }\n\n      const typePath = path.join(\n        appTypesBasePath,\n        relativePathToApp.replace(pageExtensionsRegex, '.ts')\n      )\n      const relativeImportPath = normalizePathSep(\n        path\n          .join(this.getRelativePathFromAppTypesDir(relativePathToApp))\n          .replace(pageExtensionsRegex, '')\n      )\n\n      const assetPath = path.join(assetDirRelative, typePath)\n\n      // Typescript won’t allow relative-importing (for example) a .mdx file using the .js extension\n      // so for now we only generate “type guard files” for files that typescript can transform\n      if (!IS_IMPORTABLE) return\n\n      if (IS_LAYOUT) {\n        const slots = await collectNamedSlots(mod.resource)\n        assets[assetPath] = new sources.RawSource(\n          createTypeGuardFile(mod.resource, relativeImportPath, {\n            type: 'layout',\n            slots,\n          })\n        )\n      } else if (IS_PAGE) {\n        assets[assetPath] = new sources.RawSource(\n          createTypeGuardFile(mod.resource, relativeImportPath, {\n            type: 'page',\n          })\n        )\n      } else if (IS_ROUTE) {\n        assets[assetPath] = new sources.RawSource(\n          createTypeGuardFile(mod.resource, relativeImportPath, {\n            type: 'route',\n          })\n        )\n      }\n    }\n\n    compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation) => {\n      compilation.hooks.processAssets.tapAsync(\n        {\n          name: PLUGIN_NAME,\n          stage: webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_HASH,\n        },\n        async (assets, callback) => {\n          const promises: Promise<any>[] = []\n\n          // Clear routes\n          if (this.isEdgeServer) {\n            pluginState.routeTypes.edge.dynamic = ''\n            pluginState.routeTypes.edge.static = ''\n          } else {\n            pluginState.routeTypes.node.dynamic = ''\n            pluginState.routeTypes.node.static = ''\n          }\n\n          compilation.chunkGroups.forEach((chunkGroup) => {\n            chunkGroup.chunks.forEach((chunk) => {\n              if (!chunk.name) return\n\n              // Here we only track page and route chunks.\n              if (\n                !chunk.name.startsWith('pages/') &&\n                !(\n                  chunk.name.startsWith('app/') &&\n                  (chunk.name.endsWith('/page') ||\n                    chunk.name.endsWith('/route'))\n                )\n              ) {\n                return\n              }\n\n              const chunkModules =\n                compilation.chunkGraph.getChunkModulesIterable(\n                  chunk\n                ) as Iterable<webpack.NormalModule>\n              for (const mod of chunkModules) {\n                promises.push(handleModule(mod, assets))\n\n                // If this is a concatenation, register each child to the parent ID.\n                const anyModule = mod as unknown as {\n                  modules: webpack.NormalModule[]\n                }\n                if (anyModule.modules) {\n                  anyModule.modules.forEach((concatenatedMod) => {\n                    promises.push(handleModule(concatenatedMod, assets))\n                  })\n                }\n              }\n            })\n          })\n\n          await Promise.all(promises)\n\n          // Support `\"moduleResolution\": \"Node16\" | \"NodeNext\"` with `\"type\": \"module\"`\n\n          const packageJsonAssetPath = path.join(\n            assetDirRelative,\n            'types/package.json'\n          )\n\n          assets[packageJsonAssetPath] = new sources.RawSource(\n            '{\"type\": \"module\"}'\n          ) as unknown as webpack.sources.RawSource\n\n          if (this.typedRoutes) {\n            if (this.dev && !this.isEdgeServer) {\n              devPageFiles.forEach((file) => {\n                this.collectPage(file)\n              })\n            }\n\n            const linkAssetPath = path.join(assetDirRelative, 'types/link.d.ts')\n\n            assets[linkAssetPath] = new sources.RawSource(\n              createRouteDefinitions()\n            ) as unknown as webpack.sources.RawSource\n          }\n\n          callback()\n        }\n      )\n    })\n  }\n}\n"],"names":["fs","webpack","sources","parse","path","WEBPACK_LAYERS","denormalizePagePath","ensureLeadingSlash","normalizePathSep","HTTP_METHODS","isDynamicRoute","normalizeAppPath","getPageFromPath","devPageFiles","getProxiedPluginState","PLUGIN_NAME","createTypeGuardFile","fullPath","relativePath","options","type","map","method","join","slots","slot","collectNamedSlots","layoutPath","layoutDir","dirname","items","readdir","withFileTypes","item","isDirectory","name","startsWith","push","slice","pluginState","routeTypes","edge","static","dynamic","node","extra","formatRouteToRouteType","route","isDynamic","split","part","endsWith","routeType","redirectsRewritesTypesProcessed","addRedirectsRewritesRouteTypes","rewrites","redirects","addExtraRoute","source","tokens","Array","isArray","possibleNormalizedRoutes","slugCnt","append","suffix","i","length","fork","currentLength","token","slug","modifier","prefix","pattern","test","normalizedRoute","rewrite","beforeFiles","afterFiles","fallback","redirect","createRouteDefinitions","staticRouteTypes","dynamicRouteTypes","routeTypesFallback","appTypesBasePath","NextTypesPlugin","constructor","dir","distDir","appDir","dev","isEdgeServer","pageExtensions","pagesDir","typedRoutes","distDirAbsolutePath","originalRewrites","originalRedirects","getRelativePathFromAppTypesDir","moduleRelativePathToAppDir","moduleAbsolutePath","moduleInAppTypesAbsolutePath","relative","collectPage","filePath","isApp","sep","isPages","apply","compiler","assetDirRelative","handleModule","mod","assets","resource","pageExtensionsRegex","RegExp","layer","reactServerComponents","IS_LAYOUT","IS_PAGE","IS_ROUTE","IS_IMPORTABLE","relativePathToApp","typePath","replace","relativeImportPath","assetPath","RawSource","hooks","compilation","tap","processAssets","tapAsync","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_HASH","callback","promises","chunkGroups","forEach","chunkGroup","chunks","chunk","chunkModules","chunkGraph","getChunkModulesIterable","anyModule","modules","concatenatedMod","Promise","all","packageJsonAssetPath","file","linkAssetPath"],"mappings":"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"}