{"version":3,"sources":["../../src/build/index.ts"],"sourcesContent":["import type { AppBuildManifest } from './webpack/plugins/app-build-manifest-plugin'\nimport type { PagesManifest } from './webpack/plugins/pages-manifest-plugin'\nimport type { ExportPathMap, NextConfigComplete } from '../server/config-shared'\nimport type { MiddlewareManifest } from './webpack/plugins/middleware-plugin'\nimport type { ActionManifest } from './webpack/plugins/flight-client-entry-plugin'\nimport type { ExportAppOptions } from '../export/types'\nimport type { Revalidate } from '../server/lib/revalidate'\n\nimport '../lib/setup-exception-listeners'\n\nimport { loadEnvConfig, type LoadedEnvFiles } from '@next/env'\nimport { bold, yellow } from '../lib/picocolors'\nimport crypto from 'crypto'\nimport { makeRe } from 'next/dist/compiled/picomatch'\nimport { existsSync, promises as fs } from 'fs'\nimport os from 'os'\nimport { Worker } from '../lib/worker'\nimport { defaultConfig } from '../server/config-shared'\nimport devalue from 'next/dist/compiled/devalue'\nimport findUp from 'next/dist/compiled/find-up'\nimport { nanoid } from 'next/dist/compiled/nanoid/index.cjs'\nimport { Sema } from 'next/dist/compiled/async-sema'\nimport path from 'path'\nimport {\n  STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR,\n  PUBLIC_DIR_MIDDLEWARE_CONFLICT,\n  MIDDLEWARE_FILENAME,\n  PAGES_DIR_ALIAS,\n  INSTRUMENTATION_HOOK_FILENAME,\n  RSC_PREFETCH_SUFFIX,\n  RSC_SUFFIX,\n} from '../lib/constants'\nimport { FileType, fileExists } from '../lib/file-exists'\nimport { findPagesDir } from '../lib/find-pages-dir'\nimport loadCustomRoutes, {\n  normalizeRouteRegex,\n} from '../lib/load-custom-routes'\nimport type {\n  CustomRoutes,\n  Header,\n  Redirect,\n  Rewrite,\n  RouteHas,\n} from '../lib/load-custom-routes'\nimport { nonNullable } from '../lib/non-nullable'\nimport { recursiveDelete } from '../lib/recursive-delete'\nimport { verifyPartytownSetup } from '../lib/verify-partytown-setup'\nimport { validateTurboNextConfig } from '../lib/turbopack-warning'\nimport {\n  BUILD_ID_FILE,\n  BUILD_MANIFEST,\n  CLIENT_STATIC_FILES_PATH,\n  EXPORT_DETAIL,\n  EXPORT_MARKER,\n  AUTOMATIC_FONT_OPTIMIZATION_MANIFEST,\n  IMAGES_MANIFEST,\n  PAGES_MANIFEST,\n  PHASE_PRODUCTION_BUILD,\n  PRERENDER_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  ROUTES_MANIFEST,\n  SERVER_DIRECTORY,\n  SERVER_FILES_MANIFEST,\n  STATIC_STATUS_PAGES,\n  MIDDLEWARE_MANIFEST,\n  APP_PATHS_MANIFEST,\n  APP_PATH_ROUTES_MANIFEST,\n  APP_BUILD_MANIFEST,\n  RSC_MODULE_TYPES,\n  NEXT_FONT_MANIFEST,\n  SUBRESOURCE_INTEGRITY_MANIFEST,\n  MIDDLEWARE_BUILD_MANIFEST,\n  MIDDLEWARE_REACT_LOADABLE_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n  FUNCTIONS_CONFIG_MANIFEST,\n  UNDERSCORE_NOT_FOUND_ROUTE_ENTRY,\n  UNDERSCORE_NOT_FOUND_ROUTE,\n} from '../shared/lib/constants'\nimport { getSortedRoutes, isDynamicRoute } from '../shared/lib/router/utils'\nimport type { __ApiPreviewProps } from '../server/api-utils'\nimport loadConfig from '../server/config'\nimport type { BuildManifest } from '../server/get-page-files'\nimport { normalizePagePath } from '../shared/lib/page-path/normalize-page-path'\nimport { getPagePath } from '../server/require'\nimport * as ciEnvironment from '../telemetry/ci-info'\nimport {\n  turborepoTraceAccess,\n  TurborepoAccessTraceResult,\n  writeTurborepoAccessTraceResult,\n} from './turborepo-access-trace'\n\nimport {\n  eventBuildOptimize,\n  eventCliSession,\n  eventBuildFeatureUsage,\n  eventNextPlugins,\n  EVENT_BUILD_FEATURE_USAGE,\n  eventPackageUsedInGetServerSideProps,\n  eventBuildCompleted,\n} from '../telemetry/events'\nimport type { EventBuildFeatureUsage } from '../telemetry/events'\nimport { Telemetry } from '../telemetry/storage'\nimport { getPageStaticInfo } from './analysis/get-page-static-info'\nimport { createPagesMapping, getPageFromPath, sortByPageExts } from './entries'\nimport { PAGE_TYPES } from '../lib/page-types'\nimport { generateBuildId } from './generate-build-id'\nimport { isWriteable } from './is-writeable'\nimport * as Log from './output/log'\nimport createSpinner from './spinner'\nimport { trace, flushAllTraces, setGlobal, type Span } from '../trace'\nimport {\n  detectConflictingPaths,\n  computeFromManifest,\n  getJsPageSizeInKb,\n  printCustomRoutes,\n  printTreeView,\n  copyTracedFiles,\n  isReservedPage,\n  isAppBuiltinNotFoundPage,\n  collectRoutesUsingEdgeRuntime,\n} from './utils'\nimport type { PageInfo, PageInfos, AppConfig } from './utils'\nimport { writeBuildId } from './write-build-id'\nimport { normalizeLocalePath } from '../shared/lib/i18n/normalize-locale-path'\nimport isError from '../lib/is-error'\nimport type { NextError } from '../lib/is-error'\nimport { isEdgeRuntime } from '../lib/is-edge-runtime'\nimport { recursiveCopy } from '../lib/recursive-copy'\nimport { recursiveReadDir } from '../lib/recursive-readdir'\nimport {\n  loadBindings,\n  lockfilePatchPromise,\n  teardownTraceSubscriber,\n  teardownHeapProfiler,\n  createDefineEnv,\n} from './swc'\nimport { getNamedRouteRegex } from '../shared/lib/router/utils/route-regex'\nimport { getFilesInDir } from '../lib/get-files-in-dir'\nimport { eventSwcPlugins } from '../telemetry/events/swc-plugins'\nimport { normalizeAppPath } from '../shared/lib/router/utils/app-paths'\nimport {\n  ACTION_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  RSC_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n} from '../client/components/app-router-headers'\nimport { webpackBuild } from './webpack-build'\nimport { NextBuildContext, type MappedPages } from './build-context'\nimport { normalizePathSep } from '../shared/lib/page-path/normalize-path-sep'\nimport { isAppRouteRoute } from '../lib/is-app-route-route'\nimport { createClientRouterFilter } from '../lib/create-client-router-filter'\nimport { createValidFileMatcher } from '../server/lib/find-page-file'\nimport { startTypeChecking } from './type-check'\nimport { generateInterceptionRoutesRewrites } from '../lib/generate-interception-routes-rewrites'\n\nimport { buildDataRoute } from '../server/lib/router-utils/build-data-route'\nimport { collectBuildTraces } from './collect-build-traces'\nimport type { BuildTraceContext } from './webpack/plugins/next-trace-entrypoints-plugin'\nimport { formatManifest } from './manifests/formatter/format-manifest'\nimport {\n  recordFrameworkVersion,\n  updateBuildDiagnostics,\n} from '../diagnostics/build-diagnostics'\nimport { getStartServerInfo, logStartInfo } from '../server/lib/app-info-log'\nimport type { NextEnabledDirectories } from '../server/base-server'\nimport { hasCustomExportOutput } from '../export/utils'\nimport {\n  getTurbopackJsConfig,\n  handleEntrypoints,\n  type EntryIssuesMap,\n  handleRouteType,\n  handlePagesErrorRoute,\n  formatIssue,\n  isRelevantWarning,\n} from '../server/dev/turbopack-utils'\nimport { TurbopackManifestLoader } from '../server/dev/turbopack/manifest-loader'\nimport type { Entrypoints } from '../server/dev/turbopack/types'\nimport { buildCustomRoute } from '../lib/build-custom-route'\nimport { createProgress } from './progress'\nimport { traceMemoryUsage } from '../lib/memory/trace'\nimport { generateEncryptionKeyBase64 } from '../server/app-render/encryption-utils'\nimport type { DeepReadonly } from '../shared/lib/deep-readonly'\nimport uploadTrace from '../trace/upload-trace'\nimport {\n  checkIsAppPPREnabled,\n  checkIsRoutePPREnabled,\n} from '../server/lib/experimental/ppr'\nimport {\n  detectChangedEntries,\n  type DetectedEntriesResult,\n} from './flying-shuttle/detect-changed-entries'\nimport { storeShuttle } from './flying-shuttle/store-shuttle'\nimport { stitchBuilds } from './flying-shuttle/stitch-builds'\n\ninterface ExperimentalBypassForInfo {\n  experimentalBypassFor?: RouteHas[]\n}\n\ninterface ExperimentalPPRInfo {\n  experimentalPPR: boolean | undefined\n}\n\ninterface DataRouteRouteInfo {\n  dataRoute: string | null\n  prefetchDataRoute: string | null | undefined\n}\n\nexport interface SsgRoute\n  extends ExperimentalBypassForInfo,\n    DataRouteRouteInfo,\n    ExperimentalPPRInfo {\n  initialRevalidateSeconds: Revalidate\n  srcRoute: string | null\n  initialStatus?: number\n  initialHeaders?: Record<string, string>\n}\n\nexport interface DynamicSsgRoute\n  extends ExperimentalBypassForInfo,\n    DataRouteRouteInfo,\n    ExperimentalPPRInfo {\n  fallback: string | null | false\n  routeRegex: string\n  dataRouteRegex: string | null\n  prefetchDataRouteRegex: string | null | undefined\n}\n\nexport type PrerenderManifest = {\n  version: 4\n  routes: { [route: string]: SsgRoute }\n  dynamicRoutes: { [route: string]: DynamicSsgRoute }\n  notFoundRoutes: string[]\n  preview: __ApiPreviewProps\n}\n\ntype ManifestBuiltRoute = {\n  /**\n   * The route pattern used to match requests for this route.\n   */\n  regex: string\n}\n\nexport type ManifestRewriteRoute = ManifestBuiltRoute & Rewrite\nexport type ManifestRedirectRoute = ManifestBuiltRoute & Redirect\nexport type ManifestHeaderRoute = ManifestBuiltRoute & Header\n\nexport type ManifestRoute = ManifestBuiltRoute & {\n  page: string\n  namedRegex?: string\n  routeKeys?: { [key: string]: string }\n}\n\nexport type ManifestDataRoute = {\n  page: string\n  routeKeys?: { [key: string]: string }\n  dataRouteRegex: string\n  namedDataRouteRegex?: string\n}\n\nexport type RoutesManifest = {\n  version: number\n  pages404: boolean\n  basePath: string\n  redirects: Array<Redirect>\n  rewrites?:\n    | Array<ManifestRewriteRoute>\n    | {\n        beforeFiles: Array<ManifestRewriteRoute>\n        afterFiles: Array<ManifestRewriteRoute>\n        fallback: Array<ManifestRewriteRoute>\n      }\n  headers: Array<ManifestHeaderRoute>\n  staticRoutes: Array<ManifestRoute>\n  dynamicRoutes: Array<ManifestRoute>\n  dataRoutes: Array<ManifestDataRoute>\n  i18n?: {\n    domains?: Array<{\n      http?: true\n      domain: string\n      locales?: string[]\n      defaultLocale: string\n    }>\n    locales: string[]\n    defaultLocale: string\n    localeDetection?: false\n  }\n  rsc: {\n    header: typeof RSC_HEADER\n    didPostponeHeader: typeof NEXT_DID_POSTPONE_HEADER\n    varyHeader: string\n    prefetchHeader: typeof NEXT_ROUTER_PREFETCH_HEADER\n    suffix: typeof RSC_SUFFIX\n    prefetchSuffix: typeof RSC_PREFETCH_SUFFIX\n  }\n  skipMiddlewareUrlNormalize?: boolean\n  caseSensitive?: boolean\n}\n\nfunction pageToRoute(page: string) {\n  const routeRegex = getNamedRouteRegex(page, true)\n  return {\n    page,\n    regex: normalizeRouteRegex(routeRegex.re.source),\n    routeKeys: routeRegex.routeKeys,\n    namedRegex: routeRegex.namedRegex,\n  }\n}\n\nfunction getCacheDir(distDir: string): string {\n  const cacheDir = path.join(distDir, 'cache')\n  if (ciEnvironment.isCI && !ciEnvironment.hasNextSupport) {\n    const hasCache = existsSync(cacheDir)\n\n    if (!hasCache) {\n      // Intentionally not piping to stderr which is what `Log.warn` does in case people fail in CI when\n      // stderr is detected.\n      console.log(\n        `${Log.prefixes.warn} No build cache found. Please configure build caching for faster rebuilds. Read more: https://nextjs.org/docs/messages/no-cache`\n      )\n    }\n  }\n  return cacheDir\n}\n\nasync function writeFileUtf8(filePath: string, content: string): Promise<void> {\n  await fs.writeFile(filePath, content, 'utf-8')\n}\n\nfunction readFileUtf8(filePath: string): Promise<string> {\n  return fs.readFile(filePath, 'utf8')\n}\n\nasync function writeManifest<T extends object>(\n  filePath: string,\n  manifest: T\n): Promise<void> {\n  await writeFileUtf8(filePath, formatManifest(manifest))\n}\n\nasync function readManifest<T extends object>(filePath: string): Promise<T> {\n  return JSON.parse(await readFileUtf8(filePath))\n}\n\nasync function writePrerenderManifest(\n  distDir: string,\n  manifest: DeepReadonly<PrerenderManifest>\n): Promise<void> {\n  await writeManifest(path.join(distDir, PRERENDER_MANIFEST), manifest)\n}\n\nasync function writeClientSsgManifest(\n  prerenderManifest: DeepReadonly<PrerenderManifest>,\n  {\n    buildId,\n    distDir,\n    locales,\n  }: { buildId: string; distDir: string; locales: string[] }\n) {\n  const ssgPages = new Set<string>(\n    [\n      ...Object.entries(prerenderManifest.routes)\n        // Filter out dynamic routes\n        .filter(([, { srcRoute }]) => srcRoute == null)\n        .map(([route]) => normalizeLocalePath(route, locales).pathname),\n      ...Object.keys(prerenderManifest.dynamicRoutes),\n    ].sort()\n  )\n\n  const clientSsgManifestContent = `self.__SSG_MANIFEST=${devalue(\n    ssgPages\n  )};self.__SSG_MANIFEST_CB&&self.__SSG_MANIFEST_CB()`\n\n  await writeFileUtf8(\n    path.join(distDir, CLIENT_STATIC_FILES_PATH, buildId, '_ssgManifest.js'),\n    clientSsgManifestContent\n  )\n}\n\ninterface FunctionsConfigManifest {\n  version: number\n  functions: Record<string, Record<string, string | number>>\n}\n\nasync function writeFunctionsConfigManifest(\n  distDir: string,\n  manifest: FunctionsConfigManifest\n): Promise<void> {\n  await writeManifest(\n    path.join(distDir, SERVER_DIRECTORY, FUNCTIONS_CONFIG_MANIFEST),\n    manifest\n  )\n}\n\ninterface RequiredServerFilesManifest {\n  version: number\n  config: NextConfigComplete\n  appDir: string\n  relativeAppDir: string\n  files: string[]\n  ignore: string[]\n}\n\nasync function writeRequiredServerFilesManifest(\n  distDir: string,\n  requiredServerFiles: RequiredServerFilesManifest\n) {\n  await writeManifest(\n    path.join(distDir, SERVER_FILES_MANIFEST),\n    requiredServerFiles\n  )\n}\n\nasync function writeImagesManifest(\n  distDir: string,\n  config: NextConfigComplete\n): Promise<void> {\n  const images = { ...config.images }\n  const { deviceSizes, imageSizes } = images\n  ;(images as any).sizes = [...deviceSizes, ...imageSizes]\n  images.remotePatterns = (config?.images?.remotePatterns || []).map((p) => ({\n    // Should be the same as matchRemotePattern()\n    protocol: p.protocol,\n    hostname: makeRe(p.hostname).source,\n    port: p.port,\n    pathname: makeRe(p.pathname ?? '**', { dot: true }).source,\n  }))\n\n  await writeManifest(path.join(distDir, IMAGES_MANIFEST), {\n    version: 1,\n    images,\n  })\n}\n\nconst STANDALONE_DIRECTORY = 'standalone' as const\nasync function writeStandaloneDirectory(\n  nextBuildSpan: Span,\n  distDir: string,\n  pageKeys: { pages: string[]; app: string[] | undefined },\n  denormalizedAppPages: string[] | undefined,\n  outputFileTracingRoot: string,\n  requiredServerFiles: RequiredServerFilesManifest,\n  middlewareManifest: MiddlewareManifest,\n  hasInstrumentationHook: boolean,\n  staticPages: Set<string>,\n  loadedEnvFiles: LoadedEnvFiles,\n  appDir: string | undefined\n) {\n  await nextBuildSpan\n    .traceChild('write-standalone-directory')\n    .traceAsyncFn(async () => {\n      await copyTracedFiles(\n        // requiredServerFiles.appDir Refers to the application directory, not App Router.\n        requiredServerFiles.appDir,\n        distDir,\n        pageKeys.pages,\n        denormalizedAppPages,\n        outputFileTracingRoot,\n        requiredServerFiles.config,\n        middlewareManifest,\n        hasInstrumentationHook,\n        staticPages\n      )\n\n      for (const file of [\n        ...requiredServerFiles.files,\n        path.join(requiredServerFiles.config.distDir, SERVER_FILES_MANIFEST),\n        ...loadedEnvFiles.reduce<string[]>((acc, envFile) => {\n          if (['.env', '.env.production'].includes(envFile.path)) {\n            acc.push(envFile.path)\n          }\n          return acc\n        }, []),\n      ]) {\n        // requiredServerFiles.appDir Refers to the application directory, not App Router.\n        const filePath = path.join(requiredServerFiles.appDir, file)\n        const outputPath = path.join(\n          distDir,\n          STANDALONE_DIRECTORY,\n          path.relative(outputFileTracingRoot, filePath)\n        )\n        await fs.mkdir(path.dirname(outputPath), {\n          recursive: true,\n        })\n        await fs.copyFile(filePath, outputPath)\n      }\n      await recursiveCopy(\n        path.join(distDir, SERVER_DIRECTORY, 'pages'),\n        path.join(\n          distDir,\n          STANDALONE_DIRECTORY,\n          path.relative(outputFileTracingRoot, distDir),\n          SERVER_DIRECTORY,\n          'pages'\n        ),\n        { overwrite: true }\n      )\n      if (appDir) {\n        const originalServerApp = path.join(distDir, SERVER_DIRECTORY, 'app')\n        if (existsSync(originalServerApp)) {\n          await recursiveCopy(\n            originalServerApp,\n            path.join(\n              distDir,\n              STANDALONE_DIRECTORY,\n              path.relative(outputFileTracingRoot, distDir),\n              SERVER_DIRECTORY,\n              'app'\n            ),\n            { overwrite: true }\n          )\n        }\n      }\n    })\n}\n\nfunction getNumberOfWorkers(config: NextConfigComplete) {\n  if (\n    config.experimental.cpus &&\n    config.experimental.cpus !== defaultConfig.experimental!.cpus\n  ) {\n    return config.experimental.cpus\n  }\n\n  if (config.experimental.memoryBasedWorkersCount) {\n    return Math.max(\n      Math.min(config.experimental.cpus || 1, Math.floor(os.freemem() / 1e9)),\n      // enforce a minimum of 4 workers\n      4\n    )\n  }\n\n  if (config.experimental.cpus) {\n    return config.experimental.cpus\n  }\n\n  // Fall back to 4 workers if a count is not specified\n  return 4\n}\n\nconst staticWorkerPath = require.resolve('./worker')\nconst staticWorkerExposedMethods = [\n  'hasCustomGetInitialProps',\n  'isPageStatic',\n  'getDefinedNamedExports',\n  'exportPage',\n] as const\ntype StaticWorker = typeof import('./worker') & Worker\ntype PageDataCollectionKeys = Exclude<\n  (typeof staticWorkerExposedMethods)[number],\n  'exportPage'\n>\n\nfunction createStaticWorker(config: NextConfigComplete): StaticWorker {\n  let infoPrinted = false\n  const timeout = config.staticPageGenerationTimeout || 0\n\n  return new Worker(staticWorkerPath, {\n    timeout: timeout * 1000,\n    logger: Log,\n    onRestart: (method, args, attempts) => {\n      if (method === 'exportPage') {\n        const [arg] = args as Parameters<StaticWorker['exportPage']>\n        const pagePath = arg.path\n        if (attempts >= 3) {\n          throw new Error(\n            `Static page generation for ${pagePath} is still timing out after 3 attempts. See more info here https://nextjs.org/docs/messages/static-page-generation-timeout`\n          )\n        }\n        Log.warn(\n          `Restarted static page generation for ${pagePath} because it took more than ${timeout} seconds`\n        )\n      } else {\n        const [arg] = args as Parameters<StaticWorker[PageDataCollectionKeys]>\n        const pagePath = arg.page\n        if (attempts >= 2) {\n          throw new Error(\n            `Collecting page data for ${pagePath} is still timing out after 2 attempts. See more info here https://nextjs.org/docs/messages/page-data-collection-timeout`\n          )\n        }\n        Log.warn(\n          `Restarted collecting page data for ${pagePath} because it took more than ${timeout} seconds`\n        )\n      }\n      if (!infoPrinted) {\n        Log.warn(\n          'See more info here https://nextjs.org/docs/messages/static-page-generation-timeout'\n        )\n        infoPrinted = true\n      }\n    },\n    numWorkers: getNumberOfWorkers(config),\n    forkOptions: {\n      env: process.env,\n    },\n    enableWorkerThreads: config.experimental.workerThreads,\n    exposedMethods: staticWorkerExposedMethods,\n  }) as StaticWorker\n}\n\nasync function writeFullyStaticExport(\n  config: NextConfigComplete,\n  dir: string,\n  enabledDirectories: NextEnabledDirectories,\n  configOutDir: string,\n  nextBuildSpan: Span\n): Promise<void> {\n  const exportApp = require('../export')\n    .default as typeof import('../export').default\n\n  const pagesWorker = createStaticWorker(config)\n  const appWorker = createStaticWorker(config)\n\n  await exportApp(\n    dir,\n    {\n      buildExport: false,\n      nextConfig: config,\n      enabledDirectories,\n      silent: true,\n      outdir: path.join(dir, configOutDir),\n      // The worker already explicitly binds `this` to each of the\n      // exposed methods.\n      exportAppPageWorker: appWorker?.exportPage,\n      exportPageWorker: pagesWorker?.exportPage,\n      endWorker: async () => {\n        await pagesWorker.end()\n        await appWorker.end()\n      },\n    },\n    nextBuildSpan\n  )\n\n  // ensure the worker is not left hanging\n  pagesWorker.close()\n  appWorker.close()\n}\n\nasync function getBuildId(\n  isGenerateMode: boolean,\n  distDir: string,\n  nextBuildSpan: Span,\n  config: NextConfigComplete\n) {\n  if (isGenerateMode) {\n    return await fs.readFile(path.join(distDir, 'BUILD_ID'), 'utf8')\n  }\n  return await nextBuildSpan\n    .traceChild('generate-buildid')\n    .traceAsyncFn(() => generateBuildId(config.generateBuildId, nanoid))\n}\n\nconst IS_TURBOPACK_BUILD = process.env.TURBOPACK && process.env.TURBOPACK_BUILD\n\nexport default async function build(\n  dir: string,\n  reactProductionProfiling = false,\n  debugOutput = false,\n  runLint = true,\n  noMangling = false,\n  appDirOnly = false,\n  turboNextBuild = false,\n  experimentalBuildMode: 'default' | 'compile' | 'generate',\n  traceUploadUrl: string | undefined\n): Promise<void> {\n  const isCompileMode = experimentalBuildMode === 'compile'\n  const isGenerateMode = experimentalBuildMode === 'generate'\n\n  let loadedConfig: NextConfigComplete | undefined\n  try {\n    const nextBuildSpan = trace('next-build', undefined, {\n      buildMode: experimentalBuildMode,\n      isTurboBuild: String(turboNextBuild),\n      version: process.env.__NEXT_VERSION as string,\n    })\n\n    NextBuildContext.nextBuildSpan = nextBuildSpan\n    NextBuildContext.dir = dir\n    NextBuildContext.appDirOnly = appDirOnly\n    NextBuildContext.reactProductionProfiling = reactProductionProfiling\n    NextBuildContext.noMangling = noMangling\n\n    await nextBuildSpan.traceAsyncFn(async () => {\n      // attempt to load global env values so they are available in next.config.js\n      const { loadedEnvFiles } = nextBuildSpan\n        .traceChild('load-dotenv')\n        .traceFn(() => loadEnvConfig(dir, false, Log))\n      NextBuildContext.loadedEnvFiles = loadedEnvFiles\n\n      const turborepoAccessTraceResult = new TurborepoAccessTraceResult()\n      const config: NextConfigComplete = await nextBuildSpan\n        .traceChild('load-next-config')\n        .traceAsyncFn(() =>\n          turborepoTraceAccess(\n            () =>\n              loadConfig(PHASE_PRODUCTION_BUILD, dir, {\n                // Log for next.config loading process\n                silent: false,\n              }),\n            turborepoAccessTraceResult\n          )\n        )\n      loadedConfig = config\n\n      process.env.NEXT_DEPLOYMENT_ID = config.deploymentId || ''\n      NextBuildContext.config = config\n\n      let configOutDir = 'out'\n      if (hasCustomExportOutput(config)) {\n        configOutDir = config.distDir\n        config.distDir = '.next'\n      }\n      const distDir = path.join(dir, config.distDir)\n      setGlobal('phase', PHASE_PRODUCTION_BUILD)\n      setGlobal('distDir', distDir)\n\n      const buildId = await getBuildId(\n        isGenerateMode,\n        distDir,\n        nextBuildSpan,\n        config\n      )\n      NextBuildContext.buildId = buildId\n\n      const shuttleDir = path.join(distDir, 'cache', 'shuttle')\n\n      if (config.experimental.flyingShuttle) {\n        await fs.mkdir(shuttleDir, {\n          recursive: true,\n        })\n      }\n\n      const customRoutes: CustomRoutes = await nextBuildSpan\n        .traceChild('load-custom-routes')\n        .traceAsyncFn(() => loadCustomRoutes(config))\n\n      const { headers, rewrites, redirects } = customRoutes\n      const combinedRewrites: Rewrite[] = [\n        ...rewrites.beforeFiles,\n        ...rewrites.afterFiles,\n        ...rewrites.fallback,\n      ]\n      const hasRewrites = combinedRewrites.length > 0\n\n      NextBuildContext.originalRewrites = config._originalRewrites\n      NextBuildContext.originalRedirects = config._originalRedirects\n\n      const cacheDir = getCacheDir(distDir)\n\n      const telemetry = new Telemetry({ distDir })\n\n      setGlobal('telemetry', telemetry)\n\n      const publicDir = path.join(dir, 'public')\n      const { pagesDir, appDir } = findPagesDir(dir)\n      NextBuildContext.pagesDir = pagesDir\n      NextBuildContext.appDir = appDir\n\n      const enabledDirectories: NextEnabledDirectories = {\n        app: typeof appDir === 'string',\n        pages: typeof pagesDir === 'string',\n      }\n\n      // Generate a random encryption key for this build.\n      // This key is used to encrypt cross boundary values and can be used to generate hashes.\n      const encryptionKey = await generateEncryptionKeyBase64()\n      NextBuildContext.encryptionKey = encryptionKey\n\n      const isSrcDir = path\n        .relative(dir, pagesDir || appDir || '')\n        .startsWith('src')\n      const hasPublicDir = existsSync(publicDir)\n\n      telemetry.record(\n        eventCliSession(dir, config, {\n          webpackVersion: 5,\n          cliCommand: 'build',\n          isSrcDir,\n          hasNowJson: !!(await findUp('now.json', { cwd: dir })),\n          isCustomServer: null,\n          turboFlag: false,\n          pagesDir: !!pagesDir,\n          appDir: !!appDir,\n        })\n      )\n\n      eventNextPlugins(path.resolve(dir)).then((events) =>\n        telemetry.record(events)\n      )\n\n      eventSwcPlugins(path.resolve(dir), config).then((events) =>\n        telemetry.record(events)\n      )\n\n      // Always log next version first then start rest jobs\n      const { envInfo, expFeatureInfo } = await getStartServerInfo(dir, false)\n      logStartInfo({\n        networkUrl: null,\n        appUrl: null,\n        envInfo,\n        expFeatureInfo,\n      })\n\n      const ignoreESLint = Boolean(config.eslint.ignoreDuringBuilds)\n      const shouldLint = !ignoreESLint && runLint\n\n      const typeCheckingOptions: Parameters<typeof startTypeChecking>[0] = {\n        dir,\n        appDir,\n        pagesDir,\n        runLint,\n        shouldLint,\n        ignoreESLint,\n        telemetry,\n        nextBuildSpan,\n        config,\n        cacheDir,\n      }\n\n      // For app directory, we run type checking after build. That's because\n      // we dynamically generate types for each layout and page in the app\n      // directory.\n      if (!appDir && !isCompileMode)\n        await startTypeChecking(typeCheckingOptions)\n\n      if (appDir && 'exportPathMap' in config) {\n        Log.error(\n          'The \"exportPathMap\" configuration cannot be used with the \"app\" directory. Please use generateStaticParams() instead.'\n        )\n        await telemetry.flush()\n        process.exit(1)\n      }\n\n      const buildLintEvent: EventBuildFeatureUsage = {\n        featureName: 'build-lint',\n        invocationCount: shouldLint ? 1 : 0,\n      }\n      telemetry.record({\n        eventName: EVENT_BUILD_FEATURE_USAGE,\n        payload: buildLintEvent,\n      })\n\n      const validFileMatcher = createValidFileMatcher(\n        config.pageExtensions,\n        appDir\n      )\n\n      let pagesPaths =\n        !appDirOnly && pagesDir\n          ? await nextBuildSpan.traceChild('collect-pages').traceAsyncFn(() =>\n              recursiveReadDir(pagesDir, {\n                pathnameFilter: validFileMatcher.isPageFile,\n              })\n            )\n          : []\n\n      let changedPagePathsResult:\n        | undefined\n        | {\n            changed: DetectedEntriesResult\n            unchanged: DetectedEntriesResult\n          }\n\n      if (pagesPaths && config.experimental.flyingShuttle) {\n        changedPagePathsResult = await detectChangedEntries({\n          pagesPaths,\n          pageExtensions: config.pageExtensions,\n          distDir,\n          shuttleDir,\n        })\n        console.log({ changedPagePathsResult })\n        pagesPaths = changedPagePathsResult.changed.pages\n      }\n\n      const middlewareDetectionRegExp = new RegExp(\n        `^${MIDDLEWARE_FILENAME}\\\\.(?:${config.pageExtensions.join('|')})$`\n      )\n\n      const instrumentationHookDetectionRegExp = new RegExp(\n        `^${INSTRUMENTATION_HOOK_FILENAME}\\\\.(?:${config.pageExtensions.join(\n          '|'\n        )})$`\n      )\n\n      const rootDir = path.join((pagesDir || appDir)!, '..')\n      const instrumentationHookEnabled = Boolean(\n        config.experimental.instrumentationHook\n      )\n\n      const includes = [\n        middlewareDetectionRegExp,\n        ...(instrumentationHookEnabled\n          ? [instrumentationHookDetectionRegExp]\n          : []),\n      ]\n\n      const rootPaths = (await getFilesInDir(rootDir))\n        .filter((file) => includes.some((include) => include.test(file)))\n        .sort(sortByPageExts(config.pageExtensions))\n        .map((file) => path.join(rootDir, file).replace(dir, ''))\n\n      const hasInstrumentationHook = rootPaths.some((p) =>\n        p.includes(INSTRUMENTATION_HOOK_FILENAME)\n      )\n      const hasMiddlewareFile = rootPaths.some((p) =>\n        p.includes(MIDDLEWARE_FILENAME)\n      )\n\n      NextBuildContext.hasInstrumentationHook = hasInstrumentationHook\n\n      const previewProps: __ApiPreviewProps = {\n        previewModeId: crypto.randomBytes(16).toString('hex'),\n        previewModeSigningKey: crypto.randomBytes(32).toString('hex'),\n        previewModeEncryptionKey: crypto.randomBytes(32).toString('hex'),\n      }\n      NextBuildContext.previewProps = previewProps\n\n      const mappedPages = await nextBuildSpan\n        .traceChild('create-pages-mapping')\n        .traceAsyncFn(() =>\n          createPagesMapping({\n            isDev: false,\n            pageExtensions: config.pageExtensions,\n            pagesType: PAGE_TYPES.PAGES,\n            pagePaths: pagesPaths,\n            pagesDir,\n            appDir,\n          })\n        )\n      NextBuildContext.mappedPages = mappedPages\n\n      let mappedAppPages: MappedPages | undefined\n      let denormalizedAppPages: string[] | undefined\n      let changedAppPathsResult:\n        | undefined\n        | {\n            changed: DetectedEntriesResult\n            unchanged: DetectedEntriesResult\n          }\n\n      if (appDir) {\n        let appPaths = await nextBuildSpan\n          .traceChild('collect-app-paths')\n          .traceAsyncFn(() =>\n            recursiveReadDir(appDir, {\n              pathnameFilter: (absolutePath) =>\n                validFileMatcher.isAppRouterPage(absolutePath) ||\n                // For now we only collect the root /not-found page in the app\n                // directory as the 404 fallback\n                validFileMatcher.isRootNotFound(absolutePath),\n              ignorePartFilter: (part) => part.startsWith('_'),\n            })\n          )\n\n        if (appPaths && config.experimental.flyingShuttle) {\n          changedAppPathsResult = await detectChangedEntries({\n            appPaths,\n            pageExtensions: config.pageExtensions,\n            distDir,\n            shuttleDir,\n          })\n          console.log({ changedAppPathsResult })\n          appPaths = changedAppPathsResult.changed.app\n        }\n\n        mappedAppPages = await nextBuildSpan\n          .traceChild('create-app-mapping')\n          .traceAsyncFn(() =>\n            createPagesMapping({\n              pagePaths: appPaths,\n              isDev: false,\n              pagesType: PAGE_TYPES.APP,\n              pageExtensions: config.pageExtensions,\n              pagesDir,\n              appDir,\n            })\n          )\n\n        NextBuildContext.mappedAppPages = mappedAppPages\n      }\n\n      const mappedRootPaths = await createPagesMapping({\n        isDev: false,\n        pageExtensions: config.pageExtensions,\n        pagePaths: rootPaths,\n        pagesType: PAGE_TYPES.ROOT,\n        pagesDir: pagesDir,\n        appDir,\n      })\n      NextBuildContext.mappedRootPaths = mappedRootPaths\n\n      const pagesPageKeys = Object.keys(mappedPages)\n\n      const conflictingAppPagePaths: [pagePath: string, appPath: string][] = []\n      const appPageKeys = new Set<string>()\n      if (mappedAppPages) {\n        denormalizedAppPages = Object.keys(mappedAppPages)\n        for (const appKey of denormalizedAppPages) {\n          const normalizedAppPageKey = normalizeAppPath(appKey)\n          const pagePath = mappedPages[normalizedAppPageKey]\n          if (pagePath) {\n            const appPath = mappedAppPages[appKey]\n            conflictingAppPagePaths.push([\n              pagePath.replace(/^private-next-pages/, 'pages'),\n              appPath.replace(/^private-next-app-dir/, 'app'),\n            ])\n          }\n          appPageKeys.add(normalizedAppPageKey)\n        }\n      }\n\n      const appPaths = Array.from(appPageKeys)\n      // Interception routes are modelled as beforeFiles rewrites\n      rewrites.beforeFiles.push(\n        ...generateInterceptionRoutesRewrites(appPaths, config.basePath)\n      )\n\n      NextBuildContext.rewrites = rewrites\n\n      const totalAppPagesCount = appPaths.length\n\n      const pageKeys = {\n        pages: pagesPageKeys,\n        app: appPaths.length > 0 ? appPaths : undefined,\n      }\n\n      // Turbopack already handles conflicting app and page routes.\n      if (!IS_TURBOPACK_BUILD) {\n        const numConflictingAppPaths = conflictingAppPagePaths.length\n        if (mappedAppPages && numConflictingAppPaths > 0) {\n          Log.error(\n            `Conflicting app and page file${\n              numConflictingAppPaths === 1 ? ' was' : 's were'\n            } found, please remove the conflicting files to continue:`\n          )\n          for (const [pagePath, appPath] of conflictingAppPagePaths) {\n            Log.error(`  \"${pagePath}\" - \"${appPath}\"`)\n          }\n          await telemetry.flush()\n          process.exit(1)\n        }\n      }\n\n      const conflictingPublicFiles: string[] = []\n      const hasPages404 = mappedPages['/404']?.startsWith(PAGES_DIR_ALIAS)\n      const hasApp404 = !!mappedAppPages?.[UNDERSCORE_NOT_FOUND_ROUTE_ENTRY]\n      const hasCustomErrorPage =\n        mappedPages['/_error'].startsWith(PAGES_DIR_ALIAS)\n\n      if (hasPublicDir) {\n        const hasPublicUnderScoreNextDir = existsSync(\n          path.join(publicDir, '_next')\n        )\n        if (hasPublicUnderScoreNextDir) {\n          throw new Error(PUBLIC_DIR_MIDDLEWARE_CONFLICT)\n        }\n      }\n\n      await nextBuildSpan\n        .traceChild('public-dir-conflict-check')\n        .traceAsyncFn(async () => {\n          // Check if pages conflict with files in `public`\n          // Only a page of public file can be served, not both.\n          for (const page in mappedPages) {\n            const hasPublicPageFile = await fileExists(\n              path.join(publicDir, page === '/' ? '/index' : page),\n              FileType.File\n            )\n            if (hasPublicPageFile) {\n              conflictingPublicFiles.push(page)\n            }\n          }\n\n          const numConflicting = conflictingPublicFiles.length\n\n          if (numConflicting) {\n            throw new Error(\n              `Conflicting public and page file${\n                numConflicting === 1 ? ' was' : 's were'\n              } found. https://nextjs.org/docs/messages/conflicting-public-file-page\\n${conflictingPublicFiles.join(\n                '\\n'\n              )}`\n            )\n          }\n        })\n\n      const nestedReservedPages = pageKeys.pages.filter((page) => {\n        return (\n          page.match(/\\/(_app|_document|_error)$/) && path.dirname(page) !== '/'\n        )\n      })\n\n      if (nestedReservedPages.length) {\n        Log.warn(\n          `The following reserved Next.js pages were detected not directly under the pages directory:\\n` +\n            nestedReservedPages.join('\\n') +\n            `\\nSee more info here: https://nextjs.org/docs/messages/nested-reserved-page\\n`\n        )\n      }\n\n      const restrictedRedirectPaths = ['/_next'].map((p) =>\n        config.basePath ? `${config.basePath}${p}` : p\n      )\n\n      const routesManifestPath = path.join(distDir, ROUTES_MANIFEST)\n      const routesManifest: RoutesManifest = nextBuildSpan\n        .traceChild('generate-routes-manifest')\n        .traceFn(() => {\n          const sortedRoutes = getSortedRoutes([\n            ...pageKeys.pages,\n            ...(pageKeys.app ?? []),\n          ])\n          const dynamicRoutes: Array<ReturnType<typeof pageToRoute>> = []\n          const staticRoutes: typeof dynamicRoutes = []\n\n          for (const route of sortedRoutes) {\n            if (isDynamicRoute(route)) {\n              dynamicRoutes.push(pageToRoute(route))\n            } else if (!isReservedPage(route)) {\n              staticRoutes.push(pageToRoute(route))\n            }\n          }\n\n          return {\n            version: 3,\n            pages404: true,\n            caseSensitive: !!config.experimental.caseSensitiveRoutes,\n            basePath: config.basePath,\n            redirects: redirects.map((r) =>\n              buildCustomRoute('redirect', r, restrictedRedirectPaths)\n            ),\n            headers: headers.map((r) => buildCustomRoute('header', r)),\n            dynamicRoutes,\n            staticRoutes,\n            dataRoutes: [],\n            i18n: config.i18n || undefined,\n            rsc: {\n              header: RSC_HEADER,\n              // This vary header is used as a default. It is technically re-assigned in `base-server`,\n              // and may include an additional Vary option for `Next-URL`.\n              varyHeader: `${RSC_HEADER}, ${NEXT_ROUTER_STATE_TREE_HEADER}, ${NEXT_ROUTER_PREFETCH_HEADER}`,\n              prefetchHeader: NEXT_ROUTER_PREFETCH_HEADER,\n              didPostponeHeader: NEXT_DID_POSTPONE_HEADER,\n              contentTypeHeader: RSC_CONTENT_TYPE_HEADER,\n              suffix: RSC_SUFFIX,\n              prefetchSuffix: RSC_PREFETCH_SUFFIX,\n            },\n            skipMiddlewareUrlNormalize: config.skipMiddlewareUrlNormalize,\n          } as RoutesManifest\n        })\n\n      if (rewrites.beforeFiles.length === 0 && rewrites.fallback.length === 0) {\n        routesManifest.rewrites = rewrites.afterFiles.map((r) =>\n          buildCustomRoute('rewrite', r)\n        )\n      } else {\n        routesManifest.rewrites = {\n          beforeFiles: rewrites.beforeFiles.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n          afterFiles: rewrites.afterFiles.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n          fallback: rewrites.fallback.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n        }\n      }\n      let clientRouterFilters:\n        | undefined\n        | ReturnType<typeof createClientRouterFilter>\n\n      if (config.experimental.clientRouterFilter) {\n        const nonInternalRedirects = (config._originalRedirects || []).filter(\n          (r: any) => !r.internal\n        )\n        const filterPaths: string[] = []\n\n        if (config.experimental.flyingShuttle) {\n          filterPaths.push(\n            ...[\n              // client filter always has all app paths\n              ...(changedAppPathsResult?.unchanged?.app || []),\n              ...(changedAppPathsResult?.changed?.app || []),\n            ].map((entry) =>\n              normalizeAppPath(getPageFromPath(entry, config.pageExtensions))\n            ),\n            ...(changedPagePathsResult?.unchanged.pages.length\n              ? changedPagePathsResult.changed?.pages || []\n              : []\n            ).map((item) => getPageFromPath(item, config.pageExtensions))\n          )\n        } else {\n          filterPaths.push(...appPaths)\n        }\n\n        clientRouterFilters = createClientRouterFilter(\n          filterPaths,\n          config.experimental.clientRouterFilterRedirects\n            ? nonInternalRedirects\n            : [],\n          config.experimental.clientRouterFilterAllowedRate\n        )\n        NextBuildContext.clientRouterFilters = clientRouterFilters\n      }\n\n      const distDirCreated = await nextBuildSpan\n        .traceChild('create-dist-dir')\n        .traceAsyncFn(async () => {\n          try {\n            await fs.mkdir(distDir, { recursive: true })\n            return true\n          } catch (err) {\n            if (isError(err) && err.code === 'EPERM') {\n              return false\n            }\n            throw err\n          }\n        })\n\n      if (!distDirCreated || !(await isWriteable(distDir))) {\n        throw new Error(\n          '> Build directory is not writeable. https://nextjs.org/docs/messages/build-dir-not-writeable'\n        )\n      }\n\n      if (config.cleanDistDir && !isGenerateMode) {\n        await recursiveDelete(distDir, /^cache/)\n      }\n\n      // Ensure commonjs handling is used for files in the distDir (generally .next)\n      // Files outside of the distDir can be \"type\": \"module\"\n      await writeFileUtf8(\n        path.join(distDir, 'package.json'),\n        '{\"type\": \"commonjs\"}'\n      )\n\n      // These are written to distDir, so they need to come after creating and cleaning distDr.\n      await recordFrameworkVersion(process.env.__NEXT_VERSION as string)\n      await updateBuildDiagnostics({\n        buildStage: 'start',\n      })\n\n      const outputFileTracingRoot =\n        config.experimental.outputFileTracingRoot || dir\n\n      const pagesManifestPath = path.join(\n        distDir,\n        SERVER_DIRECTORY,\n        PAGES_MANIFEST\n      )\n\n      const { cacheHandler } = config\n\n      const requiredServerFilesManifest = nextBuildSpan\n        .traceChild('generate-required-server-files')\n        .traceFn(() => {\n          const serverFilesManifest: RequiredServerFilesManifest = {\n            version: 1,\n            config: {\n              ...config,\n              configFile: undefined,\n              ...(ciEnvironment.hasNextSupport\n                ? {\n                    compress: false,\n                  }\n                : {}),\n              cacheHandler: cacheHandler\n                ? path.relative(distDir, cacheHandler)\n                : config.cacheHandler,\n              experimental: {\n                ...config.experimental,\n                trustHostHeader: ciEnvironment.hasNextSupport,\n\n                // @ts-expect-error internal field TODO: fix this, should use a separate mechanism to pass the info.\n                isExperimentalCompile: isCompileMode,\n              },\n            },\n            appDir: dir,\n            relativeAppDir: path.relative(outputFileTracingRoot, dir),\n            files: [\n              ROUTES_MANIFEST,\n              path.relative(distDir, pagesManifestPath),\n              BUILD_MANIFEST,\n              PRERENDER_MANIFEST,\n              path.join(SERVER_DIRECTORY, MIDDLEWARE_MANIFEST),\n              path.join(SERVER_DIRECTORY, MIDDLEWARE_BUILD_MANIFEST + '.js'),\n              path.join(\n                SERVER_DIRECTORY,\n                MIDDLEWARE_REACT_LOADABLE_MANIFEST + '.js'\n              ),\n              ...(appDir\n                ? [\n                    ...(config.experimental.sri\n                      ? [\n                          path.join(\n                            SERVER_DIRECTORY,\n                            SUBRESOURCE_INTEGRITY_MANIFEST + '.js'\n                          ),\n                          path.join(\n                            SERVER_DIRECTORY,\n                            SUBRESOURCE_INTEGRITY_MANIFEST + '.json'\n                          ),\n                        ]\n                      : []),\n                    path.join(SERVER_DIRECTORY, APP_PATHS_MANIFEST),\n                    path.join(APP_PATH_ROUTES_MANIFEST),\n                    APP_BUILD_MANIFEST,\n                    path.join(\n                      SERVER_DIRECTORY,\n                      SERVER_REFERENCE_MANIFEST + '.js'\n                    ),\n                    path.join(\n                      SERVER_DIRECTORY,\n                      SERVER_REFERENCE_MANIFEST + '.json'\n                    ),\n                  ]\n                : []),\n              REACT_LOADABLE_MANIFEST,\n              config.optimizeFonts\n                ? path.join(\n                    SERVER_DIRECTORY,\n                    AUTOMATIC_FONT_OPTIMIZATION_MANIFEST\n                  )\n                : null,\n              BUILD_ID_FILE,\n              path.join(SERVER_DIRECTORY, NEXT_FONT_MANIFEST + '.js'),\n              path.join(SERVER_DIRECTORY, NEXT_FONT_MANIFEST + '.json'),\n              ...(hasInstrumentationHook\n                ? [\n                    path.join(\n                      SERVER_DIRECTORY,\n                      `${INSTRUMENTATION_HOOK_FILENAME}.js`\n                    ),\n                    path.join(\n                      SERVER_DIRECTORY,\n                      `edge-${INSTRUMENTATION_HOOK_FILENAME}.js`\n                    ),\n                  ]\n                : []),\n            ]\n              .filter(nonNullable)\n              .map((file) => path.join(config.distDir, file)),\n            ignore: [] as string[],\n          }\n\n          return serverFilesManifest\n        })\n\n      async function turbopackBuild(): Promise<{\n        duration: number\n        buildTraceContext: undefined\n      }> {\n        if (!IS_TURBOPACK_BUILD) {\n          throw new Error(\"next build doesn't support turbopack yet\")\n        }\n\n        await validateTurboNextConfig({\n          dir,\n          isDev: false,\n        })\n\n        const startTime = process.hrtime()\n        const bindings = await loadBindings(config?.experimental?.useWasmBinary)\n        const dev = false\n        const project = await bindings.turbo.createProject(\n          {\n            projectPath: dir,\n            rootPath: config.experimental.outputFileTracingRoot || dir,\n            nextConfig: config,\n            jsConfig: await getTurbopackJsConfig(dir, config),\n            watch: false,\n            dev,\n            env: process.env as Record<string, string>,\n            defineEnv: createDefineEnv({\n              isTurbopack: true,\n              clientRouterFilters,\n              config,\n              dev,\n              distDir,\n              fetchCacheKeyPrefix: config.experimental.fetchCacheKeyPrefix,\n              hasRewrites,\n              // Implemented separately in Turbopack, doesn't have to be passed here.\n              middlewareMatchers: undefined,\n            }),\n            buildId: NextBuildContext.buildId!,\n            encryptionKey: NextBuildContext.encryptionKey!,\n            previewProps: NextBuildContext.previewProps!,\n          },\n          {\n            memoryLimit: config.experimental.turbo?.memoryLimit,\n          }\n        )\n\n        await fs.mkdir(path.join(distDir, 'server'), { recursive: true })\n        await fs.mkdir(path.join(distDir, 'static', buildId), {\n          recursive: true,\n        })\n        await fs.writeFile(\n          path.join(distDir, 'package.json'),\n          JSON.stringify(\n            {\n              type: 'commonjs',\n            },\n            null,\n            2\n          )\n        )\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const entrypointsSubscription = project.entrypointsSubscribe()\n        const currentEntrypoints: Entrypoints = {\n          global: {\n            app: undefined,\n            document: undefined,\n            error: undefined,\n\n            middleware: undefined,\n            instrumentation: undefined,\n          },\n\n          app: new Map(),\n          page: new Map(),\n        }\n\n        const currentEntryIssues: EntryIssuesMap = new Map()\n\n        const manifestLoader = new TurbopackManifestLoader({\n          buildId,\n          distDir,\n          encryptionKey,\n        })\n\n        const entrypointsResult = await entrypointsSubscription.next()\n        if (entrypointsResult.done) {\n          throw new Error('Turbopack did not return any entrypoints')\n        }\n        entrypointsSubscription.return?.().catch(() => {})\n\n        const entrypoints = entrypointsResult.value\n\n        const topLevelErrors: {\n          message: string\n        }[] = []\n        for (const issue of entrypoints.issues) {\n          topLevelErrors.push({\n            message: formatIssue(issue),\n          })\n        }\n\n        if (topLevelErrors.length > 0) {\n          throw new Error(\n            `Turbopack build failed with ${\n              topLevelErrors.length\n            } issues:\\n${topLevelErrors.map((e) => e.message).join('\\n')}`\n          )\n        }\n\n        await handleEntrypoints({\n          entrypoints,\n          currentEntrypoints,\n          currentEntryIssues,\n          manifestLoader,\n          nextConfig: config,\n          devRewrites: undefined,\n          productionRewrites: customRoutes.rewrites,\n          logErrors: false,\n        })\n\n        const progress = createProgress(\n          currentEntrypoints.page.size + currentEntrypoints.app.size + 1,\n          'Building'\n        )\n        const promises: Promise<any>[] = []\n        const sema = new Sema(10)\n        const enqueue = (fn: () => Promise<void>) => {\n          promises.push(\n            (async () => {\n              await sema.acquire()\n              try {\n                await fn()\n              } finally {\n                sema.release()\n                progress()\n              }\n            })()\n          )\n        }\n\n        for (const [page, route] of currentEntrypoints.page) {\n          enqueue(() =>\n            handleRouteType({\n              dev,\n              page,\n              pathname: page,\n              route,\n\n              currentEntryIssues,\n              entrypoints: currentEntrypoints,\n              manifestLoader,\n              devRewrites: undefined,\n              productionRewrites: customRoutes.rewrites,\n              logErrors: false,\n            })\n          )\n        }\n\n        for (const [page, route] of currentEntrypoints.app) {\n          enqueue(() =>\n            handleRouteType({\n              page,\n              dev: false,\n              pathname: normalizeAppPath(page),\n              route,\n              currentEntryIssues,\n              entrypoints: currentEntrypoints,\n              manifestLoader,\n              devRewrites: undefined,\n              productionRewrites: customRoutes.rewrites,\n              logErrors: false,\n            })\n          )\n        }\n\n        enqueue(() =>\n          handlePagesErrorRoute({\n            currentEntryIssues,\n            entrypoints: currentEntrypoints,\n            manifestLoader,\n            devRewrites: undefined,\n            productionRewrites: customRoutes.rewrites,\n            logErrors: false,\n          })\n        )\n        await Promise.all(promises)\n\n        await manifestLoader.writeManifests({\n          devRewrites: undefined,\n          productionRewrites: customRoutes.rewrites,\n          entrypoints: currentEntrypoints,\n        })\n\n        const errors: {\n          page: string\n          message: string\n        }[] = []\n        const warnings: {\n          page: string\n          message: string\n        }[] = []\n        for (const [page, entryIssues] of currentEntryIssues) {\n          for (const issue of entryIssues.values()) {\n            if (issue.severity !== 'warning') {\n              errors.push({\n                page,\n                message: formatIssue(issue),\n              })\n            } else {\n              if (isRelevantWarning(issue)) {\n                warnings.push({\n                  page,\n                  message: formatIssue(issue),\n                })\n              }\n            }\n          }\n        }\n\n        if (warnings.length > 0) {\n          Log.warn(\n            `Turbopack build collected ${warnings.length} warnings:\\n${warnings\n              .map((e) => {\n                return 'Page: ' + e.page + '\\n' + e.message\n              })\n              .join('\\n')}`\n          )\n        }\n\n        if (errors.length > 0) {\n          throw new Error(\n            `Turbopack build failed with ${errors.length} errors:\\n${errors\n              .map((e) => {\n                return 'Page: ' + e.page + '\\n' + e.message\n              })\n              .join('\\n')}`\n          )\n        }\n\n        return {\n          duration: process.hrtime(startTime)[0],\n          buildTraceContext: undefined,\n        }\n      }\n\n      let buildTraceContext: undefined | BuildTraceContext\n      let buildTracesPromise: Promise<any> | undefined = undefined\n\n      // If there's has a custom webpack config and disable the build worker.\n      // Otherwise respect the option if it's set.\n      const useBuildWorker =\n        config.experimental.webpackBuildWorker ||\n        (config.experimental.webpackBuildWorker === undefined &&\n          !config.webpack)\n      const runServerAndEdgeInParallel =\n        config.experimental.parallelServerCompiles\n      const collectServerBuildTracesInParallel =\n        config.experimental.parallelServerBuildTraces ||\n        (config.experimental.parallelServerBuildTraces === undefined &&\n          isCompileMode)\n\n      nextBuildSpan.setAttribute(\n        'has-custom-webpack-config',\n        String(!!config.webpack)\n      )\n      nextBuildSpan.setAttribute('use-build-worker', String(useBuildWorker))\n\n      if (\n        !useBuildWorker &&\n        (runServerAndEdgeInParallel || collectServerBuildTracesInParallel)\n      ) {\n        throw new Error(\n          'The \"parallelServerBuildTraces\" and \"parallelServerCompiles\" options may only be used when build workers can be used. Read more: https://nextjs.org/docs/messages/parallel-build-without-worker'\n        )\n      }\n\n      Log.info('Creating an optimized production build ...')\n      traceMemoryUsage('Starting build', nextBuildSpan)\n\n      await updateBuildDiagnostics({\n        buildStage: 'compile',\n        buildOptions: {\n          useBuildWorker: String(useBuildWorker),\n        },\n      })\n\n      if (!isGenerateMode) {\n        if (turboNextBuild) {\n          const { duration: compilerDuration, ...rest } = await turbopackBuild()\n          traceMemoryUsage('Finished build', nextBuildSpan)\n\n          buildTraceContext = rest.buildTraceContext\n\n          Log.event('Compiled successfully')\n\n          telemetry.record(\n            eventBuildCompleted(pagesPaths, {\n              durationInSeconds: compilerDuration,\n              totalAppPagesCount,\n            })\n          )\n        } else {\n          if (\n            runServerAndEdgeInParallel ||\n            collectServerBuildTracesInParallel\n          ) {\n            let durationInSeconds = 0\n\n            await updateBuildDiagnostics({\n              buildStage: 'compile-server',\n            })\n\n            const serverBuildPromise = webpackBuild(useBuildWorker, [\n              'server',\n            ]).then((res) => {\n              traceMemoryUsage('Finished server compilation', nextBuildSpan)\n              buildTraceContext = res.buildTraceContext\n              durationInSeconds += res.duration\n\n              if (collectServerBuildTracesInParallel) {\n                const buildTraceWorker = new Worker(\n                  require.resolve('./collect-build-traces'),\n                  {\n                    numWorkers: 1,\n                    exposedMethods: ['collectBuildTraces'],\n                  }\n                ) as Worker & typeof import('./collect-build-traces')\n\n                buildTracesPromise = buildTraceWorker\n                  .collectBuildTraces({\n                    dir,\n                    config,\n                    distDir,\n                    // Serialize Map as this is sent to the worker.\n                    edgeRuntimeRoutes: collectRoutesUsingEdgeRuntime(new Map()),\n                    staticPages: [],\n                    hasSsrAmpPages: false,\n                    buildTraceContext,\n                    outputFileTracingRoot,\n                    isFlyingShuttle: !!config.experimental.flyingShuttle,\n                  })\n                  .catch((err) => {\n                    console.error(err)\n                    process.exit(1)\n                  })\n              }\n            })\n            if (!runServerAndEdgeInParallel) {\n              await serverBuildPromise\n              await updateBuildDiagnostics({\n                buildStage: 'webpack-compile-edge-server',\n              })\n            }\n\n            const edgeBuildPromise = webpackBuild(useBuildWorker, [\n              'edge-server',\n            ]).then((res) => {\n              durationInSeconds += res.duration\n              traceMemoryUsage(\n                'Finished edge-server compilation',\n                nextBuildSpan\n              )\n            })\n            if (runServerAndEdgeInParallel) {\n              await serverBuildPromise\n              await updateBuildDiagnostics({\n                buildStage: 'webpack-compile-edge-server',\n              })\n            }\n            await edgeBuildPromise\n\n            await updateBuildDiagnostics({\n              buildStage: 'webpack-compile-client',\n            })\n\n            await webpackBuild(useBuildWorker, ['client']).then((res) => {\n              durationInSeconds += res.duration\n              traceMemoryUsage('Finished client compilation', nextBuildSpan)\n            })\n\n            Log.event('Compiled successfully')\n\n            telemetry.record(\n              eventBuildCompleted(pagesPaths, {\n                durationInSeconds,\n                totalAppPagesCount,\n              })\n            )\n          } else {\n            const { duration: compilerDuration, ...rest } = await webpackBuild(\n              useBuildWorker,\n              null\n            )\n            traceMemoryUsage('Finished build', nextBuildSpan)\n\n            buildTraceContext = rest.buildTraceContext\n\n            telemetry.record(\n              eventBuildCompleted(pagesPaths, {\n                durationInSeconds: compilerDuration,\n                totalAppPagesCount,\n              })\n            )\n          }\n        }\n      }\n\n      // For app directory, we run type checking after build.\n      if (appDir && !isCompileMode && !isGenerateMode) {\n        await updateBuildDiagnostics({\n          buildStage: 'type-checking',\n        })\n        await startTypeChecking(typeCheckingOptions)\n        traceMemoryUsage('Finished type checking', nextBuildSpan)\n      }\n\n      const postCompileSpinner = createSpinner('Collecting page data')\n\n      const buildManifestPath = path.join(distDir, BUILD_MANIFEST)\n      const appBuildManifestPath = path.join(distDir, APP_BUILD_MANIFEST)\n\n      let staticAppPagesCount = 0\n      let serverAppPagesCount = 0\n      let edgeRuntimeAppCount = 0\n      let edgeRuntimePagesCount = 0\n      const ssgPages = new Set<string>()\n      const ssgStaticFallbackPages = new Set<string>()\n      const ssgBlockingFallbackPages = new Set<string>()\n      const staticPages = new Set<string>()\n      const invalidPages = new Set<string>()\n      const hybridAmpPages = new Set<string>()\n      const serverPropsPages = new Set<string>()\n      const additionalSsgPaths = new Map<string, Array<string>>()\n      const additionalSsgPathsEncoded = new Map<string, Array<string>>()\n      const appStaticPaths = new Map<string, Array<string>>()\n      const appStaticPathsEncoded = new Map<string, Array<string>>()\n      const appNormalizedPaths = new Map<string, string>()\n      const appDynamicParamPaths = new Set<string>()\n      const appDefaultConfigs = new Map<string, AppConfig>()\n      const pageInfos: PageInfos = new Map<string, PageInfo>()\n      let pagesManifest = await readManifest<PagesManifest>(pagesManifestPath)\n      const buildManifest = await readManifest<BuildManifest>(buildManifestPath)\n      const appBuildManifest = appDir\n        ? await readManifest<AppBuildManifest>(appBuildManifestPath)\n        : undefined\n\n      const isAppPPREnabled = checkIsAppPPREnabled(config.experimental.ppr)\n\n      const appPathRoutes: Record<string, string> = {}\n\n      if (appDir) {\n        const appPathsManifest = await readManifest<Record<string, string>>(\n          path.join(distDir, SERVER_DIRECTORY, APP_PATHS_MANIFEST)\n        )\n\n        for (const key in appPathsManifest) {\n          appPathRoutes[key] = normalizeAppPath(key)\n        }\n\n        await writeManifest(\n          path.join(distDir, APP_PATH_ROUTES_MANIFEST),\n          appPathRoutes\n        )\n      }\n\n      process.env.NEXT_PHASE = PHASE_PRODUCTION_BUILD\n\n      const pagesStaticWorkers = createStaticWorker(config)\n      const appStaticWorkers = appDir ? createStaticWorker(config) : undefined\n\n      const analysisBegin = process.hrtime()\n      const staticCheckSpan = nextBuildSpan.traceChild('static-check')\n\n      const functionsConfigManifest: FunctionsConfigManifest = {\n        version: 1,\n        functions: {},\n      }\n\n      const {\n        customAppGetInitialProps,\n        namedExports,\n        isNextImageImported,\n        hasSsrAmpPages,\n        hasNonStaticErrorPage,\n      } = await staticCheckSpan.traceAsyncFn(async () => {\n        if (isCompileMode) {\n          return {\n            customAppGetInitialProps: false,\n            namedExports: [],\n            isNextImageImported: true,\n            hasSsrAmpPages: !!pagesDir,\n            hasNonStaticErrorPage: true,\n          }\n        }\n\n        const { configFileName, publicRuntimeConfig, serverRuntimeConfig } =\n          config\n        const runtimeEnvConfig = { publicRuntimeConfig, serverRuntimeConfig }\n\n        const nonStaticErrorPageSpan = staticCheckSpan.traceChild(\n          'check-static-error-page'\n        )\n        const errorPageHasCustomGetInitialProps =\n          nonStaticErrorPageSpan.traceAsyncFn(\n            async () =>\n              hasCustomErrorPage &&\n              (await pagesStaticWorkers.hasCustomGetInitialProps({\n                page: '/_error',\n                distDir,\n                runtimeEnvConfig,\n                checkingApp: false,\n              }))\n          )\n\n        const errorPageStaticResult = nonStaticErrorPageSpan.traceAsyncFn(\n          async () =>\n            hasCustomErrorPage &&\n            pagesStaticWorkers.isPageStatic({\n              dir,\n              page: '/_error',\n              distDir,\n              configFileName,\n              runtimeEnvConfig,\n              httpAgentOptions: config.httpAgentOptions,\n              locales: config.i18n?.locales,\n              defaultLocale: config.i18n?.defaultLocale,\n              nextConfigOutput: config.output,\n              pprConfig: config.experimental.ppr,\n            })\n        )\n\n        const appPageToCheck = '/_app'\n\n        const customAppGetInitialPropsPromise =\n          pagesStaticWorkers.hasCustomGetInitialProps({\n            page: appPageToCheck,\n            distDir,\n            runtimeEnvConfig,\n            checkingApp: true,\n          })\n\n        const namedExportsPromise = pagesStaticWorkers.getDefinedNamedExports({\n          page: appPageToCheck,\n          distDir,\n          runtimeEnvConfig,\n        })\n\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        let isNextImageImported: boolean | undefined\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        let hasSsrAmpPages = false\n\n        const computedManifestData = await computeFromManifest(\n          { build: buildManifest, app: appBuildManifest },\n          distDir,\n          config.experimental.gzipSize\n        )\n\n        const middlewareManifest: MiddlewareManifest = require(\n          path.join(distDir, SERVER_DIRECTORY, MIDDLEWARE_MANIFEST)\n        )\n\n        const actionManifest = appDir\n          ? (require(\n              path.join(\n                distDir,\n                SERVER_DIRECTORY,\n                SERVER_REFERENCE_MANIFEST + '.json'\n              )\n            ) as ActionManifest)\n          : null\n        const entriesWithAction = actionManifest ? new Set() : null\n        if (actionManifest && entriesWithAction) {\n          for (const id in actionManifest.node) {\n            for (const entry in actionManifest.node[id].workers) {\n              entriesWithAction.add(entry)\n            }\n          }\n          for (const id in actionManifest.edge) {\n            for (const entry in actionManifest.edge[id].workers) {\n              entriesWithAction.add(entry)\n            }\n          }\n        }\n\n        for (const key of Object.keys(middlewareManifest?.functions)) {\n          if (key.startsWith('/api')) {\n            edgeRuntimePagesCount++\n          }\n        }\n\n        await Promise.all(\n          Object.entries(pageKeys)\n            .reduce<Array<{ pageType: keyof typeof pageKeys; page: string }>>(\n              (acc, [key, files]) => {\n                if (!files) {\n                  return acc\n                }\n\n                const pageType = key as keyof typeof pageKeys\n\n                for (const page of files) {\n                  acc.push({ pageType, page })\n                }\n\n                return acc\n              },\n              []\n            )\n            .map(({ pageType, page }) => {\n              const checkPageSpan = staticCheckSpan.traceChild('check-page', {\n                page,\n              })\n              return checkPageSpan.traceAsyncFn(async () => {\n                const actualPage = normalizePagePath(page)\n                const [size, totalSize] = await getJsPageSizeInKb(\n                  pageType,\n                  actualPage,\n                  distDir,\n                  buildManifest,\n                  appBuildManifest,\n                  config.experimental.gzipSize,\n                  computedManifestData\n                )\n\n                let isRoutePPREnabled = false\n                let isSSG = false\n                let isStatic = false\n                let isServerComponent = false\n                let isHybridAmp = false\n                let ssgPageRoutes: string[] | null = null\n                let pagePath = ''\n\n                if (pageType === 'pages') {\n                  pagePath =\n                    pagesPaths.find((p) => {\n                      p = normalizePathSep(p)\n                      return (\n                        p.startsWith(actualPage + '.') ||\n                        p.startsWith(actualPage + '/index.')\n                      )\n                    }) || ''\n                }\n                let originalAppPath: string | undefined\n\n                if (pageType === 'app' && mappedAppPages) {\n                  for (const [originalPath, normalizedPath] of Object.entries(\n                    appPathRoutes\n                  )) {\n                    if (normalizedPath === page) {\n                      pagePath = mappedAppPages[originalPath].replace(\n                        /^private-next-app-dir/,\n                        ''\n                      )\n                      originalAppPath = originalPath\n                      break\n                    }\n                  }\n                }\n\n                const pageFilePath = isAppBuiltinNotFoundPage(pagePath)\n                  ? require.resolve(\n                      'next/dist/client/components/not-found-error'\n                    )\n                  : path.join(\n                      (pageType === 'pages' ? pagesDir : appDir) || '',\n                      pagePath\n                    )\n\n                const staticInfo = pagePath\n                  ? await getPageStaticInfo({\n                      pageFilePath,\n                      nextConfig: config,\n                      // TODO: fix type mismatch\n                      pageType:\n                        pageType === 'app' ? PAGE_TYPES.APP : PAGE_TYPES.PAGES,\n                    })\n                  : undefined\n\n                if (staticInfo?.extraConfig) {\n                  functionsConfigManifest.functions[page] =\n                    staticInfo.extraConfig\n                }\n\n                const pageRuntime = middlewareManifest.functions[\n                  originalAppPath || page\n                ]\n                  ? 'edge'\n                  : staticInfo?.runtime\n\n                if (!isCompileMode) {\n                  isServerComponent =\n                    pageType === 'app' &&\n                    staticInfo?.rsc !== RSC_MODULE_TYPES.client\n\n                  if (pageType === 'app' || !isReservedPage(page)) {\n                    try {\n                      let edgeInfo: any\n\n                      if (isEdgeRuntime(pageRuntime)) {\n                        if (pageType === 'app') {\n                          edgeRuntimeAppCount++\n                        } else {\n                          edgeRuntimePagesCount++\n                        }\n\n                        const manifestKey =\n                          pageType === 'pages' ? page : originalAppPath || ''\n\n                        edgeInfo = middlewareManifest.functions[manifestKey]\n                      }\n\n                      let isPageStaticSpan =\n                        checkPageSpan.traceChild('is-page-static')\n                      let workerResult = await isPageStaticSpan.traceAsyncFn(\n                        () => {\n                          return (\n                            pageType === 'app'\n                              ? appStaticWorkers\n                              : pagesStaticWorkers\n                          )!.isPageStatic({\n                            dir,\n                            page,\n                            originalAppPath,\n                            distDir,\n                            configFileName,\n                            runtimeEnvConfig,\n                            httpAgentOptions: config.httpAgentOptions,\n                            locales: config.i18n?.locales,\n                            defaultLocale: config.i18n?.defaultLocale,\n                            parentId: isPageStaticSpan.getId(),\n                            pageRuntime,\n                            edgeInfo,\n                            pageType,\n                            cacheHandler: config.cacheHandler,\n                            isrFlushToDisk: ciEnvironment.hasNextSupport\n                              ? false\n                              : config.experimental.isrFlushToDisk,\n                            maxMemoryCacheSize: config.cacheMaxMemorySize,\n                            nextConfigOutput: config.output,\n                            pprConfig: config.experimental.ppr,\n                          })\n                        }\n                      )\n\n                      if (pageType === 'app' && originalAppPath) {\n                        appNormalizedPaths.set(originalAppPath, page)\n                        // TODO-APP: handle prerendering with edge\n                        if (isEdgeRuntime(pageRuntime)) {\n                          isStatic = false\n                          isSSG = false\n\n                          Log.warnOnce(\n                            `Using edge runtime on a page currently disables static generation for that page`\n                          )\n                        } else {\n                          // If this route can be partially pre-rendered, then\n                          // mark it as such and mark that it can be\n                          // generated server-side.\n                          if (workerResult.isRoutePPREnabled) {\n                            isRoutePPREnabled = workerResult.isRoutePPREnabled\n                            isSSG = true\n                            isStatic = true\n\n                            appStaticPaths.set(originalAppPath, [])\n                            appStaticPathsEncoded.set(originalAppPath, [])\n                          }\n\n                          if (\n                            workerResult.encodedPrerenderRoutes &&\n                            workerResult.prerenderRoutes\n                          ) {\n                            appStaticPaths.set(\n                              originalAppPath,\n                              workerResult.prerenderRoutes\n                            )\n                            appStaticPathsEncoded.set(\n                              originalAppPath,\n                              workerResult.encodedPrerenderRoutes\n                            )\n                            ssgPageRoutes = workerResult.prerenderRoutes\n                            isSSG = true\n                          }\n\n                          const appConfig = workerResult.appConfig || {}\n                          if (appConfig.revalidate !== 0) {\n                            const isDynamic = isDynamicRoute(page)\n                            const hasGenerateStaticParams =\n                              !!workerResult.prerenderRoutes?.length\n\n                            if (\n                              config.output === 'export' &&\n                              isDynamic &&\n                              !hasGenerateStaticParams\n                            ) {\n                              throw new Error(\n                                `Page \"${page}\" is missing \"generateStaticParams()\" so it cannot be used with \"output: export\" config.`\n                              )\n                            }\n\n                            // Mark the app as static if:\n                            // - It has no dynamic param\n                            // - It doesn't have generateStaticParams but `dynamic` is set to\n                            //   `error` or `force-static`\n                            if (!isDynamic) {\n                              appStaticPaths.set(originalAppPath, [page])\n                              appStaticPathsEncoded.set(originalAppPath, [page])\n                              isStatic = true\n                            } else if (\n                              !hasGenerateStaticParams &&\n                              (appConfig.dynamic === 'error' ||\n                                appConfig.dynamic === 'force-static')\n                            ) {\n                              appStaticPaths.set(originalAppPath, [])\n                              appStaticPathsEncoded.set(originalAppPath, [])\n                              isStatic = true\n                              isRoutePPREnabled = false\n                            }\n                          }\n\n                          if (workerResult.prerenderFallback) {\n                            // whether or not to allow requests for paths not\n                            // returned from generateStaticParams\n                            appDynamicParamPaths.add(originalAppPath)\n                          }\n                          appDefaultConfigs.set(originalAppPath, appConfig)\n                        }\n                      } else {\n                        if (isEdgeRuntime(pageRuntime)) {\n                          if (workerResult.hasStaticProps) {\n                            console.warn(\n                              `\"getStaticProps\" is not yet supported fully with \"experimental-edge\", detected on ${page}`\n                            )\n                          }\n                          // TODO: add handling for statically rendering edge\n                          // pages and allow edge with Prerender outputs\n                          workerResult.isStatic = false\n                          workerResult.hasStaticProps = false\n                        }\n\n                        if (\n                          workerResult.isStatic === false &&\n                          (workerResult.isHybridAmp || workerResult.isAmpOnly)\n                        ) {\n                          hasSsrAmpPages = true\n                        }\n\n                        if (workerResult.isHybridAmp) {\n                          isHybridAmp = true\n                          hybridAmpPages.add(page)\n                        }\n\n                        if (workerResult.isNextImageImported) {\n                          isNextImageImported = true\n                        }\n\n                        if (workerResult.hasStaticProps) {\n                          ssgPages.add(page)\n                          isSSG = true\n\n                          if (\n                            workerResult.prerenderRoutes &&\n                            workerResult.encodedPrerenderRoutes\n                          ) {\n                            additionalSsgPaths.set(\n                              page,\n                              workerResult.prerenderRoutes\n                            )\n                            additionalSsgPathsEncoded.set(\n                              page,\n                              workerResult.encodedPrerenderRoutes\n                            )\n                            ssgPageRoutes = workerResult.prerenderRoutes\n                          }\n\n                          if (workerResult.prerenderFallback === 'blocking') {\n                            ssgBlockingFallbackPages.add(page)\n                          } else if (workerResult.prerenderFallback === true) {\n                            ssgStaticFallbackPages.add(page)\n                          }\n                        } else if (workerResult.hasServerProps) {\n                          serverPropsPages.add(page)\n                        } else if (\n                          workerResult.isStatic &&\n                          !isServerComponent &&\n                          (await customAppGetInitialPropsPromise) === false\n                        ) {\n                          staticPages.add(page)\n                          isStatic = true\n                        } else if (isServerComponent) {\n                          // This is a static server component page that doesn't have\n                          // gSP or gSSP. We still treat it as a SSG page.\n                          ssgPages.add(page)\n                          isSSG = true\n                        }\n\n                        if (hasPages404 && page === '/404') {\n                          if (\n                            !workerResult.isStatic &&\n                            !workerResult.hasStaticProps\n                          ) {\n                            throw new Error(\n                              `\\`pages/404\\` ${STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`\n                            )\n                          }\n                          // we need to ensure the 404 lambda is present since we use\n                          // it when _app has getInitialProps\n                          if (\n                            (await customAppGetInitialPropsPromise) &&\n                            !workerResult.hasStaticProps\n                          ) {\n                            staticPages.delete(page)\n                          }\n                        }\n\n                        if (\n                          STATIC_STATUS_PAGES.includes(page) &&\n                          !workerResult.isStatic &&\n                          !workerResult.hasStaticProps\n                        ) {\n                          throw new Error(\n                            `\\`pages${page}\\` ${STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`\n                          )\n                        }\n                      }\n                    } catch (err) {\n                      if (\n                        !isError(err) ||\n                        err.message !== 'INVALID_DEFAULT_EXPORT'\n                      )\n                        throw err\n                      invalidPages.add(page)\n                    }\n                  }\n\n                  if (pageType === 'app') {\n                    if (isSSG || isStatic) {\n                      staticAppPagesCount++\n                    } else {\n                      serverAppPagesCount++\n                    }\n                  }\n                }\n\n                pageInfos.set(page, {\n                  size,\n                  totalSize,\n                  isStatic,\n                  isSSG,\n                  isRoutePPREnabled,\n                  isHybridAmp,\n                  ssgPageRoutes,\n                  initialRevalidateSeconds: false,\n                  runtime: pageRuntime,\n                  pageDuration: undefined,\n                  ssgPageDurations: undefined,\n                  hasEmptyPrelude: undefined,\n                })\n              })\n            })\n        )\n\n        const errorPageResult = await errorPageStaticResult\n        const nonStaticErrorPage =\n          (await errorPageHasCustomGetInitialProps) ||\n          (errorPageResult && errorPageResult.hasServerProps)\n\n        const returnValue = {\n          customAppGetInitialProps: await customAppGetInitialPropsPromise,\n          namedExports: await namedExportsPromise,\n          isNextImageImported,\n          hasSsrAmpPages,\n          hasNonStaticErrorPage: nonStaticErrorPage,\n        }\n\n        return returnValue\n      })\n\n      if (postCompileSpinner) postCompileSpinner.stopAndPersist()\n      traceMemoryUsage('Finished collecting page data', nextBuildSpan)\n\n      if (customAppGetInitialProps) {\n        console.warn(\n          bold(yellow(`Warning: `)) +\n            yellow(\n              `You have opted-out of Automatic Static Optimization due to \\`getInitialProps\\` in \\`pages/_app\\`. This does not opt-out pages with \\`getStaticProps\\``\n            )\n        )\n        console.warn(\n          'Read more: https://nextjs.org/docs/messages/opt-out-auto-static-optimization\\n'\n        )\n      }\n\n      if (!hasSsrAmpPages) {\n        requiredServerFilesManifest.ignore.push(\n          path.relative(\n            dir,\n            path.join(\n              path.dirname(\n                require.resolve(\n                  'next/dist/compiled/@ampproject/toolbox-optimizer'\n                )\n              ),\n              '**/*'\n            )\n          )\n        )\n      }\n\n      await writeFunctionsConfigManifest(distDir, functionsConfigManifest)\n\n      if (!isGenerateMode && !buildTracesPromise) {\n        buildTracesPromise = collectBuildTraces({\n          dir,\n          config,\n          distDir,\n          edgeRuntimeRoutes: collectRoutesUsingEdgeRuntime(pageInfos),\n          staticPages: [...staticPages],\n          nextBuildSpan,\n          hasSsrAmpPages,\n          buildTraceContext,\n          outputFileTracingRoot,\n          isFlyingShuttle: !!config.experimental.flyingShuttle,\n        }).catch((err) => {\n          console.error(err)\n          process.exit(1)\n        })\n      }\n\n      if (serverPropsPages.size > 0 || ssgPages.size > 0) {\n        // We update the routes manifest after the build with the\n        // data routes since we can't determine these until after build\n        routesManifest.dataRoutes = getSortedRoutes([\n          ...serverPropsPages,\n          ...ssgPages,\n        ]).map((page) => {\n          return buildDataRoute(page, buildId)\n        })\n\n        // await writeManifest(routesManifestPath, routesManifest)\n      }\n\n      // We need to write the manifest with rewrites before build\n      await nextBuildSpan\n        .traceChild('write-routes-manifest')\n        .traceAsyncFn(() => writeManifest(routesManifestPath, routesManifest))\n\n      // Since custom _app.js can wrap the 404 page we have to opt-out of static optimization if it has getInitialProps\n      // Only export the static 404 when there is no /_error present\n      const useStaticPages404 =\n        !customAppGetInitialProps && (!hasNonStaticErrorPage || hasPages404)\n\n      if (invalidPages.size > 0) {\n        const err = new Error(\n          `Build optimization failed: found page${\n            invalidPages.size === 1 ? '' : 's'\n          } without a React Component as default export in \\n${[...invalidPages]\n            .map((pg) => `pages${pg}`)\n            .join(\n              '\\n'\n            )}\\n\\nSee https://nextjs.org/docs/messages/page-without-valid-component for more info.\\n`\n        ) as NextError\n        err.code = 'BUILD_OPTIMIZATION_FAILED'\n        throw err\n      }\n\n      await writeBuildId(distDir, buildId)\n\n      if (config.experimental.optimizeCss) {\n        const globOrig =\n          require('next/dist/compiled/glob') as typeof import('next/dist/compiled/glob')\n\n        const cssFilePaths = await new Promise<string[]>((resolve, reject) => {\n          globOrig(\n            '**/*.css',\n            { cwd: path.join(distDir, 'static') },\n            (err, files) => {\n              if (err) {\n                return reject(err)\n              }\n              resolve(files)\n            }\n          )\n        })\n\n        requiredServerFilesManifest.files.push(\n          ...cssFilePaths.map((filePath) =>\n            path.join(config.distDir, 'static', filePath)\n          )\n        )\n      }\n\n      const features: EventBuildFeatureUsage[] = [\n        {\n          featureName: 'experimental/optimizeCss',\n          invocationCount: config.experimental.optimizeCss ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/nextScriptWorkers',\n          invocationCount: config.experimental.nextScriptWorkers ? 1 : 0,\n        },\n        {\n          featureName: 'optimizeFonts',\n          invocationCount: config.optimizeFonts ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/ppr',\n          invocationCount: config.experimental.ppr ? 1 : 0,\n        },\n      ]\n      telemetry.record(\n        features.map((feature) => {\n          return {\n            eventName: EVENT_BUILD_FEATURE_USAGE,\n            payload: feature,\n          }\n        })\n      )\n\n      await writeRequiredServerFilesManifest(\n        distDir,\n        requiredServerFilesManifest\n      )\n\n      const middlewareManifest: MiddlewareManifest = await readManifest(\n        path.join(distDir, SERVER_DIRECTORY, MIDDLEWARE_MANIFEST)\n      )\n\n      if (!isGenerateMode) {\n        if (config.experimental.flyingShuttle) {\n          console.log('stitching builds...')\n          const stitchResult = await stitchBuilds(\n            {\n              buildId,\n              distDir,\n              shuttleDir,\n              rewrites,\n              redirects,\n              edgePreviewProps: {\n                __NEXT_PREVIEW_MODE_ID:\n                  NextBuildContext.previewProps!.previewModeId,\n                __NEXT_PREVIEW_MODE_ENCRYPTION_KEY:\n                  NextBuildContext.previewProps!.previewModeEncryptionKey,\n                __NEXT_PREVIEW_MODE_SIGNING_KEY:\n                  NextBuildContext.previewProps!.previewModeSigningKey,\n              },\n              encryptionKey,\n              allowedErrorRate:\n                config.experimental.clientRouterFilterAllowedRate,\n            },\n            {\n              changed: {\n                pages: changedPagePathsResult?.changed.pages || [],\n                app: changedAppPathsResult?.changed.app || [],\n              },\n              unchanged: {\n                pages: changedPagePathsResult?.unchanged.pages || [],\n                app: changedAppPathsResult?.unchanged.app || [],\n              },\n              pageExtensions: config.pageExtensions,\n            }\n          )\n          // reload pagesManifest since it's been updated on disk\n          if (stitchResult.pagesManifest) {\n            pagesManifest = stitchResult.pagesManifest\n          }\n\n          console.log('storing shuttle')\n          await storeShuttle({\n            distDir,\n            shuttleDir,\n          })\n        }\n      }\n\n      const finalPrerenderRoutes: { [route: string]: SsgRoute } = {}\n      const finalDynamicRoutes: PrerenderManifest['dynamicRoutes'] = {}\n      const tbdPrerenderRoutes: string[] = []\n      let ssgNotFoundPaths: string[] = []\n\n      const { i18n } = config\n\n      const usedStaticStatusPages = STATIC_STATUS_PAGES.filter(\n        (page) =>\n          mappedPages[page] &&\n          mappedPages[page].startsWith('private-next-pages')\n      )\n      usedStaticStatusPages.forEach((page) => {\n        if (!ssgPages.has(page) && !customAppGetInitialProps) {\n          staticPages.add(page)\n        }\n      })\n\n      const hasPages500 = usedStaticStatusPages.includes('/500')\n      const useDefaultStatic500 =\n        !hasPages500 && !hasNonStaticErrorPage && !customAppGetInitialProps\n\n      const combinedPages = [...staticPages, ...ssgPages]\n      const isApp404Static = appStaticPaths.has(\n        UNDERSCORE_NOT_FOUND_ROUTE_ENTRY\n      )\n      const hasStaticApp404 = hasApp404 && isApp404Static\n\n      await updateBuildDiagnostics({\n        buildStage: 'static-generation',\n      })\n\n      // we need to trigger automatic exporting when we have\n      // - static 404/500\n      // - getStaticProps paths\n      // - experimental app is enabled\n      if (\n        !isCompileMode &&\n        (combinedPages.length > 0 ||\n          useStaticPages404 ||\n          useDefaultStatic500 ||\n          appDir)\n      ) {\n        const staticGenerationSpan =\n          nextBuildSpan.traceChild('static-generation')\n        await staticGenerationSpan.traceAsyncFn(async () => {\n          detectConflictingPaths(\n            [\n              ...combinedPages,\n              ...pageKeys.pages.filter((page) => !combinedPages.includes(page)),\n            ],\n            ssgPages,\n            additionalSsgPaths\n          )\n          const exportApp = require('../export')\n            .default as typeof import('../export').default\n\n          const exportConfig: NextConfigComplete = {\n            ...config,\n            // Default map will be the collection of automatic statically exported\n            // pages and incremental pages.\n            // n.b. we cannot handle this above in combinedPages because the dynamic\n            // page must be in the `pages` array, but not in the mapping.\n            exportPathMap: (defaultMap: ExportPathMap) => {\n              // Dynamically routed pages should be prerendered to be used as\n              // a client-side skeleton (fallback) while data is being fetched.\n              // This ensures the end-user never sees a 500 or slow response from the\n              // server.\n              //\n              // Note: prerendering disables automatic static optimization.\n              ssgPages.forEach((page) => {\n                if (isDynamicRoute(page)) {\n                  tbdPrerenderRoutes.push(page)\n\n                  if (ssgStaticFallbackPages.has(page)) {\n                    // Override the rendering for the dynamic page to be treated as a\n                    // fallback render.\n                    if (i18n) {\n                      defaultMap[`/${i18n.defaultLocale}${page}`] = {\n                        page,\n                        query: { __nextFallback: 'true' },\n                      }\n                    } else {\n                      defaultMap[page] = {\n                        page,\n                        query: { __nextFallback: 'true' },\n                      }\n                    }\n                  } else {\n                    // Remove dynamically routed pages from the default path map when\n                    // fallback behavior is disabled.\n                    delete defaultMap[page]\n                  }\n                }\n              })\n\n              // Append the \"well-known\" routes we should prerender for, e.g. blog\n              // post slugs.\n              additionalSsgPaths.forEach((routes, page) => {\n                const encodedRoutes = additionalSsgPathsEncoded.get(page)\n\n                routes.forEach((route, routeIdx) => {\n                  defaultMap[route] = {\n                    page,\n                    query: { __nextSsgPath: encodedRoutes?.[routeIdx] },\n                  }\n                })\n              })\n\n              if (useStaticPages404) {\n                defaultMap['/404'] = {\n                  page: hasPages404 ? '/404' : '/_error',\n                }\n              }\n\n              if (useDefaultStatic500) {\n                defaultMap['/500'] = {\n                  page: '/_error',\n                }\n              }\n\n              // TODO: output manifest specific to app paths and their\n              // revalidate periods and dynamicParams settings\n              appStaticPaths.forEach((routes, originalAppPath) => {\n                const encodedRoutes = appStaticPathsEncoded.get(originalAppPath)\n                const appConfig = appDefaultConfigs.get(originalAppPath)\n\n                routes.forEach((route, routeIdx) => {\n                  defaultMap[route] = {\n                    page: originalAppPath,\n                    query: { __nextSsgPath: encodedRoutes?.[routeIdx] },\n                    _isDynamicError: appConfig?.dynamic === 'error',\n                    _isAppDir: true,\n                    _isRoutePPREnabled: appConfig\n                      ? checkIsRoutePPREnabled(\n                          config.experimental.ppr,\n                          appConfig\n                        )\n                      : undefined,\n                  }\n                })\n              })\n\n              if (i18n) {\n                for (const page of [\n                  ...staticPages,\n                  ...ssgPages,\n                  ...(useStaticPages404 ? ['/404'] : []),\n                  ...(useDefaultStatic500 ? ['/500'] : []),\n                ]) {\n                  const isSsg = ssgPages.has(page)\n                  const isDynamic = isDynamicRoute(page)\n                  const isFallback = isSsg && ssgStaticFallbackPages.has(page)\n\n                  for (const locale of i18n.locales) {\n                    // skip fallback generation for SSG pages without fallback mode\n                    if (isSsg && isDynamic && !isFallback) continue\n                    const outputPath = `/${locale}${page === '/' ? '' : page}`\n\n                    defaultMap[outputPath] = {\n                      page: defaultMap[page]?.page || page,\n                      query: {\n                        __nextLocale: locale,\n                        __nextFallback: isFallback ? 'true' : undefined,\n                      },\n                    }\n                  }\n\n                  if (isSsg) {\n                    // remove non-locale prefixed variant from defaultMap\n                    delete defaultMap[page]\n                  }\n                }\n              }\n\n              return defaultMap\n            },\n          }\n\n          const exportOptions: ExportAppOptions = {\n            nextConfig: exportConfig,\n            enabledDirectories,\n            silent: false,\n            buildExport: true,\n            debugOutput,\n            pages: combinedPages,\n            outdir: path.join(distDir, 'export'),\n            statusMessage: 'Generating static pages',\n            // The worker already explicitly binds `this` to each of the\n            // exposed methods.\n            exportAppPageWorker: appStaticWorkers?.exportPage,\n            exportPageWorker: pagesStaticWorkers?.exportPage,\n            endWorker: async () => {\n              await pagesStaticWorkers.end()\n              await appStaticWorkers?.end()\n            },\n          }\n\n          const exportResult = await exportApp(\n            dir,\n            exportOptions,\n            nextBuildSpan\n          )\n\n          // If there was no result, there's nothing more to do.\n          if (!exportResult) return\n\n          writeTurborepoAccessTraceResult({\n            distDir: config.distDir,\n            traces: [\n              turborepoAccessTraceResult,\n              ...exportResult.turborepoAccessTraceResults.values(),\n            ],\n          })\n\n          ssgNotFoundPaths = Array.from(exportResult.ssgNotFoundPaths)\n\n          // remove server bundles that were exported\n          for (const page of staticPages) {\n            const serverBundle = getPagePath(page, distDir, undefined, false)\n            await fs.unlink(serverBundle)\n          }\n\n          for (const [originalAppPath, routes] of appStaticPaths) {\n            const page = appNormalizedPaths.get(originalAppPath) || ''\n            const appConfig = appDefaultConfigs.get(originalAppPath) || {}\n            let hasDynamicData =\n              appConfig.revalidate === 0 ||\n              exportResult.byPath.get(page)?.revalidate === 0\n\n            if (hasDynamicData && pageInfos.get(page)?.isStatic) {\n              // if the page was marked as being static, but it contains dynamic data\n              // (ie, in the case of a static generation bailout), then it should be marked dynamic\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                isStatic: false,\n                isSSG: false,\n              })\n            }\n\n            const isRouteHandler = isAppRouteRoute(originalAppPath)\n\n            // When this is an app page and PPR is enabled, the route supports\n            // partial pre-rendering.\n            const experimentalPPR: true | undefined =\n              !isRouteHandler &&\n              checkIsRoutePPREnabled(config.experimental.ppr, appConfig)\n                ? true\n                : undefined\n\n            // this flag is used to selectively bypass the static cache and invoke the lambda directly\n            // to enable server actions on static routes\n            const bypassFor: RouteHas[] = [\n              { type: 'header', key: ACTION_HEADER },\n              {\n                type: 'header',\n                key: 'content-type',\n                value: 'multipart/form-data;.*',\n              },\n            ]\n\n            // Always sort the routes to get consistent output in manifests\n            getSortedRoutes(routes).forEach((route) => {\n              if (isDynamicRoute(page) && route === page) return\n              if (route === UNDERSCORE_NOT_FOUND_ROUTE) return\n\n              const {\n                revalidate = appConfig.revalidate ?? false,\n                metadata = {},\n                hasEmptyPrelude,\n                hasPostponed,\n              } = exportResult.byPath.get(route) ?? {}\n\n              pageInfos.set(route, {\n                ...(pageInfos.get(route) as PageInfo),\n                hasPostponed,\n                hasEmptyPrelude,\n              })\n\n              // update the page (eg /blog/[slug]) to also have the postpone metadata\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                hasPostponed,\n                hasEmptyPrelude,\n              })\n\n              if (revalidate !== 0) {\n                const normalizedRoute = normalizePagePath(route)\n\n                let dataRoute: string | null\n                if (isRouteHandler) {\n                  dataRoute = null\n                } else {\n                  dataRoute = path.posix.join(`${normalizedRoute}${RSC_SUFFIX}`)\n                }\n\n                let prefetchDataRoute: string | null | undefined\n                // While we may only write the `.rsc` when the route does not\n                // have PPR enabled, we still want to generate the route when\n                // deployed so it doesn't 404. If the app has PPR enabled, we\n                // should add this key.\n                if (!isRouteHandler && isAppPPREnabled) {\n                  prefetchDataRoute = path.posix.join(\n                    `${normalizedRoute}${RSC_PREFETCH_SUFFIX}`\n                  )\n                }\n\n                const routeMeta: Partial<SsgRoute> = {}\n\n                if (metadata.status !== 200) {\n                  routeMeta.initialStatus = metadata.status\n                }\n\n                const exportHeaders = metadata.headers\n                const headerKeys = Object.keys(exportHeaders || {})\n\n                if (exportHeaders && headerKeys.length) {\n                  routeMeta.initialHeaders = {}\n\n                  // normalize header values as initialHeaders\n                  // must be Record<string, string>\n                  for (const key of headerKeys) {\n                    // set-cookie is already handled - the middleware cookie setting case\n                    // isn't needed for the prerender manifest since it can't read cookies\n                    if (key === 'x-middleware-set-cookie') continue\n\n                    let value = exportHeaders[key]\n\n                    if (Array.isArray(value)) {\n                      if (key === 'set-cookie') {\n                        value = value.join(',')\n                      } else {\n                        value = value[value.length - 1]\n                      }\n                    }\n\n                    if (typeof value === 'string') {\n                      routeMeta.initialHeaders[key] = value\n                    }\n                  }\n                }\n\n                finalPrerenderRoutes[route] = {\n                  ...routeMeta,\n                  experimentalPPR,\n                  experimentalBypassFor: bypassFor,\n                  initialRevalidateSeconds: revalidate,\n                  srcRoute: page,\n                  dataRoute,\n                  prefetchDataRoute,\n                }\n              } else {\n                hasDynamicData = true\n                // we might have determined during prerendering that this page\n                // used dynamic data\n                pageInfos.set(route, {\n                  ...(pageInfos.get(route) as PageInfo),\n                  isSSG: false,\n                  isStatic: false,\n                })\n              }\n            })\n\n            if (!hasDynamicData && isDynamicRoute(originalAppPath)) {\n              const normalizedRoute = normalizePagePath(page)\n\n              let dataRoute: string | null = null\n              if (!isRouteHandler) {\n                dataRoute = path.posix.join(`${normalizedRoute}${RSC_SUFFIX}`)\n              }\n\n              let prefetchDataRoute: string | undefined\n\n              // While we may only write the `.rsc` when the route does not\n              // have PPR enabled, we still want to generate the route when\n              // deployed so it doesn't 404. If the app has PPR enabled, we\n              // should add this key.\n              if (!isRouteHandler && isAppPPREnabled) {\n                prefetchDataRoute = path.posix.join(\n                  `${normalizedRoute}${RSC_PREFETCH_SUFFIX}`\n                )\n              }\n\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                isDynamicAppRoute: true,\n                // if PPR is turned on and the route contains a dynamic segment,\n                // we assume it'll be partially prerendered\n                hasPostponed: experimentalPPR,\n              })\n\n              // TODO: create a separate manifest to allow enforcing\n              // dynamicParams for non-static paths?\n              finalDynamicRoutes[page] = {\n                experimentalPPR,\n                experimentalBypassFor: bypassFor,\n                routeRegex: normalizeRouteRegex(\n                  getNamedRouteRegex(page, false).re.source\n                ),\n                dataRoute,\n                // if dynamicParams are enabled treat as fallback:\n                // 'blocking' if not it's fallback: false\n                fallback: appDynamicParamPaths.has(originalAppPath)\n                  ? null\n                  : false,\n                dataRouteRegex: !dataRoute\n                  ? null\n                  : normalizeRouteRegex(\n                      getNamedRouteRegex(\n                        dataRoute.replace(/\\.rsc$/, ''),\n                        false\n                      ).re.source.replace(/\\(\\?:\\\\\\/\\)\\?\\$$/, '\\\\.rsc$')\n                    ),\n                prefetchDataRoute,\n                prefetchDataRouteRegex: !prefetchDataRoute\n                  ? undefined\n                  : normalizeRouteRegex(\n                      getNamedRouteRegex(\n                        prefetchDataRoute.replace(/\\.prefetch\\.rsc$/, ''),\n                        false\n                      ).re.source.replace(\n                        /\\(\\?:\\\\\\/\\)\\?\\$$/,\n                        '\\\\.prefetch\\\\.rsc$'\n                      )\n                    ),\n              }\n            }\n          }\n\n          const moveExportedPage = async (\n            originPage: string,\n            page: string,\n            file: string,\n            isSsg: boolean,\n            ext: 'html' | 'json',\n            additionalSsgFile = false\n          ) => {\n            return staticGenerationSpan\n              .traceChild('move-exported-page')\n              .traceAsyncFn(async () => {\n                file = `${file}.${ext}`\n                const orig = path.join(exportOptions.outdir, file)\n                const pagePath = getPagePath(\n                  originPage,\n                  distDir,\n                  undefined,\n                  false\n                )\n\n                const relativeDest = path\n                  .relative(\n                    path.join(distDir, SERVER_DIRECTORY),\n                    path.join(\n                      path.join(\n                        pagePath,\n                        // strip leading / and then recurse number of nested dirs\n                        // to place from base folder\n                        originPage\n                          .slice(1)\n                          .split('/')\n                          .map(() => '..')\n                          .join('/')\n                      ),\n                      file\n                    )\n                  )\n                  .replace(/\\\\/g, '/')\n\n                if (\n                  !isSsg &&\n                  !(\n                    // don't add static status page to manifest if it's\n                    // the default generated version e.g. no pages/500\n                    (\n                      STATIC_STATUS_PAGES.includes(page) &&\n                      !usedStaticStatusPages.includes(page)\n                    )\n                  )\n                ) {\n                  pagesManifest[page] = relativeDest\n                }\n\n                const dest = path.join(distDir, SERVER_DIRECTORY, relativeDest)\n                const isNotFound = ssgNotFoundPaths.includes(page)\n\n                // for SSG files with i18n the non-prerendered variants are\n                // output with the locale prefixed so don't attempt moving\n                // without the prefix\n                if ((!i18n || additionalSsgFile) && !isNotFound) {\n                  await fs.mkdir(path.dirname(dest), { recursive: true })\n                  await fs.rename(orig, dest)\n                } else if (i18n && !isSsg) {\n                  // this will be updated with the locale prefixed variant\n                  // since all files are output with the locale prefix\n                  delete pagesManifest[page]\n                }\n\n                if (i18n) {\n                  if (additionalSsgFile) return\n\n                  const localeExt = page === '/' ? path.extname(file) : ''\n                  const relativeDestNoPages = relativeDest.slice(\n                    'pages/'.length\n                  )\n\n                  for (const locale of i18n.locales) {\n                    const curPath = `/${locale}${page === '/' ? '' : page}`\n\n                    if (isSsg && ssgNotFoundPaths.includes(curPath)) {\n                      continue\n                    }\n\n                    const updatedRelativeDest = path\n                      .join(\n                        'pages',\n                        locale + localeExt,\n                        // if it's the top-most index page we want it to be locale.EXT\n                        // instead of locale/index.html\n                        page === '/' ? '' : relativeDestNoPages\n                      )\n                      .replace(/\\\\/g, '/')\n\n                    const updatedOrig = path.join(\n                      exportOptions.outdir,\n                      locale + localeExt,\n                      page === '/' ? '' : file\n                    )\n                    const updatedDest = path.join(\n                      distDir,\n                      SERVER_DIRECTORY,\n                      updatedRelativeDest\n                    )\n\n                    if (!isSsg) {\n                      pagesManifest[curPath] = updatedRelativeDest\n                    }\n                    await fs.mkdir(path.dirname(updatedDest), {\n                      recursive: true,\n                    })\n                    await fs.rename(updatedOrig, updatedDest)\n                  }\n                }\n              })\n          }\n\n          async function moveExportedAppNotFoundTo404() {\n            return staticGenerationSpan\n              .traceChild('move-exported-app-not-found-')\n              .traceAsyncFn(async () => {\n                const orig = path.join(\n                  distDir,\n                  'server',\n                  'app',\n                  '_not-found.html'\n                )\n                const updatedRelativeDest = path\n                  .join('pages', '404.html')\n                  .replace(/\\\\/g, '/')\n\n                if (existsSync(orig)) {\n                  await fs.copyFile(\n                    orig,\n                    path.join(distDir, 'server', updatedRelativeDest)\n                  )\n                  pagesManifest['/404'] = updatedRelativeDest\n                }\n              })\n          }\n\n          // If there's /not-found inside app, we prefer it over the pages 404\n          if (hasStaticApp404) {\n            await moveExportedAppNotFoundTo404()\n          } else {\n            // Only move /404 to /404 when there is no custom 404 as in that case we don't know about the 404 page\n            if (!hasPages404 && !hasApp404 && useStaticPages404) {\n              await moveExportedPage('/_error', '/404', '/404', false, 'html')\n            }\n          }\n\n          if (useDefaultStatic500) {\n            await moveExportedPage('/_error', '/500', '/500', false, 'html')\n          }\n\n          for (const page of combinedPages) {\n            const isSsg = ssgPages.has(page)\n            const isStaticSsgFallback = ssgStaticFallbackPages.has(page)\n            const isDynamic = isDynamicRoute(page)\n            const hasAmp = hybridAmpPages.has(page)\n            const file = normalizePagePath(page)\n\n            const pageInfo = pageInfos.get(page)\n            const durationInfo = exportResult.byPage.get(page)\n            if (pageInfo && durationInfo) {\n              // Set Build Duration\n              if (pageInfo.ssgPageRoutes) {\n                pageInfo.ssgPageDurations = pageInfo.ssgPageRoutes.map(\n                  (pagePath) => {\n                    const duration = durationInfo.durationsByPath.get(pagePath)\n                    if (typeof duration === 'undefined') {\n                      throw new Error(\"Invariant: page wasn't built\")\n                    }\n\n                    return duration\n                  }\n                )\n              }\n              pageInfo.pageDuration = durationInfo.durationsByPath.get(page)\n            }\n\n            // The dynamic version of SSG pages are only prerendered if the\n            // fallback is enabled. Below, we handle the specific prerenders\n            // of these.\n            const hasHtmlOutput = !(isSsg && isDynamic && !isStaticSsgFallback)\n\n            if (hasHtmlOutput) {\n              await moveExportedPage(page, page, file, isSsg, 'html')\n            }\n\n            if (hasAmp && (!isSsg || (isSsg && !isDynamic))) {\n              const ampPage = `${file}.amp`\n              await moveExportedPage(page, ampPage, ampPage, isSsg, 'html')\n\n              if (isSsg) {\n                await moveExportedPage(page, ampPage, ampPage, isSsg, 'json')\n              }\n            }\n\n            if (isSsg) {\n              // For a non-dynamic SSG page, we must copy its data file\n              // from export, we already moved the HTML file above\n              if (!isDynamic) {\n                await moveExportedPage(page, page, file, isSsg, 'json')\n\n                if (i18n) {\n                  // TODO: do we want to show all locale variants in build output\n                  for (const locale of i18n.locales) {\n                    const localePage = `/${locale}${page === '/' ? '' : page}`\n\n                    finalPrerenderRoutes[localePage] = {\n                      initialRevalidateSeconds:\n                        exportResult.byPath.get(localePage)?.revalidate ??\n                        false,\n                      experimentalPPR: undefined,\n                      srcRoute: null,\n                      dataRoute: path.posix.join(\n                        '/_next/data',\n                        buildId,\n                        `${file}.json`\n                      ),\n                      prefetchDataRoute: undefined,\n                    }\n                  }\n                } else {\n                  finalPrerenderRoutes[page] = {\n                    initialRevalidateSeconds:\n                      exportResult.byPath.get(page)?.revalidate ?? false,\n                    experimentalPPR: undefined,\n                    srcRoute: null,\n                    dataRoute: path.posix.join(\n                      '/_next/data',\n                      buildId,\n                      `${file}.json`\n                    ),\n                    // Pages does not have a prefetch data route.\n                    prefetchDataRoute: undefined,\n                  }\n                }\n                // Set Page Revalidation Interval\n                if (pageInfo) {\n                  pageInfo.initialRevalidateSeconds =\n                    exportResult.byPath.get(page)?.revalidate ?? false\n                }\n              } else {\n                // For a dynamic SSG page, we did not copy its data exports and only\n                // copy the fallback HTML file (if present).\n                // We must also copy specific versions of this page as defined by\n                // `getStaticPaths` (additionalSsgPaths).\n                const extraRoutes = additionalSsgPaths.get(page) || []\n                for (const route of extraRoutes) {\n                  const pageFile = normalizePagePath(route)\n                  await moveExportedPage(\n                    page,\n                    route,\n                    pageFile,\n                    isSsg,\n                    'html',\n                    true\n                  )\n                  await moveExportedPage(\n                    page,\n                    route,\n                    pageFile,\n                    isSsg,\n                    'json',\n                    true\n                  )\n\n                  if (hasAmp) {\n                    const ampPage = `${pageFile}.amp`\n                    await moveExportedPage(\n                      page,\n                      ampPage,\n                      ampPage,\n                      isSsg,\n                      'html',\n                      true\n                    )\n                    await moveExportedPage(\n                      page,\n                      ampPage,\n                      ampPage,\n                      isSsg,\n                      'json',\n                      true\n                    )\n                  }\n\n                  const initialRevalidateSeconds =\n                    exportResult.byPath.get(route)?.revalidate ?? false\n\n                  if (typeof initialRevalidateSeconds === 'undefined') {\n                    throw new Error(\"Invariant: page wasn't built\")\n                  }\n\n                  finalPrerenderRoutes[route] = {\n                    initialRevalidateSeconds,\n                    experimentalPPR: undefined,\n                    srcRoute: page,\n                    dataRoute: path.posix.join(\n                      '/_next/data',\n                      buildId,\n                      `${normalizePagePath(route)}.json`\n                    ),\n                    // Pages does not have a prefetch data route.\n                    prefetchDataRoute: undefined,\n                  }\n\n                  // Set route Revalidation Interval\n                  if (pageInfo) {\n                    pageInfo.initialRevalidateSeconds = initialRevalidateSeconds\n                  }\n                }\n              }\n            }\n          }\n\n          // remove temporary export folder\n          await fs.rm(exportOptions.outdir, { recursive: true, force: true })\n          await writeManifest(pagesManifestPath, pagesManifest)\n        })\n      }\n\n      const postBuildSpinner = createSpinner('Finalizing page optimization')\n      let buildTracesSpinner = createSpinner(`Collecting build traces`)\n\n      // ensure the worker is not left hanging\n      pagesStaticWorkers.close()\n      appStaticWorkers?.close()\n\n      const analysisEnd = process.hrtime(analysisBegin)\n      telemetry.record(\n        eventBuildOptimize(pagesPaths, {\n          durationInSeconds: analysisEnd[0],\n          staticPageCount: staticPages.size,\n          staticPropsPageCount: ssgPages.size,\n          serverPropsPageCount: serverPropsPages.size,\n          ssrPageCount:\n            pagesPaths.length -\n            (staticPages.size + ssgPages.size + serverPropsPages.size),\n          hasStatic404: useStaticPages404,\n          hasReportWebVitals:\n            namedExports?.includes('reportWebVitals') ?? false,\n          rewritesCount: combinedRewrites.length,\n          headersCount: headers.length,\n          redirectsCount: redirects.length - 1, // reduce one for trailing slash\n          headersWithHasCount: headers.filter((r: any) => !!r.has).length,\n          rewritesWithHasCount: combinedRewrites.filter((r: any) => !!r.has)\n            .length,\n          redirectsWithHasCount: redirects.filter((r: any) => !!r.has).length,\n          middlewareCount: hasMiddlewareFile ? 1 : 0,\n          totalAppPagesCount,\n          staticAppPagesCount,\n          serverAppPagesCount,\n          edgeRuntimeAppCount,\n          edgeRuntimePagesCount,\n        })\n      )\n\n      if (NextBuildContext.telemetryState) {\n        const events = eventBuildFeatureUsage(\n          NextBuildContext.telemetryState.usages\n        )\n        telemetry.record(events)\n        telemetry.record(\n          eventPackageUsedInGetServerSideProps(\n            NextBuildContext.telemetryState.packagesUsedInServerSideProps\n          )\n        )\n      }\n\n      if (ssgPages.size > 0 || appDir) {\n        tbdPrerenderRoutes.forEach((tbdRoute) => {\n          const normalizedRoute = normalizePagePath(tbdRoute)\n          const dataRoute = path.posix.join(\n            '/_next/data',\n            buildId,\n            `${normalizedRoute}.json`\n          )\n\n          finalDynamicRoutes[tbdRoute] = {\n            routeRegex: normalizeRouteRegex(\n              getNamedRouteRegex(tbdRoute, false).re.source\n            ),\n            experimentalPPR: undefined,\n            dataRoute,\n            fallback: ssgBlockingFallbackPages.has(tbdRoute)\n              ? null\n              : ssgStaticFallbackPages.has(tbdRoute)\n                ? `${normalizedRoute}.html`\n                : false,\n            dataRouteRegex: normalizeRouteRegex(\n              getNamedRouteRegex(\n                dataRoute.replace(/\\.json$/, ''),\n                false\n              ).re.source.replace(/\\(\\?:\\\\\\/\\)\\?\\$$/, '\\\\.json$')\n            ),\n            // Pages does not have a prefetch data route.\n            prefetchDataRoute: undefined,\n            prefetchDataRouteRegex: undefined,\n          }\n        })\n\n        NextBuildContext.previewModeId = previewProps.previewModeId\n        NextBuildContext.fetchCacheKeyPrefix =\n          config.experimental.fetchCacheKeyPrefix\n        NextBuildContext.allowedRevalidateHeaderKeys =\n          config.experimental.allowedRevalidateHeaderKeys\n\n        const prerenderManifest: DeepReadonly<PrerenderManifest> = {\n          version: 4,\n          routes: finalPrerenderRoutes,\n          dynamicRoutes: finalDynamicRoutes,\n          notFoundRoutes: ssgNotFoundPaths,\n          preview: previewProps,\n        }\n        await writePrerenderManifest(distDir, prerenderManifest)\n        await writeClientSsgManifest(prerenderManifest, {\n          distDir,\n          buildId,\n          locales: config.i18n?.locales || [],\n        })\n      } else {\n        await writePrerenderManifest(distDir, {\n          version: 4,\n          routes: {},\n          dynamicRoutes: {},\n          preview: previewProps,\n          notFoundRoutes: [],\n        })\n      }\n\n      await writeImagesManifest(distDir, config)\n      await writeManifest(path.join(distDir, EXPORT_MARKER), {\n        version: 1,\n        hasExportPathMap: typeof config.exportPathMap === 'function',\n        exportTrailingSlash: config.trailingSlash === true,\n        isNextImageImported: isNextImageImported === true,\n      })\n      await fs.unlink(path.join(distDir, EXPORT_DETAIL)).catch((err) => {\n        if (err.code === 'ENOENT') {\n          return Promise.resolve()\n        }\n        return Promise.reject(err)\n      })\n\n      if (Boolean(config.experimental.nextScriptWorkers)) {\n        await nextBuildSpan\n          .traceChild('verify-partytown-setup')\n          .traceAsyncFn(async () => {\n            await verifyPartytownSetup(\n              dir,\n              path.join(distDir, CLIENT_STATIC_FILES_PATH)\n            )\n          })\n      }\n\n      await buildTracesPromise\n\n      if (buildTracesSpinner) {\n        buildTracesSpinner.stopAndPersist()\n        buildTracesSpinner = undefined\n      }\n\n      if (config.output === 'export') {\n        await writeFullyStaticExport(\n          config,\n          dir,\n          enabledDirectories,\n          configOutDir,\n          nextBuildSpan\n        )\n      }\n\n      if (config.output === 'standalone') {\n        await writeStandaloneDirectory(\n          nextBuildSpan,\n          distDir,\n          pageKeys,\n          denormalizedAppPages,\n          outputFileTracingRoot,\n          requiredServerFilesManifest,\n          middlewareManifest,\n          hasInstrumentationHook,\n          staticPages,\n          loadedEnvFiles,\n          appDir\n        )\n      }\n\n      if (postBuildSpinner) postBuildSpinner.stopAndPersist()\n      console.log()\n\n      if (debugOutput) {\n        nextBuildSpan\n          .traceChild('print-custom-routes')\n          .traceFn(() => printCustomRoutes({ redirects, rewrites, headers }))\n      }\n\n      await nextBuildSpan.traceChild('print-tree-view').traceAsyncFn(() =>\n        printTreeView(pageKeys, pageInfos, {\n          distPath: distDir,\n          buildId: buildId,\n          pagesDir,\n          useStaticPages404,\n          pageExtensions: config.pageExtensions,\n          appBuildManifest,\n          buildManifest,\n          middlewareManifest,\n          gzipSize: config.experimental.gzipSize,\n        })\n      )\n\n      await nextBuildSpan\n        .traceChild('telemetry-flush')\n        .traceAsyncFn(() => telemetry.flush())\n    })\n  } finally {\n    // Ensure we wait for lockfile patching if present\n    await lockfilePatchPromise.cur\n\n    // Ensure all traces are flushed before finishing the command\n    await flushAllTraces()\n    teardownTraceSubscriber()\n    teardownHeapProfiler()\n\n    if (traceUploadUrl && loadedConfig) {\n      uploadTrace({\n        traceUploadUrl,\n        mode: 'build',\n        projectDir: dir,\n        distDir: loadedConfig.distDir,\n        sync: true,\n      })\n    }\n  }\n}\n"],"names":["loadEnvConfig","bold","yellow","crypto","makeRe","existsSync","promises","fs","os","Worker","defaultConfig","devalue","findUp","nanoid","Sema","path","STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR","PUBLIC_DIR_MIDDLEWARE_CONFLICT","MIDDLEWARE_FILENAME","PAGES_DIR_ALIAS","INSTRUMENTATION_HOOK_FILENAME","RSC_PREFETCH_SUFFIX","RSC_SUFFIX","FileType","fileExists","findPagesDir","loadCustomRoutes","normalizeRouteRegex","nonNullable","recursiveDelete","verifyPartytownSetup","validateTurboNextConfig","BUILD_ID_FILE","BUILD_MANIFEST","CLIENT_STATIC_FILES_PATH","EXPORT_DETAIL","EXPORT_MARKER","AUTOMATIC_FONT_OPTIMIZATION_MANIFEST","IMAGES_MANIFEST","PAGES_MANIFEST","PHASE_PRODUCTION_BUILD","PRERENDER_MANIFEST","REACT_LOADABLE_MANIFEST","ROUTES_MANIFEST","SERVER_DIRECTORY","SERVER_FILES_MANIFEST","STATIC_STATUS_PAGES","MIDDLEWARE_MANIFEST","APP_PATHS_MANIFEST","APP_PATH_ROUTES_MANIFEST","APP_BUILD_MANIFEST","RSC_MODULE_TYPES","NEXT_FONT_MANIFEST","SUBRESOURCE_INTEGRITY_MANIFEST","MIDDLEWARE_BUILD_MANIFEST","MIDDLEWARE_REACT_LOADABLE_MANIFEST","SERVER_REFERENCE_MANIFEST","FUNCTIONS_CONFIG_MANIFEST","UNDERSCORE_NOT_FOUND_ROUTE_ENTRY","UNDERSCORE_NOT_FOUND_ROUTE","getSortedRoutes","isDynamicRoute","loadConfig","normalizePagePath","getPagePath","ciEnvironment","turborepoTraceAccess","TurborepoAccessTraceResult","writeTurborepoAccessTraceResult","eventBuildOptimize","eventCliSession","eventBuildFeatureUsage","eventNextPlugins","EVENT_BUILD_FEATURE_USAGE","eventPackageUsedInGetServerSideProps","eventBuildCompleted","Telemetry","getPageStaticInfo","createPagesMapping","getPageFromPath","sortByPageExts","PAGE_TYPES","generateBuildId","isWriteable","Log","createSpinner","trace","flushAllTraces","setGlobal","detectConflictingPaths","computeFromManifest","getJsPageSizeInKb","printCustomRoutes","printTreeView","copyTracedFiles","isReservedPage","isAppBuiltinNotFoundPage","collectRoutesUsingEdgeRuntime","writeBuildId","normalizeLocalePath","isError","isEdgeRuntime","recursiveCopy","recursiveReadDir","loadBindings","lockfilePatchPromise","teardownTraceSubscriber","teardownHeapProfiler","createDefineEnv","getNamedRouteRegex","getFilesInDir","eventSwcPlugins","normalizeAppPath","ACTION_HEADER","NEXT_ROUTER_PREFETCH_HEADER","RSC_HEADER","RSC_CONTENT_TYPE_HEADER","NEXT_ROUTER_STATE_TREE_HEADER","NEXT_DID_POSTPONE_HEADER","webpackBuild","NextBuildContext","normalizePathSep","isAppRouteRoute","createClientRouterFilter","createValidFileMatcher","startTypeChecking","generateInterceptionRoutesRewrites","buildDataRoute","collectBuildTraces","formatManifest","recordFrameworkVersion","updateBuildDiagnostics","getStartServerInfo","logStartInfo","hasCustomExportOutput","getTurbopackJsConfig","handleEntrypoints","handleRouteType","handlePagesErrorRoute","formatIssue","isRelevantWarning","TurbopackManifestLoader","buildCustomRoute","createProgress","traceMemoryUsage","generateEncryptionKeyBase64","uploadTrace","checkIsAppPPREnabled","checkIsRoutePPREnabled","detectChangedEntries","storeShuttle","stitchBuilds","pageToRoute","page","routeRegex","regex","re","source","routeKeys","namedRegex","getCacheDir","distDir","cacheDir","join","isCI","hasNextSupport","hasCache","console","log","prefixes","warn","writeFileUtf8","filePath","content","writeFile","readFileUtf8","readFile","writeManifest","manifest","readManifest","JSON","parse","writePrerenderManifest","writeClientSsgManifest","prerenderManifest","buildId","locales","ssgPages","Set","Object","entries","routes","filter","srcRoute","map","route","pathname","keys","dynamicRoutes","sort","clientSsgManifestContent","writeFunctionsConfigManifest","writeRequiredServerFilesManifest","requiredServerFiles","writeImagesManifest","config","images","deviceSizes","imageSizes","sizes","remotePatterns","p","protocol","hostname","port","dot","version","STANDALONE_DIRECTORY","writeStandaloneDirectory","nextBuildSpan","pageKeys","denormalizedAppPages","outputFileTracingRoot","middlewareManifest","hasInstrumentationHook","staticPages","loadedEnvFiles","appDir","traceChild","traceAsyncFn","pages","file","files","reduce","acc","envFile","includes","push","outputPath","relative","mkdir","dirname","recursive","copyFile","overwrite","originalServerApp","getNumberOfWorkers","experimental","cpus","memoryBasedWorkersCount","Math","max","min","floor","freemem","staticWorkerPath","require","resolve","staticWorkerExposedMethods","createStaticWorker","infoPrinted","timeout","staticPageGenerationTimeout","logger","onRestart","method","args","attempts","arg","pagePath","Error","numWorkers","forkOptions","env","process","enableWorkerThreads","workerThreads","exposedMethods","writeFullyStaticExport","dir","enabledDirectories","configOutDir","exportApp","default","pagesWorker","appWorker","buildExport","nextConfig","silent","outdir","exportAppPageWorker","exportPage","exportPageWorker","endWorker","end","close","getBuildId","isGenerateMode","IS_TURBOPACK_BUILD","TURBOPACK","TURBOPACK_BUILD","build","reactProductionProfiling","debugOutput","runLint","noMangling","appDirOnly","turboNextBuild","experimentalBuildMode","traceUploadUrl","isCompileMode","loadedConfig","undefined","buildMode","isTurboBuild","String","__NEXT_VERSION","mappedPages","traceFn","turborepoAccessTraceResult","NEXT_DEPLOYMENT_ID","deploymentId","shuttleDir","flyingShuttle","customRoutes","headers","rewrites","redirects","combinedRewrites","beforeFiles","afterFiles","fallback","hasRewrites","length","originalRewrites","_originalRewrites","originalRedirects","_originalRedirects","telemetry","publicDir","pagesDir","app","encryptionKey","isSrcDir","startsWith","hasPublicDir","record","webpackVersion","cliCommand","hasNowJson","cwd","isCustomServer","turboFlag","then","events","envInfo","expFeatureInfo","networkUrl","appUrl","ignoreESLint","Boolean","eslint","ignoreDuringBuilds","shouldLint","typeCheckingOptions","error","flush","exit","buildLintEvent","featureName","invocationCount","eventName","payload","validFileMatcher","pageExtensions","pagesPaths","pathnameFilter","isPageFile","changedPagePathsResult","changed","middlewareDetectionRegExp","RegExp","instrumentationHookDetectionRegExp","rootDir","instrumentationHookEnabled","instrumentationHook","rootPaths","some","include","test","replace","hasMiddlewareFile","previewProps","previewModeId","randomBytes","toString","previewModeSigningKey","previewModeEncryptionKey","isDev","pagesType","PAGES","pagePaths","mappedAppPages","changedAppPathsResult","appPaths","absolutePath","isAppRouterPage","isRootNotFound","ignorePartFilter","part","APP","mappedRootPaths","ROOT","pagesPageKeys","conflictingAppPagePaths","appPageKeys","appKey","normalizedAppPageKey","appPath","add","Array","from","basePath","totalAppPagesCount","numConflictingAppPaths","conflictingPublicFiles","hasPages404","hasApp404","hasCustomErrorPage","hasPublicUnderScoreNextDir","hasPublicPageFile","File","numConflicting","nestedReservedPages","match","restrictedRedirectPaths","routesManifestPath","routesManifest","sortedRoutes","staticRoutes","pages404","caseSensitive","caseSensitiveRoutes","r","dataRoutes","i18n","rsc","header","varyHeader","prefetchHeader","didPostponeHeader","contentTypeHeader","suffix","prefetchSuffix","skipMiddlewareUrlNormalize","clientRouterFilters","clientRouterFilter","nonInternalRedirects","internal","filterPaths","unchanged","entry","item","clientRouterFilterRedirects","clientRouterFilterAllowedRate","distDirCreated","err","code","cleanDistDir","buildStage","pagesManifestPath","cacheHandler","requiredServerFilesManifest","serverFilesManifest","configFile","compress","trustHostHeader","isExperimentalCompile","relativeAppDir","sri","optimizeFonts","ignore","turbopackBuild","startTime","hrtime","bindings","useWasmBinary","dev","project","turbo","createProject","projectPath","rootPath","jsConfig","watch","defineEnv","isTurbopack","fetchCacheKeyPrefix","middlewareMatchers","memoryLimit","stringify","type","entrypointsSubscription","entrypointsSubscribe","currentEntrypoints","global","document","middleware","instrumentation","Map","currentEntryIssues","manifestLoader","entrypointsResult","next","done","return","catch","entrypoints","value","topLevelErrors","issue","issues","message","e","devRewrites","productionRewrites","logErrors","progress","size","sema","enqueue","fn","acquire","release","Promise","all","writeManifests","errors","warnings","entryIssues","values","severity","duration","buildTraceContext","buildTracesPromise","useBuildWorker","webpackBuildWorker","webpack","runServerAndEdgeInParallel","parallelServerCompiles","collectServerBuildTracesInParallel","parallelServerBuildTraces","setAttribute","info","buildOptions","compilerDuration","rest","event","durationInSeconds","serverBuildPromise","res","buildTraceWorker","edgeRuntimeRoutes","hasSsrAmpPages","isFlyingShuttle","edgeBuildPromise","postCompileSpinner","buildManifestPath","appBuildManifestPath","staticAppPagesCount","serverAppPagesCount","edgeRuntimeAppCount","edgeRuntimePagesCount","ssgStaticFallbackPages","ssgBlockingFallbackPages","invalidPages","hybridAmpPages","serverPropsPages","additionalSsgPaths","additionalSsgPathsEncoded","appStaticPaths","appStaticPathsEncoded","appNormalizedPaths","appDynamicParamPaths","appDefaultConfigs","pageInfos","pagesManifest","buildManifest","appBuildManifest","isAppPPREnabled","ppr","appPathRoutes","appPathsManifest","key","NEXT_PHASE","pagesStaticWorkers","appStaticWorkers","analysisBegin","staticCheckSpan","functionsConfigManifest","functions","customAppGetInitialProps","namedExports","isNextImageImported","hasNonStaticErrorPage","configFileName","publicRuntimeConfig","serverRuntimeConfig","runtimeEnvConfig","nonStaticErrorPageSpan","errorPageHasCustomGetInitialProps","hasCustomGetInitialProps","checkingApp","errorPageStaticResult","isPageStatic","httpAgentOptions","defaultLocale","nextConfigOutput","output","pprConfig","appPageToCheck","customAppGetInitialPropsPromise","namedExportsPromise","getDefinedNamedExports","computedManifestData","gzipSize","actionManifest","entriesWithAction","id","node","workers","edge","pageType","checkPageSpan","actualPage","totalSize","isRoutePPREnabled","isSSG","isStatic","isServerComponent","isHybridAmp","ssgPageRoutes","find","originalAppPath","originalPath","normalizedPath","pageFilePath","staticInfo","extraConfig","pageRuntime","runtime","client","edgeInfo","manifestKey","isPageStaticSpan","workerResult","parentId","getId","isrFlushToDisk","maxMemoryCacheSize","cacheMaxMemorySize","set","warnOnce","encodedPrerenderRoutes","prerenderRoutes","appConfig","revalidate","isDynamic","hasGenerateStaticParams","dynamic","prerenderFallback","hasStaticProps","isAmpOnly","hasServerProps","delete","initialRevalidateSeconds","pageDuration","ssgPageDurations","hasEmptyPrelude","errorPageResult","nonStaticErrorPage","returnValue","stopAndPersist","useStaticPages404","pg","optimizeCss","globOrig","cssFilePaths","reject","features","nextScriptWorkers","feature","stitchResult","edgePreviewProps","__NEXT_PREVIEW_MODE_ID","__NEXT_PREVIEW_MODE_ENCRYPTION_KEY","__NEXT_PREVIEW_MODE_SIGNING_KEY","allowedErrorRate","finalPrerenderRoutes","finalDynamicRoutes","tbdPrerenderRoutes","ssgNotFoundPaths","usedStaticStatusPages","forEach","has","hasPages500","useDefaultStatic500","combinedPages","isApp404Static","hasStaticApp404","staticGenerationSpan","exportConfig","exportPathMap","defaultMap","query","__nextFallback","encodedRoutes","get","routeIdx","__nextSsgPath","_isDynamicError","_isAppDir","_isRoutePPREnabled","isSsg","isFallback","locale","__nextLocale","exportOptions","statusMessage","exportResult","traces","turborepoAccessTraceResults","serverBundle","unlink","hasDynamicData","byPath","isRouteHandler","experimentalPPR","bypassFor","metadata","hasPostponed","normalizedRoute","dataRoute","posix","prefetchDataRoute","routeMeta","status","initialStatus","exportHeaders","headerKeys","initialHeaders","isArray","experimentalBypassFor","isDynamicAppRoute","dataRouteRegex","prefetchDataRouteRegex","moveExportedPage","originPage","ext","additionalSsgFile","orig","relativeDest","slice","split","dest","isNotFound","rename","localeExt","extname","relativeDestNoPages","curPath","updatedRelativeDest","updatedOrig","updatedDest","moveExportedAppNotFoundTo404","isStaticSsgFallback","hasAmp","pageInfo","durationInfo","byPage","durationsByPath","hasHtmlOutput","ampPage","localePage","extraRoutes","pageFile","rm","force","postBuildSpinner","buildTracesSpinner","analysisEnd","staticPageCount","staticPropsPageCount","serverPropsPageCount","ssrPageCount","hasStatic404","hasReportWebVitals","rewritesCount","headersCount","redirectsCount","headersWithHasCount","rewritesWithHasCount","redirectsWithHasCount","middlewareCount","telemetryState","usages","packagesUsedInServerSideProps","tbdRoute","allowedRevalidateHeaderKeys","notFoundRoutes","preview","hasExportPathMap","exportTrailingSlash","trailingSlash","distPath","cur","mode","projectDir","sync"],"mappings":"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"}