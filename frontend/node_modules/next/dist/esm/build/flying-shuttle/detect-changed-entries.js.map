{"version":3,"sources":["../../../src/build/flying-shuttle/detect-changed-entries.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport crypto from 'crypto'\nimport { getPageFromPath } from '../entries'\nimport { Sema } from 'next/dist/compiled/async-sema'\n\nexport interface DetectedEntriesResult {\n  app: string[]\n  pages: string[]\n}\n\nlet _hasShuttle: undefined | boolean = undefined\nexport async function hasShuttle(shuttleDir: string) {\n  if (typeof _hasShuttle === 'boolean') {\n    return _hasShuttle\n  }\n  _hasShuttle = await fs.promises\n    .access(path.join(shuttleDir, 'server'))\n    .then(() => true)\n    .catch(() => false)\n\n  return _hasShuttle\n}\n\nexport async function detectChangedEntries({\n  appPaths,\n  pagesPaths,\n  pageExtensions,\n  distDir,\n  shuttleDir,\n}: {\n  appPaths?: string[]\n  pagesPaths?: string[]\n  pageExtensions: string[]\n  distDir: string\n  shuttleDir: string\n}): Promise<{\n  changed: DetectedEntriesResult\n  unchanged: DetectedEntriesResult\n}> {\n  const changedEntries: {\n    app: string[]\n    pages: string[]\n  } = {\n    app: [],\n    pages: [],\n  }\n  const unchangedEntries: typeof changedEntries = {\n    app: [],\n    pages: [],\n  }\n\n  if (!(await hasShuttle(shuttleDir))) {\n    // no shuttle so consider everything changed\n    console.log(`no shuttle. can't detect changes`)\n    return {\n      changed: {\n        pages: pagesPaths || [],\n        app: appPaths || [],\n      },\n      unchanged: {\n        pages: [],\n        app: [],\n      },\n    }\n  }\n\n  const hashCache = new Map<string, string>()\n\n  async function computeHash(p: string): Promise<string> {\n    let hash = hashCache.get(p)\n    if (hash) {\n      return hash\n    }\n    return new Promise((resolve, reject) => {\n      const hashInst = crypto.createHash('sha1')\n      const stream = fs.createReadStream(p)\n      stream.on('error', (err) => reject(err))\n      stream.on('data', (chunk) => hashInst.update(chunk))\n      stream.on('end', () => {\n        const digest = hashInst.digest('hex')\n        resolve(digest)\n        hashCache.set(p, digest)\n      })\n    })\n  }\n\n  const hashSema = new Sema(16)\n  let globalEntryChanged = false\n\n  async function detectChange({\n    normalizedEntry,\n    entry,\n    type,\n  }: {\n    entry: string\n    normalizedEntry: string\n    type: keyof typeof changedEntries\n  }) {\n    const traceFile = path.join(\n      shuttleDir,\n      'server',\n      type,\n      `${normalizedEntry}.js.nft.json`\n    )\n    let changed = true\n\n    // we don't need to check any further entry's dependencies if\n    // a global entry changed since that invalidates everything\n    if (!globalEntryChanged) {\n      try {\n        const traceData: {\n          fileHashes: Record<string, string>\n        } = JSON.parse(await fs.promises.readFile(traceFile, 'utf8'))\n\n        if (traceData) {\n          let changedDependency = false\n          await Promise.all(\n            Object.keys(traceData.fileHashes).map(async (file) => {\n              try {\n                if (changedDependency) return\n                await hashSema.acquire()\n                const relativeTraceFile = path.relative(\n                  path.join(shuttleDir, 'server', type),\n                  traceFile\n                )\n                const originalTraceFile = path.join(\n                  distDir,\n                  'server',\n                  type,\n                  relativeTraceFile\n                )\n                const absoluteFile = path.join(\n                  path.dirname(originalTraceFile),\n                  file\n                )\n\n                if (absoluteFile.startsWith(distDir)) {\n                  return\n                }\n\n                const prevHash = traceData.fileHashes[file]\n                const curHash = await computeHash(absoluteFile)\n\n                if (prevHash !== curHash) {\n                  console.log('detected change on', {\n                    prevHash,\n                    curHash,\n                    file,\n                    entry: normalizedEntry,\n                  })\n                  changedDependency = true\n                }\n              } finally {\n                hashSema.release()\n              }\n            })\n          )\n\n          if (!changedDependency) {\n            changed = false\n          }\n        } else {\n          console.error('missing trace data', traceFile, normalizedEntry)\n        }\n      } catch (err) {\n        console.error(`Failed to detect change for ${entry}`, err)\n      }\n    }\n\n    // we always rebuild global entries so we have a version\n    // that matches the newest build/runtime\n    const isGlobalEntry = /(_app|_document|_error)/.test(entry)\n\n    if (changed || isGlobalEntry) {\n      // if a global entry changed all entries are changed\n      if (!globalEntryChanged && isGlobalEntry) {\n        console.log(`global entry ${entry} changed invalidating all entries`)\n        globalEntryChanged = true\n        // move unchanged to changed\n        changedEntries[type].push(...unchangedEntries[type])\n      }\n      changedEntries[type].push(entry)\n    } else {\n      unchangedEntries[type].push(entry)\n    }\n  }\n\n  // loop over entries and their dependency's hashes\n  // to detect which changed\n  for (const entry of pagesPaths || []) {\n    let normalizedEntry = getPageFromPath(entry, pageExtensions)\n\n    if (normalizedEntry === '/') {\n      normalizedEntry = '/index'\n    }\n    await detectChange({ entry, normalizedEntry, type: 'pages' })\n  }\n\n  for (const entry of appPaths || []) {\n    const normalizedEntry = getPageFromPath(entry, pageExtensions)\n    await detectChange({ entry, normalizedEntry, type: 'app' })\n  }\n\n  console.log(\n    'changed entries',\n    JSON.stringify(\n      {\n        changedEntries,\n        unchangedEntries,\n      },\n      null,\n      2\n    )\n  )\n\n  return {\n    changed: changedEntries,\n    unchanged: unchangedEntries,\n  }\n}\n"],"names":["fs","path","crypto","getPageFromPath","Sema","_hasShuttle","undefined","hasShuttle","shuttleDir","promises","access","join","then","catch","detectChangedEntries","appPaths","pagesPaths","pageExtensions","distDir","changedEntries","app","pages","unchangedEntries","console","log","changed","unchanged","hashCache","Map","computeHash","p","hash","get","Promise","resolve","reject","hashInst","createHash","stream","createReadStream","on","err","chunk","update","digest","set","hashSema","globalEntryChanged","detectChange","normalizedEntry","entry","type","traceFile","traceData","JSON","parse","readFile","changedDependency","all","Object","keys","fileHashes","map","file","acquire","relativeTraceFile","relative","originalTraceFile","absoluteFile","dirname","startsWith","prevHash","curHash","release","error","isGlobalEntry","test","push","stringify"],"mappings":"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"}