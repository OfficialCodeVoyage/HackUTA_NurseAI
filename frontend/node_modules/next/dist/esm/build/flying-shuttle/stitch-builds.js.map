{"version":3,"sources":["../../../src/build/flying-shuttle/stitch-builds.ts"],"sourcesContent":["import type { Rewrite, Redirect } from '../../lib/load-custom-routes'\nimport type { PagesManifest } from '../webpack/plugins/pages-manifest-plugin'\n\nimport fs from 'fs'\nimport path from 'path'\nimport { getPageFromPath } from '../entries'\nimport { Sema } from 'next/dist/compiled/async-sema'\nimport { recursiveCopy } from '../../lib/recursive-copy'\nimport { getSortedRoutes } from '../../shared/lib/router/utils'\nimport { generateClientManifest } from '../webpack/plugins/build-manifest-plugin'\nimport { createClientRouterFilter } from '../../lib/create-client-router-filter'\nimport {\n  hasShuttle,\n  type DetectedEntriesResult,\n} from './detect-changed-entries'\nimport {\n  APP_BUILD_MANIFEST,\n  APP_PATH_ROUTES_MANIFEST,\n  APP_PATHS_MANIFEST,\n  AUTOMATIC_FONT_OPTIMIZATION_MANIFEST,\n  BUILD_MANIFEST,\n  CLIENT_REFERENCE_MANIFEST,\n  FUNCTIONS_CONFIG_MANIFEST,\n  MIDDLEWARE_BUILD_MANIFEST,\n  MIDDLEWARE_MANIFEST,\n  MIDDLEWARE_REACT_LOADABLE_MANIFEST,\n  NEXT_FONT_MANIFEST,\n  PAGES_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n  ROUTES_MANIFEST,\n} from '../../shared/lib/constants'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\n\nexport async function stitchBuilds(\n  {\n    distDir,\n    shuttleDir,\n    buildId,\n    rewrites,\n    redirects,\n    allowedErrorRate,\n    encryptionKey,\n    edgePreviewProps,\n  }: {\n    buildId: string\n    distDir: string\n    shuttleDir: string\n    rewrites: {\n      beforeFiles: Rewrite[]\n      afterFiles: Rewrite[]\n      fallback: Rewrite[]\n    }\n    redirects: Redirect[]\n    allowedErrorRate?: number\n    encryptionKey: string\n    edgePreviewProps: Record<string, string>\n  },\n  entries: {\n    changed: DetectedEntriesResult\n    unchanged: DetectedEntriesResult\n    pageExtensions: string[]\n  }\n): Promise<{\n  pagesManifest?: PagesManifest\n}> {\n  if (!(await hasShuttle(shuttleDir))) {\n    // no shuttle directory nothing to stitch\n    return {}\n  }\n  // if a manifest is needed in the rest of the build\n  // we return it from here so it can be used without\n  // re-reading from disk after changing\n  const updatedManifests: {\n    pagesManifest?: PagesManifest\n  } = {}\n\n  // we need to copy the chunks from the shuttle folder\n  // to the distDir (we copy all server split chunks currently)\n  await recursiveCopy(\n    path.join(shuttleDir, 'server'),\n    path.join(distDir, 'server'),\n    {\n      filter(item) {\n        // we copy page chunks separately to not copy stale entries\n        return !item.match(/^[/\\\\](pages|app)[/\\\\]/)\n      },\n      overwrite: true,\n    }\n  )\n  // copy static chunks (this includes stale chunks but won't be loaded)\n  // unless referenced\n  await recursiveCopy(\n    path.join(shuttleDir, 'static'),\n    path.join(distDir, 'static'),\n    { overwrite: true }\n  )\n\n  async function copyPageChunk(entry: string, type: 'app' | 'pages') {\n    // copy entry chunk and flight manifest stuff\n    // TODO: copy .map files?\n    const entryFile = path.join('server', type, `${entry}.js`)\n\n    await fs.promises.mkdir(path.join(distDir, path.dirname(entryFile)), {\n      recursive: true,\n    })\n    await fs.promises.copyFile(\n      path.join(shuttleDir, entryFile + '.nft.json'),\n      path.join(distDir, entryFile + '.nft.json')\n    )\n\n    if (type === 'app' && !entry.endsWith('/route')) {\n      const clientRefManifestFile = path.join(\n        'server',\n        type,\n        `${entry}_${CLIENT_REFERENCE_MANIFEST}.js`\n      )\n      await fs.promises.copyFile(\n        path.join(shuttleDir, clientRefManifestFile),\n        path.join(distDir, clientRefManifestFile)\n      )\n    }\n    await fs.promises.copyFile(\n      path.join(shuttleDir, entryFile),\n      path.join(distDir, entryFile)\n    )\n  }\n  const copySema = new Sema(8)\n\n  // restore unchanged entries avoiding copying stale\n  // entries from the shuttle/previous build\n  for (const { type, curEntries } of [\n    { type: 'app', curEntries: entries.unchanged.app },\n    { type: 'pages', curEntries: entries.unchanged.pages },\n  ] as Array<{ type: 'app' | 'pages'; curEntries: string[] }>) {\n    await Promise.all(\n      curEntries.map(async (entry) => {\n        try {\n          await copySema.acquire()\n          let normalizedEntry = getPageFromPath(entry, entries.pageExtensions)\n          if (normalizedEntry === '/') {\n            normalizedEntry = '/index'\n          }\n          await copyPageChunk(normalizedEntry, type)\n        } finally {\n          copySema.release()\n        }\n      })\n    )\n  }\n  // always attempt copying not-found chunk\n  await copyPageChunk('/_not-found/page', 'app').catch(() => {})\n\n  // merge dynamic/static routes in routes-manifest\n  const [restoreRoutesManifest, currentRoutesManifest] = await Promise.all(\n    [\n      path.join(shuttleDir, 'manifests', ROUTES_MANIFEST),\n      path.join(distDir, ROUTES_MANIFEST),\n    ].map(async (f) => JSON.parse(await fs.promises.readFile(f, 'utf8')))\n  )\n  const dynamicRouteMap: Record<string, any> = {}\n  const combinedDynamicRoutes: Record<string, any>[] = [\n    ...currentRoutesManifest.dynamicRoutes,\n    ...restoreRoutesManifest.dynamicRoutes,\n  ]\n  for (const route of combinedDynamicRoutes) {\n    dynamicRouteMap[route.page] = route\n  }\n\n  const mergedRoutesManifest = {\n    ...currentRoutesManifest,\n    dynamicRoutes: getSortedRoutes(\n      combinedDynamicRoutes.map((item) => item.page)\n    ).map((page) => dynamicRouteMap[page]),\n    staticRoutes: [\n      ...currentRoutesManifest.staticRoutes,\n      ...restoreRoutesManifest.staticRoutes,\n    ],\n  }\n  await fs.promises.writeFile(\n    path.join(distDir, ROUTES_MANIFEST),\n    JSON.stringify(mergedRoutesManifest, null, 2)\n  )\n\n  // for build-manifest we use latest runtime files\n  // and only merge previous page chunk entries\n  // middleware-build-manifest.js (needs to be regenerated)\n  const [restoreBuildManifest, currentBuildManifest] = await Promise.all(\n    [\n      path.join(shuttleDir, 'manifests', BUILD_MANIFEST),\n      path.join(distDir, BUILD_MANIFEST),\n    ].map(async (file) => JSON.parse(await fs.promises.readFile(file, 'utf8')))\n  )\n  const mergedBuildManifest = {\n    // we want to re-use original runtime\n    // chunks so we favor restored version\n    // over new\n    ...currentBuildManifest,\n    pages: {\n      ...restoreBuildManifest.pages,\n      ...currentBuildManifest.pages,\n    },\n  }\n\n  // _app and _error is unique per runtime\n  // so nest under each specific entry in build-manifest\n  const internalEntries = ['/_error', '/_app']\n\n  for (const entry of Object.keys(restoreBuildManifest.pages)) {\n    if (currentBuildManifest.pages[entry]) {\n      continue\n    }\n    for (const internalEntry of internalEntries) {\n      for (const chunk of restoreBuildManifest.pages[internalEntry]) {\n        if (!restoreBuildManifest.pages[entry].includes(chunk)) {\n          mergedBuildManifest.pages[entry].unshift(chunk)\n        }\n      }\n    }\n  }\n\n  for (const entry of Object.keys(currentBuildManifest.pages)) {\n    for (const internalEntry of internalEntries) {\n      for (const chunk of currentBuildManifest.pages[internalEntry]) {\n        if (!currentBuildManifest.pages[entry].includes(chunk)) {\n          mergedBuildManifest.pages[entry].unshift(chunk)\n        }\n      }\n    }\n  }\n\n  for (const key of internalEntries) {\n    mergedBuildManifest.pages[key] = []\n  }\n\n  for (const entry of entries.unchanged.app || []) {\n    const normalizedEntry = getPageFromPath(entry, entries.pageExtensions)\n    mergedBuildManifest.rootMainFilesTree[normalizedEntry] =\n      restoreBuildManifest.rootMainFilesTree[normalizedEntry] ||\n      restoreBuildManifest.rootMainFiles\n  }\n\n  await fs.promises.writeFile(\n    path.join(distDir, BUILD_MANIFEST),\n    JSON.stringify(mergedBuildManifest, null, 2)\n  )\n  await fs.promises.writeFile(\n    path.join(distDir, 'server', `${MIDDLEWARE_BUILD_MANIFEST}.js`),\n    `self.__BUILD_MANIFEST=${JSON.stringify(mergedBuildManifest)}`\n  )\n  await fs.promises.writeFile(\n    path.join(distDir, 'static', buildId, `_buildManifest.js`),\n    `self.__BUILD_MANIFEST = ${generateClientManifest(\n      mergedBuildManifest,\n      rewrites,\n      createClientRouterFilter(\n        [\n          ...[\n            // client filter always has all app paths\n            ...(entries.unchanged?.app || []),\n            ...(entries.changed?.app || []),\n          ].map((entry) =>\n            normalizeAppPath(getPageFromPath(entry, entries.pageExtensions))\n          ),\n          ...(entries.unchanged.pages.length\n            ? entries.changed?.pages || []\n            : []\n          ).map((item) => getPageFromPath(item, entries.pageExtensions)),\n        ],\n        redirects,\n        allowedErrorRate\n      )\n    )};self.__BUILD_MANIFEST_CB && self.__BUILD_MANIFEST_CB()`\n  )\n\n  // for react-loadable-manifest we just merge directly\n  // prioritizing current manifest over previous,\n  // middleware-react-loadable-manifest (needs to be regenerated)\n  const [restoreLoadableManifest, currentLoadableManifest] = await Promise.all(\n    [\n      path.join(shuttleDir, 'manifests', REACT_LOADABLE_MANIFEST),\n      path.join(distDir, REACT_LOADABLE_MANIFEST),\n    ].map(async (file) => JSON.parse(await fs.promises.readFile(file, 'utf8')))\n  )\n  const mergedLoadableManifest = {\n    ...restoreLoadableManifest,\n    ...currentLoadableManifest,\n  }\n\n  await fs.promises.writeFile(\n    path.join(distDir, REACT_LOADABLE_MANIFEST),\n    JSON.stringify(mergedLoadableManifest, null, 2)\n  )\n  await fs.promises.writeFile(\n    path.join(distDir, 'server', `${MIDDLEWARE_REACT_LOADABLE_MANIFEST}.js`),\n    `self.__REACT_LOADABLE_MANIFEST=${JSON.stringify(\n      JSON.stringify(mergedLoadableManifest)\n    )}`\n  )\n\n  // for server/middleware-manifest we just merge the functions\n  // and middleware fields\n  const [restoreMiddlewareManifest, currentMiddlewareManifest] =\n    await Promise.all(\n      [\n        path.join(shuttleDir, 'server', MIDDLEWARE_MANIFEST),\n        path.join(distDir, 'server', MIDDLEWARE_MANIFEST),\n      ].map(async (file) =>\n        JSON.parse(await fs.promises.readFile(file, 'utf8'))\n      )\n    )\n  const mergedMiddlewareManifest = {\n    ...currentMiddlewareManifest,\n    functions: {\n      ...restoreMiddlewareManifest.functions,\n      ...currentMiddlewareManifest.functions,\n    },\n  }\n  // update edge function env\n  const updatedEdgeEnv: Record<string, string> = {\n    __NEXT_BUILD_ID: buildId,\n    NEXT_SERVER_ACTIONS_ENCRYPTION_KEY: encryptionKey,\n    ...edgePreviewProps,\n  }\n  if (mergedMiddlewareManifest.middleware['/']) {\n    Object.assign(mergedMiddlewareManifest.middleware['/'].env, updatedEdgeEnv)\n  }\n  for (const key of Object.keys(mergedMiddlewareManifest.functions)) {\n    Object.assign(mergedMiddlewareManifest.functions[key].env, updatedEdgeEnv)\n  }\n\n  await fs.promises.writeFile(\n    path.join(distDir, 'server', MIDDLEWARE_MANIFEST),\n    JSON.stringify(mergedMiddlewareManifest, null, 2)\n  )\n\n  // for server/next-font-manifest we just merge nested\n  // page/app fields and regenerate server/next-font-manifest.js\n  const [restoreNextFontManifest, currentNextFontManifest] = await Promise.all(\n    [\n      path.join(shuttleDir, 'server', `${NEXT_FONT_MANIFEST}.json`),\n      path.join(distDir, 'server', `${NEXT_FONT_MANIFEST}.json`),\n    ].map(async (file) => JSON.parse(await fs.promises.readFile(file, 'utf8')))\n  )\n  const mergedNextFontManifest = {\n    ...currentNextFontManifest,\n    pages: {\n      ...restoreNextFontManifest.pages,\n      ...currentNextFontManifest.pages,\n    },\n    app: {\n      ...restoreNextFontManifest.app,\n      ...currentNextFontManifest.app,\n    },\n  }\n\n  await fs.promises.writeFile(\n    path.join(distDir, 'server', `${NEXT_FONT_MANIFEST}.json`),\n    JSON.stringify(mergedNextFontManifest, null, 2)\n  )\n  await fs.promises.writeFile(\n    path.join(distDir, 'server', `${NEXT_FONT_MANIFEST}.js`),\n    `self.__NEXT_FONT_MANIFEST=${JSON.stringify(\n      JSON.stringify(mergedNextFontManifest)\n    )}`\n  )\n\n  // for server/font-manifest.json we just merge the arrays\n  for (const file of [AUTOMATIC_FONT_OPTIMIZATION_MANIFEST]) {\n    const [restoreFontManifest, currentFontManifest] = await Promise.all(\n      [\n        path.join(shuttleDir, 'server', file),\n        path.join(distDir, 'server', file),\n      ].map(async (f) => JSON.parse(await fs.promises.readFile(f, 'utf8')))\n    )\n    const mergedFontManifest = [...restoreFontManifest, ...currentFontManifest]\n\n    await fs.promises.writeFile(\n      path.join(distDir, 'server', file),\n      JSON.stringify(mergedFontManifest, null, 2)\n    )\n  }\n\n  // for server/functions-config-manifest.json we just merge\n  // the functions field\n  const [restoreFunctionsConfigManifest, currentFunctionsConfigManifest] =\n    await Promise.all(\n      [\n        path.join(shuttleDir, 'server', FUNCTIONS_CONFIG_MANIFEST),\n        path.join(distDir, 'server', FUNCTIONS_CONFIG_MANIFEST),\n      ].map(async (file) =>\n        JSON.parse(await fs.promises.readFile(file, 'utf8'))\n      )\n    )\n  const mergedFunctionsConfigManifest = {\n    ...currentFunctionsConfigManifest,\n    functions: {\n      ...restoreFunctionsConfigManifest.functions,\n      ...currentFunctionsConfigManifest.functions,\n    },\n  }\n  await fs.promises.writeFile(\n    path.join(distDir, 'server', FUNCTIONS_CONFIG_MANIFEST),\n    JSON.stringify(mergedFunctionsConfigManifest, null, 2)\n  )\n\n  for (const file of [APP_BUILD_MANIFEST, APP_PATH_ROUTES_MANIFEST]) {\n    const [restorePagesManifest, currentPagesManifest] = await Promise.all(\n      [path.join(shuttleDir, 'manifests', file), path.join(distDir, file)].map(\n        async (f) => JSON.parse(await fs.promises.readFile(f, 'utf8'))\n      )\n    )\n    const mergedPagesManifest = {\n      ...restorePagesManifest,\n      ...currentPagesManifest,\n\n      ...(file === APP_BUILD_MANIFEST\n        ? {\n            pages: {\n              ...restorePagesManifest.pages,\n              ...currentPagesManifest.pages,\n            },\n          }\n        : {}),\n    }\n    await fs.promises.writeFile(\n      path.join(distDir, file),\n      JSON.stringify(mergedPagesManifest, null, 2)\n    )\n  }\n\n  for (const file of [PAGES_MANIFEST, APP_PATHS_MANIFEST]) {\n    const [restoreAppManifest, currentAppManifest] = await Promise.all(\n      [\n        path.join(shuttleDir, 'server', file),\n        path.join(distDir, 'server', file),\n      ].map(async (f) => JSON.parse(await fs.promises.readFile(f, 'utf8')))\n    )\n    const mergedManifest = {\n      ...restoreAppManifest,\n      ...currentAppManifest,\n    }\n    await fs.promises.writeFile(\n      path.join(distDir, 'server', file),\n      JSON.stringify(mergedManifest, null, 2)\n    )\n    if (file === PAGES_MANIFEST) {\n      updatedManifests.pagesManifest = mergedManifest\n    }\n  }\n\n  // for server/server-reference-manifest.json we merge\n  // and regenerate server/server-reference-manifest.js\n  const [restoreServerRefManifest, currentServerRefManifest] =\n    await Promise.all(\n      [\n        path.join(shuttleDir, 'server', `${SERVER_REFERENCE_MANIFEST}.json`),\n        path.join(distDir, 'server', `${SERVER_REFERENCE_MANIFEST}.json`),\n      ].map(async (file) =>\n        JSON.parse(await fs.promises.readFile(file, 'utf8'))\n      )\n    )\n  const mergedServerRefManifest = {\n    ...currentServerRefManifest,\n    node: {\n      ...restoreServerRefManifest.node,\n      ...currentServerRefManifest.node,\n    },\n    edge: {\n      ...restoreServerRefManifest.edge,\n      ...currentServerRefManifest.edge,\n    },\n  }\n  await fs.promises.writeFile(\n    path.join(distDir, 'server', `${SERVER_REFERENCE_MANIFEST}.json`),\n    JSON.stringify(mergedServerRefManifest, null, 2)\n  )\n  await fs.promises.writeFile(\n    path.join(distDir, 'server', `${SERVER_REFERENCE_MANIFEST}.js`),\n    `self.__RSC_SERVER_MANIFEST=${JSON.stringify(\n      JSON.stringify(mergedServerRefManifest)\n    )}`\n  )\n\n  // TODO: inline env variables post build by find/replace\n  // in all the chunks for NEXT_PUBLIC_?\n\n  return updatedManifests\n}\n"],"names":["fs","path","getPageFromPath","Sema","recursiveCopy","getSortedRoutes","generateClientManifest","createClientRouterFilter","hasShuttle","APP_BUILD_MANIFEST","APP_PATH_ROUTES_MANIFEST","APP_PATHS_MANIFEST","AUTOMATIC_FONT_OPTIMIZATION_MANIFEST","BUILD_MANIFEST","CLIENT_REFERENCE_MANIFEST","FUNCTIONS_CONFIG_MANIFEST","MIDDLEWARE_BUILD_MANIFEST","MIDDLEWARE_MANIFEST","MIDDLEWARE_REACT_LOADABLE_MANIFEST","NEXT_FONT_MANIFEST","PAGES_MANIFEST","REACT_LOADABLE_MANIFEST","SERVER_REFERENCE_MANIFEST","ROUTES_MANIFEST","normalizeAppPath","stitchBuilds","distDir","shuttleDir","buildId","rewrites","redirects","allowedErrorRate","encryptionKey","edgePreviewProps","entries","updatedManifests","join","filter","item","match","overwrite","copyPageChunk","entry","type","entryFile","promises","mkdir","dirname","recursive","copyFile","endsWith","clientRefManifestFile","copySema","curEntries","unchanged","app","pages","Promise","all","map","acquire","normalizedEntry","pageExtensions","release","catch","restoreRoutesManifest","currentRoutesManifest","f","JSON","parse","readFile","dynamicRouteMap","combinedDynamicRoutes","dynamicRoutes","route","page","mergedRoutesManifest","staticRoutes","writeFile","stringify","restoreBuildManifest","currentBuildManifest","file","mergedBuildManifest","internalEntries","Object","keys","internalEntry","chunk","includes","unshift","key","rootMainFilesTree","rootMainFiles","changed","length","restoreLoadableManifest","currentLoadableManifest","mergedLoadableManifest","restoreMiddlewareManifest","currentMiddlewareManifest","mergedMiddlewareManifest","functions","updatedEdgeEnv","__NEXT_BUILD_ID","NEXT_SERVER_ACTIONS_ENCRYPTION_KEY","middleware","assign","env","restoreNextFontManifest","currentNextFontManifest","mergedNextFontManifest","restoreFontManifest","currentFontManifest","mergedFontManifest","restoreFunctionsConfigManifest","currentFunctionsConfigManifest","mergedFunctionsConfigManifest","restorePagesManifest","currentPagesManifest","mergedPagesManifest","restoreAppManifest","currentAppManifest","mergedManifest","pagesManifest","restoreServerRefManifest","currentServerRefManifest","mergedServerRefManifest","node","edge"],"mappings":"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"}