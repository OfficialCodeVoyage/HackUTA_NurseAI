{"version":3,"sources":["../../../src/server/app-render/app-render.tsx"],"sourcesContent":["import type {\n  ActionResult,\n  DynamicParamTypesShort,\n  FlightRouterState,\n  FlightSegmentPath,\n  RenderOpts,\n  Segment,\n  CacheNodeSeedData,\n  PreloadCallbacks,\n  RSCPayload,\n  FlightData,\n  InitialRSCPayload,\n} from './types'\nimport type { StaticGenerationStore } from '../../client/components/static-generation-async-storage.external'\nimport type { RequestStore } from '../../client/components/request-async-storage.external'\nimport type { NextParsedUrlQuery } from '../request-meta'\nimport type { LoaderTree } from '../lib/app-dir-module'\nimport type { AppPageModule } from '../route-modules/app-page/module'\nimport type { ClientReferenceManifest } from '../../build/webpack/plugins/flight-manifest-plugin'\nimport type { Revalidate } from '../lib/revalidate'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\nimport type { BaseNextRequest, BaseNextResponse } from '../base-http'\nimport type { IncomingHttpHeaders } from 'http'\n\nimport React, { type JSX } from 'react'\n\nimport RenderResult, {\n  type AppPageRenderResultMetadata,\n  type RenderResultOptions,\n  type RenderResultResponse,\n} from '../render-result'\nimport {\n  chainStreams,\n  renderToInitialFizzStream,\n  continueFizzStream,\n  continueDynamicPrerender,\n  continueStaticPrerender,\n  continueDynamicHTMLResume,\n  continueDynamicDataResume,\n} from '../stream-utils/node-web-streams-helper'\nimport { stripInternalQueries } from '../internal-utils'\nimport {\n  NEXT_HMR_REFRESH_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_URL,\n  RSC_HEADER,\n} from '../../client/components/app-router-headers'\nimport {\n  createMetadataComponents,\n  createMetadataContext,\n} from '../../lib/metadata/metadata'\nimport { withRequestStore } from '../async-storage/with-request-store'\nimport { withStaticGenerationStore } from '../async-storage/with-static-generation-store'\nimport { isNotFoundError } from '../../client/components/not-found'\nimport {\n  getURLFromRedirectError,\n  isRedirectError,\n  getRedirectStatusCodeFromError,\n} from '../../client/components/redirect'\nimport { addImplicitTags } from '../lib/patch-fetch'\nimport { AppRenderSpan, NextNodeServerSpan } from '../lib/trace/constants'\nimport { getTracer } from '../lib/trace/tracer'\nimport { FlightRenderResult } from './flight-render-result'\nimport {\n  createErrorHandler,\n  type DigestedError,\n  type ErrorHandler,\n} from './create-error-handler'\nimport {\n  getShortDynamicParamType,\n  dynamicParamTypes,\n} from './get-short-dynamic-param-type'\nimport { getSegmentParam } from './get-segment-param'\nimport { getScriptNonceFromHeader } from './get-script-nonce-from-header'\nimport { parseAndValidateFlightRouterState } from './parse-and-validate-flight-router-state'\nimport { createFlightRouterStateFromLoaderTree } from './create-flight-router-state-from-loader-tree'\nimport { handleAction } from './action-handler'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { warn, error } from '../../build/output/log'\nimport { appendMutableCookies } from '../web/spec-extension/adapters/request-cookies'\nimport { createServerInsertedHTML } from './server-inserted-html'\nimport { getRequiredScripts } from './required-scripts'\nimport { addPathPrefix } from '../../shared/lib/router/utils/add-path-prefix'\nimport {\n  getTracedMetadata,\n  makeGetServerInsertedHTML,\n} from './make-get-server-inserted-html'\nimport { walkTreeWithFlightRouterState } from './walk-tree-with-flight-router-state'\nimport { createComponentTree } from './create-component-tree'\nimport { getAssetQueryString } from './get-asset-query-string'\nimport { setReferenceManifestsSingleton } from './encryption-utils'\nimport {\n  createStaticRenderer,\n  DYNAMIC_DATA,\n  getDynamicDataPostponedState,\n  getDynamicHTMLPostponedState,\n  type PostponedState,\n} from './static/static-renderer'\nimport { isDynamicServerError } from '../../client/components/hooks-server-context'\nimport {\n  useFlightStream,\n  createInlinedDataReadableStream,\n  flightRenderComplete,\n} from './use-flight-response'\nimport {\n  StaticGenBailoutError,\n  isStaticGenBailoutError,\n} from '../../client/components/static-generation-bailout'\nimport { getStackWithoutErrorMessage } from '../../lib/format-server-error'\nimport {\n  usedDynamicAPIs,\n  createPostponedAbortSignal,\n  formatDynamicAPIAccesses,\n} from './dynamic-rendering'\nimport {\n  getClientComponentLoaderMetrics,\n  wrapClientComponentLoader,\n} from '../client-component-renderer-logger'\nimport { createServerModuleMap } from './action-utils'\nimport { isNodeNextRequest } from '../base-http/helpers'\nimport { parseParameter } from '../../shared/lib/router/utils/route-regex'\nimport { parseRelativeUrl } from '../../shared/lib/router/utils/parse-relative-url'\nimport AppRouter from '../../client/components/app-router'\nimport type { ServerComponentsHmrCache } from '../response-cache'\nimport type { RequestErrorContext } from '../instrumentation/types'\nimport { getServerActionRequestMetadata } from '../lib/server-action-request-meta'\nimport { createInitialRouterState } from '../../client/components/router-reducer/create-initial-router-state'\nimport { createMutableActionQueue } from '../../shared/lib/router/action-queue'\n\nexport type GetDynamicParamFromSegment = (\n  // [slug] / [[slug]] / [...slug]\n  segment: string\n) => {\n  param: string\n  value: string | string[] | null\n  treeSegment: Segment\n  type: DynamicParamTypesShort\n} | null\n\ntype AppRenderBaseContext = {\n  staticGenerationStore: StaticGenerationStore\n  requestStore: RequestStore\n  componentMod: AppPageModule\n  renderOpts: RenderOpts\n  parsedRequestHeaders: ParsedRequestHeaders\n}\n\nexport type GenerateFlight = typeof generateDynamicFlightRenderResult\n\nexport type AppRenderContext = AppRenderBaseContext & {\n  getDynamicParamFromSegment: GetDynamicParamFromSegment\n  query: NextParsedUrlQuery\n  isPrefetch: boolean\n  requestTimestamp: number\n  appUsingSizeAdjustment: boolean\n  flightRouterState?: FlightRouterState\n  requestId: string\n  defaultRevalidate: Revalidate\n  pagePath: string\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n  assetPrefix: string\n  flightDataRendererErrorHandler: ErrorHandler\n  serverComponentsErrorHandler: ErrorHandler\n  isNotFoundPath: boolean\n  nonce: string | undefined\n  res: BaseNextResponse\n}\n\ninterface ParseRequestHeadersOptions {\n  readonly isRoutePPREnabled: boolean\n}\n\ninterface ParsedRequestHeaders {\n  /**\n   * Router state provided from the client-side router. Used to handle rendering\n   * from the common layout down. This value will be undefined if the request is\n   * not a client-side navigation request, or if the request is a prefetch\n   * request.\n   */\n  readonly flightRouterState: FlightRouterState | undefined\n  readonly isPrefetchRequest: boolean\n  readonly isHmrRefresh: boolean\n  readonly isRSCRequest: boolean\n  readonly nonce: string | undefined\n}\n\nfunction parseRequestHeaders(\n  headers: IncomingHttpHeaders,\n  options: ParseRequestHeadersOptions\n): ParsedRequestHeaders {\n  const isPrefetchRequest =\n    headers[NEXT_ROUTER_PREFETCH_HEADER.toLowerCase()] !== undefined\n\n  const isHmrRefresh =\n    headers[NEXT_HMR_REFRESH_HEADER.toLowerCase()] !== undefined\n\n  const isRSCRequest = headers[RSC_HEADER.toLowerCase()] !== undefined\n\n  const shouldProvideFlightRouterState =\n    isRSCRequest && (!isPrefetchRequest || !options.isRoutePPREnabled)\n\n  const flightRouterState = shouldProvideFlightRouterState\n    ? parseAndValidateFlightRouterState(\n        headers[NEXT_ROUTER_STATE_TREE_HEADER.toLowerCase()]\n      )\n    : undefined\n\n  const csp =\n    headers['content-security-policy'] ||\n    headers['content-security-policy-report-only']\n\n  const nonce =\n    typeof csp === 'string' ? getScriptNonceFromHeader(csp) : undefined\n\n  return {\n    flightRouterState,\n    isPrefetchRequest,\n    isHmrRefresh,\n    isRSCRequest,\n    nonce,\n  }\n}\n\nfunction createNotFoundLoaderTree(loaderTree: LoaderTree): LoaderTree {\n  // Align the segment with parallel-route-default in next-app-loader\n  return ['', {}, loaderTree[2]]\n}\n\nexport type CreateSegmentPath = (child: FlightSegmentPath) => FlightSegmentPath\n\n/**\n * Returns a function that parses the dynamic segment and return the associated value.\n */\nfunction makeGetDynamicParamFromSegment(\n  params: { [key: string]: any },\n  pagePath: string\n): GetDynamicParamFromSegment {\n  return function getDynamicParamFromSegment(\n    // [slug] / [[slug]] / [...slug]\n    segment: string\n  ) {\n    const segmentParam = getSegmentParam(segment)\n    if (!segmentParam) {\n      return null\n    }\n\n    const key = segmentParam.param\n\n    let value = params[key]\n\n    if (Array.isArray(value)) {\n      value = value.map((i) => encodeURIComponent(i))\n    } else if (typeof value === 'string') {\n      value = encodeURIComponent(value)\n    }\n\n    if (!value) {\n      const isCatchall = segmentParam.type === 'catchall'\n      const isOptionalCatchall = segmentParam.type === 'optional-catchall'\n\n      if (isCatchall || isOptionalCatchall) {\n        const dynamicParamType = dynamicParamTypes[segmentParam.type]\n        // handle the case where an optional catchall does not have a value,\n        // e.g. `/dashboard/[[...slug]]` when requesting `/dashboard`\n        if (isOptionalCatchall) {\n          return {\n            param: key,\n            value: null,\n            type: dynamicParamType,\n            treeSegment: [key, '', dynamicParamType],\n          }\n        }\n\n        // handle the case where a catchall or optional catchall does not have a value,\n        // e.g. `/foo/bar/hello` and `@slot/[...catchall]` or `@slot/[[...catchall]]` is matched\n        value = pagePath\n          .split('/')\n          // remove the first empty string\n          .slice(1)\n          // replace any dynamic params with the actual values\n          .flatMap((pathSegment) => {\n            const param = parseParameter(pathSegment)\n            // if the segment matches a param, return the param value\n            // otherwise, it's a static segment, so just return that\n            return params[param.key] ?? param.key\n          })\n\n        return {\n          param: key,\n          value,\n          type: dynamicParamType,\n          // This value always has to be a string.\n          treeSegment: [key, value.join('/'), dynamicParamType],\n        }\n      }\n    }\n\n    const type = getShortDynamicParamType(segmentParam.type)\n\n    return {\n      param: key,\n      // The value that is passed to user code.\n      value: value,\n      // The value that is rendered in the router tree.\n      treeSegment: [key, Array.isArray(value) ? value.join('/') : value, type],\n      type: type,\n    }\n  }\n}\n\nfunction NonIndex({ ctx }: { ctx: AppRenderContext }) {\n  const is404Page = ctx.pagePath === '/404'\n  const isInvalidStatusCode =\n    typeof ctx.res.statusCode === 'number' && ctx.res.statusCode > 400\n\n  if (is404Page || isInvalidStatusCode) {\n    return <meta name=\"robots\" content=\"noindex\" />\n  }\n  return null\n}\n\n/**\n * This is used by server actions & client-side navigations to generate RSC data from a client-side request.\n * This function is only called on \"dynamic\" requests (ie, there wasn't already a static response).\n * It uses request headers (namely `Next-Router-State-Tree`) to determine where to start rendering.\n */\nasync function generateDynamicRSCPayload(\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n    asNotFound?: boolean\n  }\n): Promise<RSCPayload> {\n  // Flight data that is going to be passed to the browser.\n  // Currently a single item array but in the future multiple patches might be combined in a single request.\n  let flightData: FlightData | null = null\n\n  const {\n    componentMod: { tree: loaderTree, createDynamicallyTrackedSearchParams },\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    requestStore: { url },\n    query,\n    requestId,\n    flightRouterState,\n  } = ctx\n\n  if (!options?.skipFlight) {\n    const preloadCallbacks: PreloadCallbacks = []\n\n    const [MetadataTree, MetadataOutlet] = createMetadataComponents({\n      tree: loaderTree,\n      query,\n      metadataContext: createMetadataContext(url.pathname, ctx.renderOpts),\n      getDynamicParamFromSegment,\n      appUsingSizeAdjustment,\n      createDynamicallyTrackedSearchParams,\n    })\n    flightData = (\n      await walkTreeWithFlightRouterState({\n        ctx,\n        createSegmentPath: (child) => child,\n        loaderTreeToFilter: loaderTree,\n        parentParams: {},\n        flightRouterState,\n        isFirst: true,\n        // For flight, render metadata inside leaf page\n        rscPayloadHead: (\n          <>\n            <NonIndex ctx={ctx} />\n            {/* Adding requestId as react key to make metadata remount for each render */}\n            <MetadataTree key={requestId} />\n          </>\n        ),\n        injectedCSS: new Set(),\n        injectedJS: new Set(),\n        injectedFontPreloadTags: new Set(),\n        rootLayoutIncluded: false,\n        asNotFound: ctx.isNotFoundPath || options?.asNotFound,\n        metadataOutlet: <MetadataOutlet />,\n        preloadCallbacks,\n      })\n    ).map((path) => path.slice(1)) // remove the '' (root) segment\n  }\n\n  // If we have an action result, then this is a server action response.\n  // We can rely on this because `ActionResult` will always be a promise, even if\n  // the result is falsey.\n  if (options?.actionResult) {\n    return {\n      a: options.actionResult,\n      f: flightData,\n      b: ctx.renderOpts.buildId,\n    }\n  }\n\n  // Otherwise, it's a regular RSC response.\n  return {\n    b: ctx.renderOpts.buildId,\n    // Anything besides an action response should have non-null flightData.\n    // We don't ever expect this to be null because `skipFlight` is only\n    // used when invoked by a server action, which is covered above.\n    // The client router can handle an empty string (treating it as an MPA navigation),\n    // so we'll use that as a fallback.\n    f: flightData ?? '',\n  }\n}\n\n/**\n * Produces a RenderResult containing the Flight data for the given request. See\n * `generateDynamicRSCPayload` for information on the contents of the render result.\n */\nasync function generateDynamicFlightRenderResult(\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n    asNotFound?: boolean\n    componentTree?: CacheNodeSeedData\n    preloadCallbacks?: PreloadCallbacks\n  }\n): Promise<RenderResult> {\n  const rscPayload = await generateDynamicRSCPayload(ctx, options)\n\n  // For app dir, use the bundled version of Flight server renderer (renderToReadableStream)\n  // which contains the subset React.\n  const flightReadableStream = ctx.componentMod.renderToReadableStream(\n    rscPayload,\n    ctx.clientReferenceManifest.clientModules,\n    {\n      onError: ctx.flightDataRendererErrorHandler,\n      nonce: ctx.nonce,\n    }\n  )\n\n  return new FlightRenderResult(flightReadableStream, {\n    fetchMetrics: ctx.staticGenerationStore.fetchMetrics,\n  })\n}\n\ntype RenderToStreamResult = {\n  stream: RenderResultResponse\n  err?: unknown\n}\n\ntype RenderToStreamOptions = {\n  /**\n   * This option is used to indicate that the page should be rendered as\n   * if it was not found. When it's enabled, instead of rendering the\n   * page component, it renders the not-found segment.\n   *\n   */\n  asNotFound: boolean\n  tree: LoaderTree\n  formState: any\n}\n\n// This is the data necessary to render <AppRouter /> when no SSR errors are encountered\nasync function getRSCPayload(\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  asNotFound: boolean\n) {\n  const injectedCSS = new Set<string>()\n  const injectedJS = new Set<string>()\n  const injectedFontPreloadTags = new Set<string>()\n  let missingSlots: Set<string> | undefined\n\n  // We only track missing parallel slots in development\n  if (process.env.NODE_ENV === 'development') {\n    missingSlots = new Set<string>()\n  }\n\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: { GlobalError, createDynamicallyTrackedSearchParams },\n    requestStore: { url },\n  } = ctx\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  const [MetadataTree, MetadataOutlet] = createMetadataComponents({\n    tree,\n    errorType: asNotFound ? 'not-found' : undefined,\n    query,\n    metadataContext: createMetadataContext(url.pathname, ctx.renderOpts),\n    getDynamicParamFromSegment: getDynamicParamFromSegment,\n    appUsingSizeAdjustment: appUsingSizeAdjustment,\n    createDynamicallyTrackedSearchParams,\n  })\n\n  const preloadCallbacks: PreloadCallbacks = []\n\n  const seedData = await createComponentTree({\n    ctx,\n    createSegmentPath: (child) => child,\n    loaderTree: tree,\n    parentParams: {},\n    firstItem: true,\n    injectedCSS,\n    injectedJS,\n    injectedFontPreloadTags,\n    rootLayoutIncluded: false,\n    asNotFound: asNotFound,\n    metadataOutlet: <MetadataOutlet />,\n    missingSlots,\n    preloadCallbacks,\n  })\n\n  // When the `vary` response header is present with `Next-URL`, that means there's a chance\n  // it could respond differently if there's an interception route. We provide this information\n  // to `AppRouter` so that it can properly seed the prefetch cache with a prefix, if needed.\n  const varyHeader = ctx.res.getHeader('vary')\n  const couldBeIntercepted =\n    typeof varyHeader === 'string' && varyHeader.includes(NEXT_URL)\n\n  const initialHead = (\n    <>\n      <NonIndex ctx={ctx} />\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={ctx.requestId} />\n    </>\n  )\n\n  return {\n    // See the comment above the `Preloads` component (below) for why this is part of the payload\n    P: <Preloads preloadCallbacks={preloadCallbacks} />,\n    b: ctx.renderOpts.buildId,\n    p: ctx.assetPrefix,\n    c: url.pathname + url.search,\n    i: couldBeIntercepted,\n    f: [[initialTree, seedData, initialHead]],\n    m: missingSlots,\n    G: GlobalError,\n  } satisfies RSCPayload & { P: React.ReactNode }\n}\n\n/**\n * Preload calls (such as `ReactDOM.preloadStyle` and `ReactDOM.preloadFont`) need to be called during rendering\n * in order to create the appropriate preload tags in the DOM, otherwise they're a no-op. Since we invoke\n * renderToReadableStream with a function that returns component props rather than a component itself, we use\n * this component to \"render  \" the preload calls.\n */\nfunction Preloads({ preloadCallbacks }: { preloadCallbacks: Function[] }) {\n  preloadCallbacks.forEach((preloadFn) => preloadFn())\n  return null\n}\n\n// This is the data necessary to render <AppRouter /> when an error state is triggered\nasync function getErrorRSCPayload(\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  errorType: 'not-found' | 'redirect' | undefined\n) {\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: { GlobalError, createDynamicallyTrackedSearchParams },\n    requestStore: { url },\n    requestId,\n  } = ctx\n\n  const [MetadataTree] = createMetadataComponents({\n    tree,\n    metadataContext: createMetadataContext(url.pathname, ctx.renderOpts),\n    errorType,\n    query,\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    createDynamicallyTrackedSearchParams,\n  })\n\n  const initialHead = (\n    <>\n      <NonIndex ctx={ctx} />\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={requestId} />\n      {process.env.NODE_ENV === 'development' && (\n        <meta name=\"next-error\" content=\"not-found\" />\n      )}\n    </>\n  )\n\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  // For metadata notFound error there's no global not found boundary on top\n  // so we create a not found page with AppRouter\n  const initialSeedData: CacheNodeSeedData = [\n    initialTree[0],\n    {},\n    <html id=\"__next_error__\">\n      <head></head>\n      <body></body>\n    </html>,\n    null,\n  ]\n\n  return {\n    b: ctx.renderOpts.buildId,\n    p: ctx.assetPrefix,\n    c: url.pathname + url.search,\n    m: undefined,\n    i: false,\n    f: [[initialTree, initialSeedData, initialHead]],\n    G: GlobalError,\n  } satisfies RSCPayload\n}\n\n// This component must run in an SSR context. It will render the RSC root component\nfunction ReactServerEntrypoint<T>({\n  reactServerStream,\n  preinitScripts,\n  clientReferenceManifest,\n  nonce,\n}: {\n  reactServerStream: BinaryStreamOf<T>\n  preinitScripts: () => void\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>\n  nonce?: string\n}): JSX.Element {\n  preinitScripts()\n  const response = React.use(\n    useFlightStream<InitialRSCPayload>(\n      reactServerStream,\n      clientReferenceManifest,\n      nonce\n    )\n  )\n\n  const initialState = createInitialRouterState({\n    buildId: response.b,\n    initialFlightData: response.f,\n    initialCanonicalUrl: response.c,\n    // location and initialParallelRoutes are not initialized in the SSR render\n    // they are set to an empty map and window.location, respectively during hydration\n    initialParallelRoutes: null!,\n    location: null,\n    couldBeIntercepted: response.i,\n  })\n\n  const actionQueue = createMutableActionQueue(initialState)\n\n  return (\n    <AppRouter\n      actionQueue={actionQueue}\n      globalErrorComponent={response.G}\n      assetPrefix={response.p}\n    />\n  )\n}\n\n// We use a trick with TS Generics to branch streams with a type so we can\n// consume the parsed value of a Readable Stream if it was constructed with a\n// certain object shape. The generic type is not used directly in the type so it\n// requires a disabling of the eslint rule disallowing unused vars\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type BinaryStreamOf<T> = ReadableStream<Uint8Array>\n\nasync function renderToHTMLOrFlightImpl(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  renderOpts: RenderOpts,\n  baseCtx: AppRenderBaseContext,\n  requestEndedState: { ended?: boolean }\n) {\n  const isNotFoundPath = pagePath === '/404'\n\n  // A unique request timestamp used by development to ensure that it's\n  // consistent and won't change during this request. This is important to\n  // avoid that resources can be deduped by React Float if the same resource is\n  // rendered or preloaded multiple times: `<link href=\"a.css?v={Date.now()}\"/>`.\n  const requestTimestamp = Date.now()\n\n  const {\n    buildManifest,\n    subresourceIntegrityManifest,\n    serverActionsManifest,\n    ComponentMod,\n    dev,\n    nextFontManifest,\n    supportsDynamicResponse,\n    serverActions,\n    onInstrumentationRequestError,\n    assetPrefix = '',\n    enableTainting,\n  } = renderOpts\n\n  // We need to expose the bundled `require` API globally for\n  // react-server-dom-webpack. This is a hack until we find a better way.\n  if (ComponentMod.__next_app__) {\n    const instrumented = wrapClientComponentLoader(ComponentMod)\n    // @ts-ignore\n    globalThis.__next_require__ = instrumented.require\n    // @ts-ignore\n    globalThis.__next_chunk_load__ = instrumented.loadChunk\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    // reset isr status at start of request\n    const { pathname } = new URL(req.url || '/', 'http://n')\n    renderOpts.setAppIsrStatus?.(pathname, null)\n  }\n\n  if (\n    // The type check here ensures that `req` is correctly typed, and the\n    // environment variable check provides dead code elimination.\n    process.env.NEXT_RUNTIME !== 'edge' &&\n    isNodeNextRequest(req)\n  ) {\n    req.originalRequest.on('end', () => {\n      const staticGenStore =\n        ComponentMod.staticGenerationAsyncStorage.getStore()\n\n      if (\n        process.env.NODE_ENV === 'development' &&\n        staticGenStore &&\n        renderOpts.setAppIsrStatus\n      ) {\n        // only node can be ISR so we only need to update the status here\n        const { pathname } = new URL(req.url || '/', 'http://n')\n        let { revalidate } = staticGenStore\n        if (typeof revalidate === 'undefined') {\n          revalidate = false\n        }\n        if (revalidate === false || revalidate > 0) {\n          renderOpts.setAppIsrStatus(pathname, revalidate)\n        }\n      }\n\n      requestEndedState.ended = true\n\n      if ('performance' in globalThis) {\n        const metrics = getClientComponentLoaderMetrics({ reset: true })\n        if (metrics) {\n          getTracer()\n            .startSpan(NextNodeServerSpan.clientComponentLoading, {\n              startTime: metrics.clientComponentLoadStart,\n              attributes: {\n                'next.clientComponentLoadCount':\n                  metrics.clientComponentLoadCount,\n              },\n            })\n            .end(\n              metrics.clientComponentLoadStart +\n                metrics.clientComponentLoadTimes\n            )\n        }\n      }\n    })\n  }\n\n  const metadata: AppPageRenderResultMetadata = {}\n\n  const appUsingSizeAdjustment = !!nextFontManifest?.appUsingSizeAdjust\n\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n\n  const serverModuleMap = createServerModuleMap({\n    serverActionsManifest,\n    pageName: renderOpts.page,\n  })\n\n  setReferenceManifestsSingleton({\n    clientReferenceManifest,\n    serverActionsManifest,\n    serverModuleMap,\n  })\n\n  const digestErrorsMap: Map<string, DigestedError> = new Map()\n  const allCapturedErrors: Error[] = []\n  const isNextExport = !!renderOpts.nextExport\n  const { staticGenerationStore, requestStore, parsedRequestHeaders } = baseCtx\n  const { isStaticGeneration } = staticGenerationStore\n\n  /**\n   * Sets the headers on the response object. If we're generating static HTML,\n   * we store the headers in the metadata object as well so that they can be\n   * persisted.\n   */\n  const setHeader = isStaticGeneration\n    ? (name: string, value: string | string[]) => {\n        res.setHeader(name, value)\n\n        metadata.headers ??= {}\n        metadata.headers[name] = res.getHeader(name)\n\n        return res\n      }\n    : res.setHeader.bind(res)\n\n  const isRoutePPREnabled = renderOpts.experimental.isRoutePPREnabled === true\n\n  // When static generation fails during PPR, we log the errors separately. We\n  // intentionally silence the error logger in this case to avoid double\n  // logging.\n  const silenceStaticGenerationErrors = isRoutePPREnabled && isStaticGeneration\n  const isActionRequest = getServerActionRequestMetadata(req).isServerAction\n\n  const errorContext: Pick<\n    RequestErrorContext,\n    'routerKind' | 'routePath' | 'routeType'\n  > = {\n    routerKind: 'App Router',\n    routePath: pagePath,\n    routeType: isActionRequest ? 'action' : 'render',\n  }\n\n  // Including RSC rendering and flight data rendering\n  function getRSCError(err: DigestedError) {\n    const digest = err.digest\n    if (!digestErrorsMap.has(digest)) {\n      digestErrorsMap.set(digest, err)\n    }\n    return err\n  }\n\n  function getSSRError(err: DigestedError) {\n    // For SSR errors, if we have the existing digest in errors map,\n    // we should use the existing error object to avoid duplicate error logs.\n    if (digestErrorsMap.has(err.digest)) {\n      return digestErrorsMap.get(err.digest)!\n    }\n    return err\n  }\n\n  function onFlightDataRenderError(err: DigestedError) {\n    return onInstrumentationRequestError?.(err, req, {\n      ...errorContext,\n      renderSource: 'react-server-components-payload',\n    })\n  }\n\n  function onServerRenderError(err: DigestedError) {\n    const renderSource = digestErrorsMap.has(err.digest)\n      ? 'react-server-components'\n      : 'server-rendering'\n    return onInstrumentationRequestError?.(err, req, {\n      ...errorContext,\n      renderSource,\n    })\n  }\n\n  const serverComponentsErrorHandler = createErrorHandler({\n    dev,\n    isNextExport,\n    // RSC rendering error will report as SSR error\n    onReactStreamRenderError: undefined,\n    getErrorByRenderSource: getRSCError,\n    silenceLogger: silenceStaticGenerationErrors,\n  })\n  const flightDataRendererErrorHandler = createErrorHandler({\n    dev,\n    isNextExport,\n    onReactStreamRenderError: onFlightDataRenderError,\n    getErrorByRenderSource: getRSCError,\n    silenceLogger: silenceStaticGenerationErrors,\n  })\n  const htmlRendererErrorHandler = createErrorHandler({\n    dev,\n    isNextExport,\n    onReactStreamRenderError: onServerRenderError,\n    getErrorByRenderSource: getSSRError,\n    allCapturedErrors,\n    silenceLogger: silenceStaticGenerationErrors,\n  })\n\n  ComponentMod.patchFetch()\n\n  if (renderOpts.experimental.after) {\n    ComponentMod.patchCacheScopeSupportIntoReact()\n  }\n\n  /**\n   * Rules of Static & Dynamic HTML:\n   *\n   *    1.) We must generate static HTML unless the caller explicitly opts\n   *        in to dynamic HTML support.\n   *\n   *    2.) If dynamic HTML support is requested, we must honor that request\n   *        or throw an error. It is the sole responsibility of the caller to\n   *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n   *\n   * These rules help ensure that other existing features like request caching,\n   * coalescing, and ISR continue working as intended.\n   */\n  const generateStaticHTML = supportsDynamicResponse !== true\n\n  // Pull out the hooks/references from the component.\n  const { tree: loaderTree, taintObjectReference } = ComponentMod\n\n  if (enableTainting) {\n    taintObjectReference(\n      'Do not pass process.env to client components since it will leak sensitive data',\n      process.env\n    )\n  }\n\n  staticGenerationStore.fetchMetrics = []\n  metadata.fetchMetrics = staticGenerationStore.fetchMetrics\n\n  // don't modify original query object\n  query = { ...query }\n  stripInternalQueries(query)\n\n  const { flightRouterState, isPrefetchRequest, isRSCRequest, nonce } =\n    parsedRequestHeaders\n\n  /**\n   * The metadata items array created in next-app-loader with all relevant information\n   * that we need to resolve the final metadata.\n   */\n  let requestId: string\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    requestId = crypto.randomUUID()\n  } else {\n    requestId = require('next/dist/compiled/nanoid').nanoid()\n  }\n\n  /**\n   * Dynamic parameters. E.g. when you visit `/dashboard/vercel` which is rendered by `/dashboard/[slug]` the value will be {\"slug\": \"vercel\"}.\n   */\n  const params = renderOpts.params ?? {}\n\n  const getDynamicParamFromSegment = makeGetDynamicParamFromSegment(\n    params,\n    pagePath\n  )\n\n  const ctx: AppRenderContext = {\n    ...baseCtx,\n    getDynamicParamFromSegment,\n    query,\n    isPrefetch: isPrefetchRequest,\n    requestTimestamp,\n    appUsingSizeAdjustment,\n    flightRouterState,\n    requestId,\n    defaultRevalidate: false,\n    pagePath,\n    clientReferenceManifest,\n    assetPrefix,\n    flightDataRendererErrorHandler,\n    serverComponentsErrorHandler,\n    isNotFoundPath,\n    nonce,\n    res,\n  }\n\n  if (isRSCRequest && !isStaticGeneration) {\n    return generateDynamicFlightRenderResult(ctx)\n  }\n\n  const validateRootLayout = dev\n\n  const { HeadManagerContext } =\n    require('../../shared/lib/head-manager-context.shared-runtime') as typeof import('../../shared/lib/head-manager-context.shared-runtime')\n\n  // On each render, create a new `ServerInsertedHTML` context to capture\n  // injected nodes from user code (`useServerInsertedHTML`).\n  const { ServerInsertedHTMLProvider, renderServerInsertedHTML } =\n    createServerInsertedHTML()\n\n  getTracer().getRootSpanAttributes()?.set('next.route', pagePath)\n\n  const renderToStream = getTracer().wrap(\n    AppRenderSpan.getBodyResult,\n    {\n      spanName: `render route (app) ${pagePath}`,\n      attributes: {\n        'next.route': pagePath,\n      },\n    },\n    async ({\n      asNotFound,\n      tree,\n      formState,\n    }: RenderToStreamOptions): Promise<RenderToStreamResult> => {\n      const tracingMetadata = getTracedMetadata(\n        getTracer().getTracePropagationData(),\n        renderOpts.experimental.clientTraceMetadata\n      )\n\n      const polyfills: JSX.IntrinsicElements['script'][] =\n        buildManifest.polyfillFiles\n          .filter(\n            (polyfill) =>\n              polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')\n          )\n          .map((polyfill) => ({\n            src: `${assetPrefix}/_next/${polyfill}${getAssetQueryString(\n              ctx,\n              false\n            )}`,\n            integrity: subresourceIntegrityManifest?.[polyfill],\n            crossOrigin: renderOpts.crossOrigin,\n            noModule: true,\n            nonce,\n          }))\n\n      const [preinitScripts, bootstrapScript] = getRequiredScripts(\n        buildManifest,\n        assetPrefix,\n        renderOpts.crossOrigin,\n        subresourceIntegrityManifest,\n        getAssetQueryString(ctx, true),\n        nonce,\n        renderOpts.page\n      )\n\n      const rscPayload = await getRSCPayload(tree, ctx, asNotFound)\n\n      // We kick off the Flight Request (render) here. It is ok to initiate the render in an arbitrary\n      // place however it is critical that we only construct the Flight Response inside the SSR\n      // render so that directives like preloads are correctly piped through\n      const serverStream = ComponentMod.renderToReadableStream(\n        rscPayload,\n        clientReferenceManifest.clientModules,\n        {\n          onError: serverComponentsErrorHandler,\n          nonce,\n        }\n      )\n\n      // We are going to consume this render both for SSR and for inlining the flight data\n      let [renderStream, dataStream] = serverStream.tee()\n\n      const children = (\n        <HeadManagerContext.Provider\n          value={{\n            appDir: true,\n            nonce,\n          }}\n        >\n          <ServerInsertedHTMLProvider>\n            <ReactServerEntrypoint\n              reactServerStream={renderStream}\n              preinitScripts={preinitScripts}\n              clientReferenceManifest={clientReferenceManifest}\n              nonce={nonce}\n            />\n          </ServerInsertedHTMLProvider>\n        </HeadManagerContext.Provider>\n      )\n\n      const isResume = !!renderOpts.postponed\n\n      const onHeaders =\n        // During prerenders, we want to capture the headers created so we can\n        // persist them to the metadata.\n        staticGenerationStore.prerenderState ||\n        // During static generation and during resumes we don't\n        // ask React to emit headers. For Resume this is just not supported\n        // For static generation we know there will be an entire HTML document\n        // output and so moving from tag to header for preloading can only\n        // server to alter preloading priorities in unwanted ways\n        (!isStaticGeneration && !isResume)\n          ? (headers: Headers) => {\n              headers.forEach((value, key) => {\n                setHeader(key, value)\n              })\n            }\n          : undefined\n\n      const getServerInsertedHTML = makeGetServerInsertedHTML({\n        polyfills,\n        renderServerInsertedHTML,\n        serverCapturedErrors: allCapturedErrors,\n        basePath: renderOpts.basePath,\n        tracingMetadata: tracingMetadata,\n      })\n\n      let postponed: PostponedState | null = null\n\n      // If provided, the postpone state should be parsed as JSON so it can be\n      // provided to React.\n      if (typeof renderOpts.postponed === 'string') {\n        try {\n          postponed = JSON.parse(renderOpts.postponed)\n        } catch {\n          // If we failed to parse the postponed state, we should default to\n          // performing a dynamic data render.\n          postponed = DYNAMIC_DATA\n        }\n      }\n\n      const renderer = createStaticRenderer({\n        isRoutePPREnabled,\n        isStaticGeneration,\n        postponed,\n        streamOptions: {\n          onError: htmlRendererErrorHandler,\n          onHeaders,\n          maxHeadersLength: 600,\n          nonce,\n          // When debugging the static shell, client-side rendering should be\n          // disabled to prevent blanking out the page.\n          bootstrapScripts: renderOpts.isDebugStaticShell\n            ? []\n            : [bootstrapScript],\n          formState,\n        },\n      })\n\n      let flightRenderResult: FlightRenderResult | undefined = undefined\n\n      // Tee the data stream so that we can create a static flight payload.\n      if (isStaticGeneration) {\n        const [original, flightSpy] = dataStream.tee()\n        dataStream = original\n        flightRenderResult = new FlightRenderResult(flightSpy)\n      }\n\n      try {\n        const result = await renderer.render(children)\n\n        const prerenderState = staticGenerationStore.prerenderState\n        if (prerenderState) {\n          /**\n           * When prerendering there are three outcomes to consider\n           *\n           *   Dynamic HTML:      The prerender has dynamic holes (caused by using Next.js Dynamic Rendering APIs)\n           *                      We will need to resume this result when requests are handled and we don't include\n           *                      any server inserted HTML or inlined flight data in the static HTML\n           *\n           *   Dynamic Data:      The prerender has no dynamic holes but dynamic APIs were used. We will not\n           *                      resume this render when requests are handled but we will generate new inlined\n           *                      flight data since it is dynamic and differences may end up reconciling on the client\n           *\n           *   Static:            The prerender has no dynamic holes and no dynamic APIs were used. We statically encode\n           *                      all server inserted HTML and flight data\n           */\n\n          // We need to provide flightData to the page metadata so it can be written to disk\n          metadata.flightData =\n            await flightRenderResult?.toUnchunkedBuffer(true)\n\n          // First we check if we have any dynamic holes in our HTML prerender\n          if (usedDynamicAPIs(prerenderState)) {\n            if (result.postponed != null) {\n              // This is the Dynamic HTML case.\n              metadata.postponed = JSON.stringify(\n                getDynamicHTMLPostponedState(result.postponed)\n              )\n            } else {\n              // This is the Dynamic Data case\n              metadata.postponed = JSON.stringify(\n                getDynamicDataPostponedState()\n              )\n            }\n            // Regardless of whether this is the Dynamic HTML or Dynamic Data case we need to ensure we include\n            // server inserted html in the static response because the html that is part of the prerender may depend on it\n            // It is possible in the set of stream transforms for Dynamic HTML vs Dynamic Data may differ but currently both states\n            // require the same set so we unify the code path here\n            return {\n              stream: await continueDynamicPrerender(result.stream, {\n                getServerInsertedHTML,\n              }),\n            }\n          } else {\n            // We may still be rendering the RSC stream even though the HTML is finished.\n            // We wait for the RSC stream to complete and check again if dynamic was used\n            const [original, flightSpy] = dataStream.tee()\n            dataStream = original\n\n            await flightRenderComplete(flightSpy)\n\n            if (usedDynamicAPIs(prerenderState)) {\n              // This is the same logic above just repeated after ensuring the RSC stream itself has completed\n              if (result.postponed != null) {\n                // This is the Dynamic HTML case.\n                metadata.postponed = JSON.stringify(\n                  getDynamicHTMLPostponedState(result.postponed)\n                )\n              } else {\n                // This is the Dynamic Data case\n                metadata.postponed = JSON.stringify(\n                  getDynamicDataPostponedState()\n                )\n              }\n              // Regardless of whether this is the Dynamic HTML or Dynamic Data case we need to ensure we include\n              // server inserted html in the static response because the html that is part of the prerender may depend on it\n              // It is possible in the set of stream transforms for Dynamic HTML vs Dynamic Data may differ but currently both states\n              // require the same set so we unify the code path here\n              return {\n                stream: await continueDynamicPrerender(result.stream, {\n                  getServerInsertedHTML,\n                }),\n              }\n            } else {\n              // This is the Static case\n              // We still have not used any dynamic APIs. At this point we can produce an entirely static prerender response\n              let renderedHTMLStream = result.stream\n\n              if (staticGenerationStore.forceDynamic) {\n                throw new StaticGenBailoutError(\n                  'Invariant: a Page with `dynamic = \"force-dynamic\"` did not trigger the dynamic pathway. This is a bug in Next.js'\n                )\n              }\n\n              if (result.postponed != null) {\n                // We postponed but nothing dynamic was used. We resume the render now and immediately abort it\n                // so we can set all the postponed boundaries to client render mode before we store the HTML response\n                const resumeRenderer = createStaticRenderer({\n                  isRoutePPREnabled,\n                  isStaticGeneration: false,\n                  postponed: getDynamicHTMLPostponedState(result.postponed),\n                  streamOptions: {\n                    signal: createPostponedAbortSignal(\n                      'static prerender resume'\n                    ),\n                    onError: htmlRendererErrorHandler,\n                    nonce,\n                  },\n                })\n\n                // We don't actually want to render anything so we just pass a stream\n                // that never resolves. The resume call is going to abort immediately anyway\n                const foreverStream = new ReadableStream<Uint8Array>()\n\n                const resumeChildren = (\n                  <HeadManagerContext.Provider\n                    value={{\n                      appDir: true,\n                      nonce,\n                    }}\n                  >\n                    <ServerInsertedHTMLProvider>\n                      <ReactServerEntrypoint\n                        reactServerStream={foreverStream}\n                        preinitScripts={() => {}}\n                        clientReferenceManifest={clientReferenceManifest}\n                        nonce={nonce}\n                      />\n                    </ServerInsertedHTMLProvider>\n                  </HeadManagerContext.Provider>\n                )\n\n                const { stream: resumeStream } =\n                  await resumeRenderer.render(resumeChildren)\n                // First we write everything from the prerender, then we write everything from the aborted resume render\n                renderedHTMLStream = chainStreams(result.stream, resumeStream)\n              }\n\n              return {\n                stream: await continueStaticPrerender(renderedHTMLStream, {\n                  inlinedDataStream: createInlinedDataReadableStream(\n                    dataStream,\n                    nonce,\n                    formState\n                  ),\n                  getServerInsertedHTML,\n                }),\n              }\n            }\n          }\n        } else if (renderOpts.postponed) {\n          // This is a continuation of either an Incomplete or Dynamic Data Prerender.\n          const inlinedDataStream = createInlinedDataReadableStream(\n            dataStream,\n            nonce,\n            formState\n          )\n          if (result.resumed) {\n            // We have new HTML to stream and we also need to include server inserted HTML\n            return {\n              stream: await continueDynamicHTMLResume(result.stream, {\n                inlinedDataStream,\n                getServerInsertedHTML,\n              }),\n            }\n          } else {\n            // We are continuing a Dynamic Data Prerender and simply need to append new inlined flight data\n            return {\n              stream: await continueDynamicDataResume(result.stream, {\n                inlinedDataStream,\n              }),\n            }\n          }\n        } else {\n          // This may be a static render or a dynamic render\n          // @TODO factor this further to make the render types more clearly defined and remove\n          // the deluge of optional params that passed to configure the various behaviors\n\n          // Since this is a potentially static branch, we need to provide flightData to the page metadata so it can be written to disk\n          metadata.flightData =\n            await flightRenderResult?.toUnchunkedBuffer(true)\n\n          return {\n            stream: await continueFizzStream(result.stream, {\n              inlinedDataStream: createInlinedDataReadableStream(\n                dataStream,\n                nonce,\n                formState\n              ),\n              isStaticGeneration: isStaticGeneration || generateStaticHTML,\n              getServerInsertedHTML,\n              serverInsertedHTMLToHead: true,\n              validateRootLayout,\n            }),\n          }\n        }\n      } catch (err) {\n        if (\n          isStaticGenBailoutError(err) ||\n          (typeof err === 'object' &&\n            err !== null &&\n            'message' in err &&\n            typeof err.message === 'string' &&\n            err.message.includes(\n              'https://nextjs.org/docs/advanced-features/static-html-export'\n            ))\n        ) {\n          // Ensure that \"next dev\" prints the red error overlay\n          throw err\n        }\n\n        // If this is a static generation error, we need to throw it so that it\n        // can be handled by the caller if we're in static generation mode.\n        if (isStaticGeneration && isDynamicServerError(err)) {\n          throw err\n        }\n\n        // If a bailout made it to this point, it means it wasn't wrapped inside\n        // a suspense boundary.\n        const shouldBailoutToCSR = isBailoutToCSRError(err)\n        if (shouldBailoutToCSR) {\n          const stack = getStackWithoutErrorMessage(err)\n          error(\n            `${err.reason} should be wrapped in a suspense boundary at page \"${pagePath}\". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\\n${stack}`\n          )\n\n          throw err\n        }\n\n        if (isNotFoundError(err)) {\n          res.statusCode = 404\n        }\n        let hasRedirectError = false\n        if (isRedirectError(err)) {\n          hasRedirectError = true\n          res.statusCode = getRedirectStatusCodeFromError(err)\n          if (err.mutableCookies) {\n            const headers = new Headers()\n\n            // If there were mutable cookies set, we need to set them on the\n            // response.\n            if (appendMutableCookies(headers, err.mutableCookies)) {\n              setHeader('set-cookie', Array.from(headers.values()))\n            }\n          }\n          const redirectUrl = addPathPrefix(\n            getURLFromRedirectError(err),\n            renderOpts.basePath\n          )\n          setHeader('Location', redirectUrl)\n        }\n\n        const is404 = ctx.res.statusCode === 404\n        if (!is404 && !hasRedirectError && !shouldBailoutToCSR) {\n          res.statusCode = 500\n        }\n\n        const errorType = is404\n          ? 'not-found'\n          : hasRedirectError\n            ? 'redirect'\n            : undefined\n\n        const [errorPreinitScripts, errorBootstrapScript] = getRequiredScripts(\n          buildManifest,\n          assetPrefix,\n          renderOpts.crossOrigin,\n          subresourceIntegrityManifest,\n          getAssetQueryString(ctx, false),\n          nonce,\n          '/_not-found/page'\n        )\n\n        const errorRSCPayload = await getErrorRSCPayload(tree, ctx, errorType)\n\n        const errorServerStream = ComponentMod.renderToReadableStream(\n          errorRSCPayload,\n          clientReferenceManifest.clientModules,\n          {\n            onError: serverComponentsErrorHandler,\n            nonce,\n          }\n        )\n\n        try {\n          const fizzStream = await renderToInitialFizzStream({\n            ReactDOMServer: require('react-dom/server.edge'),\n            element: (\n              <ReactServerEntrypoint\n                reactServerStream={errorServerStream}\n                preinitScripts={errorPreinitScripts}\n                clientReferenceManifest={clientReferenceManifest}\n                nonce={nonce}\n              />\n            ),\n            streamOptions: {\n              nonce,\n              // Include hydration scripts in the HTML\n              bootstrapScripts: [errorBootstrapScript],\n              formState,\n            },\n          })\n\n          // Since this is a potentially static branch, we need to provide flightData to the page metadata so it can be written to disk\n          metadata.flightData =\n            await flightRenderResult?.toUnchunkedBuffer(true)\n\n          return {\n            // Returning the error that was thrown so it can be used to handle\n            // the response in the caller.\n            err,\n            stream: await continueFizzStream(fizzStream, {\n              inlinedDataStream: createInlinedDataReadableStream(\n                // This is intentionally using the readable datastream from the\n                // main render rather than the flight data from the error page\n                // render\n                dataStream,\n                nonce,\n                formState\n              ),\n              isStaticGeneration,\n              getServerInsertedHTML: makeGetServerInsertedHTML({\n                polyfills,\n                renderServerInsertedHTML,\n                serverCapturedErrors: [],\n                basePath: renderOpts.basePath,\n                tracingMetadata: tracingMetadata,\n              }),\n              serverInsertedHTMLToHead: true,\n              validateRootLayout,\n            }),\n          }\n        } catch (finalErr: any) {\n          if (\n            process.env.NODE_ENV === 'development' &&\n            isNotFoundError(finalErr)\n          ) {\n            const bailOnNotFound: typeof import('../../client/components/dev-root-not-found-boundary').bailOnNotFound =\n              require('../../client/components/dev-root-not-found-boundary').bailOnNotFound\n            bailOnNotFound()\n          }\n          throw finalErr\n        }\n      }\n    }\n  )\n\n  // For action requests, we handle them differently with a special render result.\n  const actionRequestResult = await handleAction({\n    req,\n    res,\n    ComponentMod,\n    serverModuleMap,\n    generateFlight: generateDynamicFlightRenderResult,\n    staticGenerationStore,\n    requestStore,\n    serverActions,\n    ctx,\n  })\n\n  let formState: null | any = null\n  if (actionRequestResult) {\n    if (actionRequestResult.type === 'not-found') {\n      const notFoundLoaderTree = createNotFoundLoaderTree(loaderTree)\n      const response = await renderToStream({\n        asNotFound: true,\n        tree: notFoundLoaderTree,\n        formState,\n      })\n\n      return new RenderResult(response.stream, { metadata })\n    } else if (actionRequestResult.type === 'done') {\n      if (actionRequestResult.result) {\n        actionRequestResult.result.assignMetadata(metadata)\n        return actionRequestResult.result\n      } else if (actionRequestResult.formState) {\n        formState = actionRequestResult.formState\n      }\n    }\n  }\n\n  const options: RenderResultOptions = {\n    metadata,\n  }\n\n  let response = await renderToStream({\n    asNotFound: isNotFoundPath,\n    tree: loaderTree,\n    formState,\n  })\n\n  // If we have pending revalidates, wait until they are all resolved.\n  if (staticGenerationStore.pendingRevalidates) {\n    options.waitUntil = Promise.all([\n      staticGenerationStore.incrementalCache?.revalidateTag(\n        staticGenerationStore.revalidatedTags || []\n      ),\n      ...Object.values(staticGenerationStore.pendingRevalidates || {}),\n    ])\n  }\n\n  addImplicitTags(staticGenerationStore, requestStore)\n\n  if (staticGenerationStore.tags) {\n    metadata.fetchTags = staticGenerationStore.tags.join(',')\n  }\n\n  // Create the new render result for the response.\n  const result = new RenderResult(response.stream, options)\n\n  // If we aren't performing static generation, we can return the result now.\n  if (!isStaticGeneration) {\n    return result\n  }\n\n  // If this is static generation, we should read this in now rather than\n  // sending it back to be sent to the client.\n  response.stream = await result.toUnchunkedString(true)\n\n  const buildFailingError =\n    digestErrorsMap.size > 0 ? digestErrorsMap.values().next().value : null\n\n  // If we're debugging partial prerendering, print all the dynamic API accesses\n  // that occurred during the render.\n  if (\n    staticGenerationStore.prerenderState &&\n    usedDynamicAPIs(staticGenerationStore.prerenderState) &&\n    staticGenerationStore.prerenderState?.isDebugDynamicAccesses\n  ) {\n    warn('The following dynamic usage was detected:')\n    for (const access of formatDynamicAPIAccesses(\n      staticGenerationStore.prerenderState\n    )) {\n      warn(access)\n    }\n  }\n\n  // If we encountered any unexpected errors during build we fail the\n  // prerendering phase and the build.\n  if (buildFailingError) {\n    throw buildFailingError\n  }\n\n  // If force static is specifically set to false, we should not revalidate\n  // the page.\n  if (staticGenerationStore.forceStatic === false) {\n    staticGenerationStore.revalidate = 0\n  }\n\n  // Copy the revalidation value onto the render result metadata.\n  metadata.revalidate =\n    staticGenerationStore.revalidate ?? ctx.defaultRevalidate\n\n  // provide bailout info for debugging\n  if (metadata.revalidate === 0) {\n    metadata.staticBailoutInfo = {\n      description: staticGenerationStore.dynamicUsageDescription,\n      stack: staticGenerationStore.dynamicUsageStack,\n    }\n  }\n\n  return new RenderResult(response.stream, options)\n}\n\nexport type AppPageRender = (\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  renderOpts: RenderOpts,\n  serverComponentsHmrCache?: ServerComponentsHmrCache\n) => Promise<RenderResult<AppPageRenderResultMetadata>>\n\nexport const renderToHTMLOrFlight: AppPageRender = (\n  req,\n  res,\n  pagePath,\n  query,\n  renderOpts,\n  serverComponentsHmrCache\n) => {\n  if (!req.url) {\n    throw new Error('Invalid URL')\n  }\n\n  const url = parseRelativeUrl(req.url, undefined, false)\n\n  // We read these values from the request object as, in certain cases,\n  // base-server will strip them to opt into different rendering behavior.\n  const parsedRequestHeaders = parseRequestHeaders(req.headers, {\n    isRoutePPREnabled: renderOpts.experimental.isRoutePPREnabled === true,\n  })\n\n  const { isHmrRefresh } = parsedRequestHeaders\n\n  return withRequestStore(\n    renderOpts.ComponentMod.requestAsyncStorage,\n    {\n      req,\n      url,\n      res,\n      renderOpts,\n      isHmrRefresh,\n      serverComponentsHmrCache,\n    },\n    (requestStore) =>\n      withStaticGenerationStore(\n        renderOpts.ComponentMod.staticGenerationAsyncStorage,\n        {\n          page: renderOpts.routeModule.definition.page,\n          renderOpts,\n          requestEndedState: { ended: false },\n        },\n        (staticGenerationStore) =>\n          renderToHTMLOrFlightImpl(\n            req,\n            res,\n            pagePath,\n            query,\n            renderOpts,\n            {\n              requestStore,\n              staticGenerationStore,\n              componentMod: renderOpts.ComponentMod,\n              renderOpts,\n              parsedRequestHeaders,\n            },\n            staticGenerationStore.requestEndedState || {}\n          )\n      )\n  )\n}\n"],"names":["renderToHTMLOrFlight","parseRequestHeaders","headers","options","isPrefetchRequest","NEXT_ROUTER_PREFETCH_HEADER","toLowerCase","undefined","isHmrRefresh","NEXT_HMR_REFRESH_HEADER","isRSCRequest","RSC_HEADER","shouldProvideFlightRouterState","isRoutePPREnabled","flightRouterState","parseAndValidateFlightRouterState","NEXT_ROUTER_STATE_TREE_HEADER","csp","nonce","getScriptNonceFromHeader","createNotFoundLoaderTree","loaderTree","makeGetDynamicParamFromSegment","params","pagePath","getDynamicParamFromSegment","segment","segmentParam","getSegmentParam","key","param","value","Array","isArray","map","i","encodeURIComponent","isCatchall","type","isOptionalCatchall","dynamicParamType","dynamicParamTypes","treeSegment","split","slice","flatMap","pathSegment","parseParameter","join","getShortDynamicParamType","NonIndex","ctx","is404Page","isInvalidStatusCode","res","statusCode","meta","name","content","generateDynamicRSCPayload","flightData","componentMod","tree","createDynamicallyTrackedSearchParams","appUsingSizeAdjustment","requestStore","url","query","requestId","skipFlight","preloadCallbacks","MetadataTree","MetadataOutlet","createMetadataComponents","metadataContext","createMetadataContext","pathname","renderOpts","walkTreeWithFlightRouterState","createSegmentPath","child","loaderTreeToFilter","parentParams","isFirst","rscPayloadHead","injectedCSS","Set","injectedJS","injectedFontPreloadTags","rootLayoutIncluded","asNotFound","isNotFoundPath","metadataOutlet","path","actionResult","a","f","b","buildId","generateDynamicFlightRenderResult","rscPayload","flightReadableStream","renderToReadableStream","clientReferenceManifest","clientModules","onError","flightDataRendererErrorHandler","FlightRenderResult","fetchMetrics","staticGenerationStore","getRSCPayload","missingSlots","process","env","NODE_ENV","GlobalError","initialTree","createFlightRouterStateFromLoaderTree","errorType","seedData","createComponentTree","firstItem","varyHeader","getHeader","couldBeIntercepted","includes","NEXT_URL","initialHead","P","Preloads","p","assetPrefix","c","search","m","G","forEach","preloadFn","getErrorRSCPayload","initialSeedData","html","id","head","body","ReactServerEntrypoint","reactServerStream","preinitScripts","response","React","use","useFlightStream","initialState","createInitialRouterState","initialFlightData","initialCanonicalUrl","initialParallelRoutes","location","actionQueue","createMutableActionQueue","AppRouter","globalErrorComponent","renderToHTMLOrFlightImpl","req","baseCtx","requestEndedState","getTracer","requestTimestamp","Date","now","buildManifest","subresourceIntegrityManifest","serverActionsManifest","ComponentMod","dev","nextFontManifest","supportsDynamicResponse","serverActions","onInstrumentationRequestError","enableTainting","__next_app__","instrumented","wrapClientComponentLoader","globalThis","__next_require__","require","__next_chunk_load__","loadChunk","URL","setAppIsrStatus","NEXT_RUNTIME","isNodeNextRequest","originalRequest","on","staticGenStore","staticGenerationAsyncStorage","getStore","revalidate","ended","metrics","getClientComponentLoaderMetrics","reset","startSpan","NextNodeServerSpan","clientComponentLoading","startTime","clientComponentLoadStart","attributes","clientComponentLoadCount","end","clientComponentLoadTimes","metadata","appUsingSizeAdjust","serverModuleMap","createServerModuleMap","pageName","page","setReferenceManifestsSingleton","digestErrorsMap","Map","allCapturedErrors","isNextExport","nextExport","parsedRequestHeaders","isStaticGeneration","setHeader","bind","experimental","silenceStaticGenerationErrors","isActionRequest","getServerActionRequestMetadata","isServerAction","errorContext","routerKind","routePath","routeType","getRSCError","err","digest","has","set","getSSRError","get","onFlightDataRenderError","renderSource","onServerRenderError","serverComponentsErrorHandler","createErrorHandler","onReactStreamRenderError","getErrorByRenderSource","silenceLogger","htmlRendererErrorHandler","patchFetch","after","patchCacheScopeSupportIntoReact","generateStaticHTML","taintObjectReference","stripInternalQueries","crypto","randomUUID","nanoid","isPrefetch","defaultRevalidate","validateRootLayout","HeadManagerContext","ServerInsertedHTMLProvider","renderServerInsertedHTML","createServerInsertedHTML","getRootSpanAttributes","renderToStream","wrap","AppRenderSpan","getBodyResult","spanName","formState","tracingMetadata","getTracedMetadata","getTracePropagationData","clientTraceMetadata","polyfills","polyfillFiles","filter","polyfill","endsWith","src","getAssetQueryString","integrity","crossOrigin","noModule","bootstrapScript","getRequiredScripts","serverStream","renderStream","dataStream","tee","children","Provider","appDir","isResume","postponed","onHeaders","prerenderState","getServerInsertedHTML","makeGetServerInsertedHTML","serverCapturedErrors","basePath","JSON","parse","DYNAMIC_DATA","renderer","createStaticRenderer","streamOptions","maxHeadersLength","bootstrapScripts","isDebugStaticShell","flightRenderResult","original","flightSpy","result","render","toUnchunkedBuffer","usedDynamicAPIs","stringify","getDynamicHTMLPostponedState","getDynamicDataPostponedState","stream","continueDynamicPrerender","flightRenderComplete","renderedHTMLStream","forceDynamic","StaticGenBailoutError","resumeRenderer","signal","createPostponedAbortSignal","foreverStream","ReadableStream","resumeChildren","resumeStream","chainStreams","continueStaticPrerender","inlinedDataStream","createInlinedDataReadableStream","resumed","continueDynamicHTMLResume","continueDynamicDataResume","continueFizzStream","serverInsertedHTMLToHead","isStaticGenBailoutError","message","isDynamicServerError","shouldBailoutToCSR","isBailoutToCSRError","stack","getStackWithoutErrorMessage","error","reason","isNotFoundError","hasRedirectError","isRedirectError","getRedirectStatusCodeFromError","mutableCookies","Headers","appendMutableCookies","from","values","redirectUrl","addPathPrefix","getURLFromRedirectError","is404","errorPreinitScripts","errorBootstrapScript","errorRSCPayload","errorServerStream","fizzStream","renderToInitialFizzStream","ReactDOMServer","element","finalErr","bailOnNotFound","actionRequestResult","handleAction","generateFlight","notFoundLoaderTree","RenderResult","assignMetadata","pendingRevalidates","waitUntil","Promise","all","incrementalCache","revalidateTag","revalidatedTags","Object","addImplicitTags","tags","fetchTags","toUnchunkedString","buildFailingError","size","next","isDebugDynamicAccesses","warn","access","formatDynamicAPIAccesses","forceStatic","staticBailoutInfo","description","dynamicUsageDescription","dynamicUsageStack","serverComponentsHmrCache","Error","parseRelativeUrl","withRequestStore","requestAsyncStorage","withStaticGenerationStore","routeModule","definition"],"mappings":"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"}