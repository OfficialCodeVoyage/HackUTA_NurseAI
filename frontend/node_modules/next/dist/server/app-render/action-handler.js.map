{"version":3,"sources":["../../../src/server/app-render/action-handler.ts"],"sourcesContent":["import type { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http'\nimport type { SizeLimit } from '../../types'\nimport type { RequestStore } from '../../client/components/request-async-storage.external'\nimport type { AppRenderContext, GenerateFlight } from './app-render'\nimport type { AppPageModule } from '../../server/route-modules/app-page/module'\nimport type { BaseNextRequest, BaseNextResponse } from '../base-http'\n\nimport {\n  RSC_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  ACTION_HEADER,\n} from '../../client/components/app-router-headers'\nimport { isNotFoundError } from '../../client/components/not-found'\nimport {\n  getRedirectStatusCodeFromError,\n  getURLFromRedirectError,\n  isRedirectError,\n} from '../../client/components/redirect'\nimport RenderResult from '../render-result'\nimport type { StaticGenerationStore } from '../../client/components/static-generation-async-storage.external'\nimport { FlightRenderResult } from './flight-render-result'\nimport {\n  filterReqHeaders,\n  actionsForbiddenHeaders,\n} from '../lib/server-ipc/utils'\nimport {\n  appendMutableCookies,\n  getModifiedCookieValues,\n} from '../web/spec-extension/adapters/request-cookies'\n\nimport {\n  NEXT_CACHE_REVALIDATED_TAGS_HEADER,\n  NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER,\n} from '../../lib/constants'\nimport { getServerActionRequestMetadata } from '../lib/server-action-request-meta'\nimport { isCsrfOriginAllowed } from './csrf-protection'\nimport { warn } from '../../build/output/log'\nimport { RequestCookies, ResponseCookies } from '../web/spec-extension/cookies'\nimport { HeadersAdapter } from '../web/spec-extension/adapters/headers'\nimport { fromNodeOutgoingHttpHeaders } from '../web/utils'\nimport { selectWorkerForForwarding } from './action-utils'\nimport { isNodeNextRequest, isWebNextRequest } from '../base-http/helpers'\n\nfunction formDataFromSearchQueryString(query: string) {\n  const searchParams = new URLSearchParams(query)\n  const formData = new FormData()\n  for (const [key, value] of searchParams) {\n    formData.append(key, value)\n  }\n  return formData\n}\n\nfunction nodeHeadersToRecord(\n  headers: IncomingHttpHeaders | OutgoingHttpHeaders\n) {\n  const record: Record<string, string> = {}\n  for (const [key, value] of Object.entries(headers)) {\n    if (value !== undefined) {\n      record[key] = Array.isArray(value) ? value.join(', ') : `${value}`\n    }\n  }\n  return record\n}\n\nfunction getForwardedHeaders(\n  req: BaseNextRequest,\n  res: BaseNextResponse\n): Headers {\n  // Get request headers and cookies\n  const requestHeaders = req.headers\n  const requestCookies = new RequestCookies(HeadersAdapter.from(requestHeaders))\n\n  // Get response headers and cookies\n  const responseHeaders = res.getHeaders()\n  const responseCookies = new ResponseCookies(\n    fromNodeOutgoingHttpHeaders(responseHeaders)\n  )\n\n  // Merge request and response headers\n  const mergedHeaders = filterReqHeaders(\n    {\n      ...nodeHeadersToRecord(requestHeaders),\n      ...nodeHeadersToRecord(responseHeaders),\n    },\n    actionsForbiddenHeaders\n  ) as Record<string, string>\n\n  // Merge cookies into requestCookies, so responseCookies always take precedence\n  // and overwrite/delete those from requestCookies.\n  responseCookies.getAll().forEach((cookie) => {\n    if (typeof cookie.value === 'undefined') {\n      requestCookies.delete(cookie.name)\n    } else {\n      requestCookies.set(cookie)\n    }\n  })\n\n  // Update the 'cookie' header with the merged cookies\n  mergedHeaders['cookie'] = requestCookies.toString()\n\n  // Remove headers that should not be forwarded\n  delete mergedHeaders['transfer-encoding']\n\n  return new Headers(mergedHeaders)\n}\n\nasync function addRevalidationHeader(\n  res: BaseNextResponse,\n  {\n    staticGenerationStore,\n    requestStore,\n  }: {\n    staticGenerationStore: StaticGenerationStore\n    requestStore: RequestStore\n  }\n) {\n  await Promise.all([\n    staticGenerationStore.incrementalCache?.revalidateTag(\n      staticGenerationStore.revalidatedTags || []\n    ),\n    ...Object.values(staticGenerationStore.pendingRevalidates || {}),\n  ])\n\n  // If a tag was revalidated, the client router needs to invalidate all the\n  // client router cache as they may be stale. And if a path was revalidated, the\n  // client needs to invalidate all subtrees below that path.\n\n  // To keep the header size small, we use a tuple of\n  // [[revalidatedPaths], isTagRevalidated ? 1 : 0, isCookieRevalidated ? 1 : 0]\n  // instead of a JSON object.\n\n  // TODO-APP: Currently the prefetch cache doesn't have subtree information,\n  // so we need to invalidate the entire cache if a path was revalidated.\n  // TODO-APP: Currently paths are treated as tags, so the second element of the tuple\n  // is always empty.\n\n  const isTagRevalidated = staticGenerationStore.revalidatedTags?.length ? 1 : 0\n  const isCookieRevalidated = getModifiedCookieValues(\n    requestStore.mutableCookies\n  ).length\n    ? 1\n    : 0\n\n  res.setHeader(\n    'x-action-revalidated',\n    JSON.stringify([[], isTagRevalidated, isCookieRevalidated])\n  )\n}\n\n/**\n * Forwards a server action request to a separate worker. Used when the requested action is not available in the current worker.\n */\nasync function createForwardedActionResponse(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  host: Host,\n  workerPathname: string,\n  basePath: string,\n  staticGenerationStore: StaticGenerationStore\n) {\n  if (!host) {\n    throw new Error(\n      'Invariant: Missing `host` header from a forwarded Server Actions request.'\n    )\n  }\n\n  const forwardedHeaders = getForwardedHeaders(req, res)\n\n  // indicate that this action request was forwarded from another worker\n  // we use this to skip rendering the flight tree so that we don't update the UI\n  // with the response from the forwarded worker\n  forwardedHeaders.set('x-action-forwarded', '1')\n\n  const proto =\n    staticGenerationStore.incrementalCache?.requestProtocol || 'https'\n\n  // For standalone or the serverful mode, use the internal origin directly\n  // other than the host headers from the request.\n  const origin = process.env.__NEXT_PRIVATE_ORIGIN || `${proto}://${host.value}`\n\n  const fetchUrl = new URL(`${origin}${basePath}${workerPathname}`)\n\n  try {\n    let body: BodyInit | ReadableStream<Uint8Array> | undefined\n    if (\n      // The type check here ensures that `req` is correctly typed, and the\n      // environment variable check provides dead code elimination.\n      process.env.NEXT_RUNTIME === 'edge' &&\n      isWebNextRequest(req)\n    ) {\n      if (!req.body) {\n        throw new Error('Invariant: missing request body.')\n      }\n\n      body = req.body\n    } else if (\n      // The type check here ensures that `req` is correctly typed, and the\n      // environment variable check provides dead code elimination.\n      process.env.NEXT_RUNTIME !== 'edge' &&\n      isNodeNextRequest(req)\n    ) {\n      body = req.stream()\n    } else {\n      throw new Error('Invariant: Unknown request type.')\n    }\n\n    // Forward the request to the new worker\n    const response = await fetch(fetchUrl, {\n      method: 'POST',\n      body,\n      duplex: 'half',\n      headers: forwardedHeaders,\n      redirect: 'manual',\n      next: {\n        // @ts-ignore\n        internal: 1,\n      },\n    })\n\n    if (response.headers.get('content-type') === RSC_CONTENT_TYPE_HEADER) {\n      // copy the headers from the redirect response to the response we're sending\n      for (const [key, value] of response.headers) {\n        if (!actionsForbiddenHeaders.includes(key)) {\n          res.setHeader(key, value)\n        }\n      }\n\n      return new FlightRenderResult(response.body!)\n    } else {\n      // Since we aren't consuming the response body, we cancel it to avoid memory leaks\n      response.body?.cancel()\n    }\n  } catch (err) {\n    // we couldn't stream the forwarded response, so we'll just return an empty response\n    console.error(`failed to forward action response`, err)\n  }\n\n  return RenderResult.fromStatic('{}')\n}\n\n/**\n * Returns the parsed redirect URL if we deem that it is hosted by us.\n *\n * We handle both relative and absolute redirect URLs.\n *\n * In case the redirect URL is not relative to the application we return `null`.\n */\nfunction getAppRelativeRedirectUrl(\n  basePath: string,\n  host: Host,\n  redirectUrl: string\n): URL | null {\n  if (redirectUrl.startsWith('/') || redirectUrl.startsWith('./')) {\n    // Make sure we are appending the basePath to relative URLS\n    return new URL(`${basePath}${redirectUrl}`, 'http://n')\n  }\n\n  const parsedRedirectUrl = new URL(redirectUrl)\n\n  if (host?.value !== parsedRedirectUrl.host) {\n    return null\n  }\n\n  // At this point the hosts are the same, just confirm we\n  // are routing to a path underneath the `basePath`\n  return parsedRedirectUrl.pathname.startsWith(basePath)\n    ? parsedRedirectUrl\n    : null\n}\n\nasync function createRedirectRenderResult(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  originalHost: Host,\n  redirectUrl: string,\n  basePath: string,\n  staticGenerationStore: StaticGenerationStore\n) {\n  res.setHeader('x-action-redirect', redirectUrl)\n\n  // If we're redirecting to another route of this Next.js application, we'll\n  // try to stream the response from the other worker path. When that works,\n  // we can save an extra roundtrip and avoid a full page reload.\n  // When the redirect URL starts with a `/` or is to the same host, under the\n  // `basePath` we treat it as an app-relative redirect;\n  const appRelativeRedirectUrl = getAppRelativeRedirectUrl(\n    basePath,\n    originalHost,\n    redirectUrl\n  )\n\n  if (appRelativeRedirectUrl) {\n    if (!originalHost) {\n      throw new Error(\n        'Invariant: Missing `host` header from a forwarded Server Actions request.'\n      )\n    }\n\n    const forwardedHeaders = getForwardedHeaders(req, res)\n    forwardedHeaders.set(RSC_HEADER, '1')\n\n    const proto =\n      staticGenerationStore.incrementalCache?.requestProtocol || 'https'\n\n    // For standalone or the serverful mode, use the internal origin directly\n    // other than the host headers from the request.\n    const origin =\n      process.env.__NEXT_PRIVATE_ORIGIN || `${proto}://${originalHost.value}`\n\n    const fetchUrl = new URL(\n      `${origin}${appRelativeRedirectUrl.pathname}${appRelativeRedirectUrl.search}`\n    )\n\n    if (staticGenerationStore.revalidatedTags) {\n      forwardedHeaders.set(\n        NEXT_CACHE_REVALIDATED_TAGS_HEADER,\n        staticGenerationStore.revalidatedTags.join(',')\n      )\n      forwardedHeaders.set(\n        NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER,\n        staticGenerationStore.incrementalCache?.prerenderManifest?.preview\n          ?.previewModeId || ''\n      )\n    }\n\n    // Ensures that when the path was revalidated we don't return a partial response on redirects\n    forwardedHeaders.delete(NEXT_ROUTER_STATE_TREE_HEADER)\n    // When an action follows a redirect, it's no longer handling an action: it's just a normal RSC request\n    // to the requested URL. We should remove the `next-action` header so that it's not treated as an action\n    forwardedHeaders.delete(ACTION_HEADER)\n\n    try {\n      const response = await fetch(fetchUrl, {\n        method: 'GET',\n        headers: forwardedHeaders,\n        next: {\n          // @ts-ignore\n          internal: 1,\n        },\n      })\n\n      if (response.headers.get('content-type') === RSC_CONTENT_TYPE_HEADER) {\n        // copy the headers from the redirect response to the response we're sending\n        for (const [key, value] of response.headers) {\n          if (!actionsForbiddenHeaders.includes(key)) {\n            res.setHeader(key, value)\n          }\n        }\n\n        return new FlightRenderResult(response.body!)\n      } else {\n        // Since we aren't consuming the response body, we cancel it to avoid memory leaks\n        response.body?.cancel()\n      }\n    } catch (err) {\n      // we couldn't stream the redirect response, so we'll just do a normal redirect\n      console.error(`failed to get redirect response`, err)\n    }\n  }\n\n  return RenderResult.fromStatic('{}')\n}\n\n// Used to compare Host header and Origin header.\nconst enum HostType {\n  XForwardedHost = 'x-forwarded-host',\n  Host = 'host',\n}\ntype Host =\n  | {\n      type: HostType.XForwardedHost\n      value: string\n    }\n  | {\n      type: HostType.Host\n      value: string\n    }\n  | undefined\n\n/**\n * Ensures the value of the header can't create long logs.\n */\nfunction limitUntrustedHeaderValueForLogs(value: string) {\n  return value.length > 100 ? value.slice(0, 100) + '...' : value\n}\n\ntype ServerModuleMap = Record<\n  string,\n  | {\n      id: string\n      chunks: string[]\n      name: string\n    }\n  | undefined\n>\n\ntype ServerActionsConfig = {\n  bodySizeLimit?: SizeLimit\n  allowedOrigins?: string[]\n}\n\nexport async function handleAction({\n  req,\n  res,\n  ComponentMod,\n  serverModuleMap,\n  generateFlight,\n  staticGenerationStore,\n  requestStore,\n  serverActions,\n  ctx,\n}: {\n  req: BaseNextRequest\n  res: BaseNextResponse\n  ComponentMod: AppPageModule\n  serverModuleMap: ServerModuleMap\n  generateFlight: GenerateFlight\n  staticGenerationStore: StaticGenerationStore\n  requestStore: RequestStore\n  serverActions?: ServerActionsConfig\n  ctx: AppRenderContext\n}): Promise<\n  | undefined\n  | {\n      type: 'not-found'\n    }\n  | {\n      type: 'done'\n      result: RenderResult | undefined\n      formState?: any\n    }\n> {\n  const contentType = req.headers['content-type']\n  const { serverActionsManifest, page } = ctx.renderOpts\n\n  const {\n    actionId,\n    isURLEncodedAction,\n    isMultipartAction,\n    isFetchAction,\n    isServerAction,\n  } = getServerActionRequestMetadata(req)\n\n  // If it's not a Server Action, skip handling.\n  if (!isServerAction) {\n    return\n  }\n\n  if (staticGenerationStore.isStaticGeneration) {\n    throw new Error(\n      \"Invariant: server actions can't be handled during static rendering\"\n    )\n  }\n\n  // When running actions the default is no-store, you can still `cache: 'force-cache'`\n  staticGenerationStore.fetchCache = 'default-no-store'\n\n  const originDomain =\n    typeof req.headers['origin'] === 'string'\n      ? new URL(req.headers['origin']).host\n      : undefined\n\n  const forwardedHostHeader = req.headers['x-forwarded-host'] as\n    | string\n    | undefined\n  const hostHeader = req.headers['host']\n  const host: Host = forwardedHostHeader\n    ? {\n        type: HostType.XForwardedHost,\n        value: forwardedHostHeader,\n      }\n    : hostHeader\n      ? {\n          type: HostType.Host,\n          value: hostHeader,\n        }\n      : undefined\n\n  let warning: string | undefined = undefined\n\n  function warnBadServerActionRequest() {\n    if (warning) {\n      warn(warning)\n    }\n  }\n  // This is to prevent CSRF attacks. If `x-forwarded-host` is set, we need to\n  // ensure that the request is coming from the same host.\n  if (!originDomain) {\n    // This might be an old browser that doesn't send `host` header. We ignore\n    // this case.\n    warning = 'Missing `origin` header from a forwarded Server Actions request.'\n  } else if (!host || originDomain !== host.value) {\n    // If the customer sets a list of allowed origins, we'll allow the request.\n    // These are considered safe but might be different from forwarded host set\n    // by the infra (i.e. reverse proxies).\n    if (isCsrfOriginAllowed(originDomain, serverActions?.allowedOrigins)) {\n      // Ignore it\n    } else {\n      if (host) {\n        // This seems to be an CSRF attack. We should not proceed the action.\n        console.error(\n          `\\`${\n            host.type\n          }\\` header with value \\`${limitUntrustedHeaderValueForLogs(\n            host.value\n          )}\\` does not match \\`origin\\` header with value \\`${limitUntrustedHeaderValueForLogs(\n            originDomain\n          )}\\` from a forwarded Server Actions request. Aborting the action.`\n        )\n      } else {\n        // This is an attack. We should not proceed the action.\n        console.error(\n          `\\`x-forwarded-host\\` or \\`host\\` headers are not provided. One of these is needed to compare the \\`origin\\` header from a forwarded Server Actions request. Aborting the action.`\n        )\n      }\n\n      const error = new Error('Invalid Server Actions request.')\n\n      if (isFetchAction) {\n        res.statusCode = 500\n        await Promise.all([\n          staticGenerationStore.incrementalCache?.revalidateTag(\n            staticGenerationStore.revalidatedTags || []\n          ),\n          ...Object.values(staticGenerationStore.pendingRevalidates || {}),\n        ])\n\n        const promise = Promise.reject(error)\n        try {\n          // we need to await the promise to trigger the rejection early\n          // so that it's already handled by the time we call\n          // the RSC runtime. Otherwise, it will throw an unhandled\n          // promise rejection error in the renderer.\n          await promise\n        } catch {\n          // swallow error, it's gonna be handled on the client\n        }\n\n        return {\n          type: 'done',\n          result: await generateFlight(ctx, {\n            actionResult: promise,\n            // if the page was not revalidated, we can skip the rendering the flight tree\n            skipFlight: !staticGenerationStore.pathWasRevalidated,\n          }),\n        }\n      }\n\n      throw error\n    }\n  }\n\n  // ensure we avoid caching server actions unexpectedly\n  res.setHeader(\n    'Cache-Control',\n    'no-cache, no-store, max-age=0, must-revalidate'\n  )\n  let bound = []\n\n  const { actionAsyncStorage } = ComponentMod\n\n  let actionResult: RenderResult | undefined\n  let formState: any | undefined\n  let actionModId: string | undefined\n  const actionWasForwarded = Boolean(req.headers['x-action-forwarded'])\n\n  if (actionId) {\n    const forwardedWorker = selectWorkerForForwarding(\n      actionId,\n      page,\n      serverActionsManifest\n    )\n\n    // If forwardedWorker is truthy, it means there isn't a worker for the action\n    // in the current handler, so we forward the request to a worker that has the action.\n    if (forwardedWorker) {\n      return {\n        type: 'done',\n        result: await createForwardedActionResponse(\n          req,\n          res,\n          host,\n          forwardedWorker,\n          ctx.renderOpts.basePath,\n          staticGenerationStore\n        ),\n      }\n    }\n  }\n\n  try {\n    await actionAsyncStorage.run({ isAction: true }, async () => {\n      if (\n        // The type check here ensures that `req` is correctly typed, and the\n        // environment variable check provides dead code elimination.\n        process.env.NEXT_RUNTIME === 'edge' &&\n        isWebNextRequest(req)\n      ) {\n        // Use react-server-dom-webpack/server.edge\n        const { decodeReply, decodeAction, decodeFormState } = ComponentMod\n        if (!req.body) {\n          throw new Error('invariant: Missing request body.')\n        }\n\n        // TODO: add body limit\n\n        if (isMultipartAction) {\n          // TODO-APP: Add streaming support\n          const formData = await req.request.formData()\n          if (isFetchAction) {\n            bound = await decodeReply(formData, serverModuleMap)\n          } else {\n            const action = await decodeAction(formData, serverModuleMap)\n            if (typeof action === 'function') {\n              // Only warn if it's a server action, otherwise skip for other post requests\n              warnBadServerActionRequest()\n              const actionReturnedState = await action()\n              formState = decodeFormState(actionReturnedState, formData)\n            }\n\n            // Skip the fetch path\n            return\n          }\n        } else {\n          try {\n            actionModId = getActionModIdOrError(actionId, serverModuleMap)\n          } catch (err) {\n            if (actionId !== null) {\n              console.error(err)\n            }\n            return {\n              type: 'not-found',\n            }\n          }\n\n          let actionData = ''\n\n          const reader = req.body.getReader()\n          while (true) {\n            const { done, value } = await reader.read()\n            if (done) {\n              break\n            }\n\n            actionData += new TextDecoder().decode(value)\n          }\n\n          if (isURLEncodedAction) {\n            const formData = formDataFromSearchQueryString(actionData)\n            bound = await decodeReply(formData, serverModuleMap)\n          } else {\n            bound = await decodeReply(actionData, serverModuleMap)\n          }\n        }\n      } else if (\n        // The type check here ensures that `req` is correctly typed, and the\n        // environment variable check provides dead code elimination.\n        process.env.NEXT_RUNTIME !== 'edge' &&\n        isNodeNextRequest(req)\n      ) {\n        // Use react-server-dom-webpack/server.node which supports streaming\n        const {\n          decodeReply,\n          decodeReplyFromBusboy,\n          decodeAction,\n          decodeFormState,\n        } = require(`./react-server.node`)\n\n        const { Transform } =\n          require('node:stream') as typeof import('node:stream')\n\n        const defaultBodySizeLimit = '1 MB'\n        const bodySizeLimit =\n          serverActions?.bodySizeLimit ?? defaultBodySizeLimit\n        const bodySizeLimitBytes =\n          bodySizeLimit !== defaultBodySizeLimit\n            ? (\n                require('next/dist/compiled/bytes') as typeof import('bytes')\n              ).parse(bodySizeLimit)\n            : 1024 * 1024 // 1 MB\n\n        let size = 0\n        const body = req.body.pipe(\n          new Transform({\n            transform(chunk, encoding, callback) {\n              size += Buffer.byteLength(chunk, encoding)\n              if (size > bodySizeLimitBytes) {\n                const { ApiError } = require('../api-utils')\n\n                callback(\n                  new ApiError(\n                    413,\n                    `Body exceeded ${bodySizeLimit} limit.\n                To configure the body size limit for Server Actions, see: https://nextjs.org/docs/app/api-reference/next-config-js/serverActions#bodysizelimit`\n                  )\n                )\n                return\n              }\n\n              callback(null, chunk)\n            },\n          })\n        )\n\n        if (isMultipartAction) {\n          if (isFetchAction) {\n            const busboy = (require('busboy') as typeof import('busboy'))({\n              headers: req.headers,\n              limits: { fieldSize: bodySizeLimitBytes },\n            })\n\n            body.pipe(busboy)\n\n            bound = await decodeReplyFromBusboy(busboy, serverModuleMap)\n          } else {\n            // React doesn't yet publish a busboy version of decodeAction\n            // so we polyfill the parsing of FormData.\n            const fakeRequest = new Request('http://localhost', {\n              method: 'POST',\n              // @ts-expect-error\n              headers: { 'Content-Type': contentType },\n              body: new ReadableStream({\n                start: (controller) => {\n                  body.on('data', (chunk) => {\n                    controller.enqueue(new Uint8Array(chunk))\n                  })\n                  body.on('end', () => {\n                    controller.close()\n                  })\n                  body.on('error', (err) => {\n                    controller.error(err)\n                  })\n                },\n              }),\n              duplex: 'half',\n            })\n            const formData = await fakeRequest.formData()\n            const action = await decodeAction(formData, serverModuleMap)\n            if (typeof action === 'function') {\n              // Only warn if it's a server action, otherwise skip for other post requests\n              warnBadServerActionRequest()\n              const actionReturnedState = await action()\n              formState = await decodeFormState(actionReturnedState, formData)\n            }\n\n            // Skip the fetch path\n            return\n          }\n        } else {\n          try {\n            actionModId = getActionModIdOrError(actionId, serverModuleMap)\n          } catch (err) {\n            if (actionId !== null) {\n              console.error(err)\n            }\n            return {\n              type: 'not-found',\n            }\n          }\n\n          const chunks: Buffer[] = []\n          for await (const chunk of req.body) {\n            chunks.push(Buffer.from(chunk))\n          }\n\n          const actionData = Buffer.concat(chunks).toString('utf-8')\n\n          if (isURLEncodedAction) {\n            const formData = formDataFromSearchQueryString(actionData)\n            bound = await decodeReply(formData, serverModuleMap)\n          } else {\n            bound = await decodeReply(actionData, serverModuleMap)\n          }\n        }\n      } else {\n        throw new Error('Invariant: Unknown request type.')\n      }\n\n      // actions.js\n      // app/page.js\n      //   action worker1\n      //     appRender1\n\n      // app/foo/page.js\n      //   action worker2\n      //     appRender\n\n      // / -> fire action -> POST / -> appRender1 -> modId for the action file\n      // /foo -> fire action -> POST /foo -> appRender2 -> modId for the action file\n\n      try {\n        actionModId =\n          actionModId ?? getActionModIdOrError(actionId, serverModuleMap)\n      } catch (err) {\n        if (actionId !== null) {\n          console.error(err)\n        }\n        return {\n          type: 'not-found',\n        }\n      }\n\n      const actionHandler = (\n        await ComponentMod.__next_app__.require(actionModId)\n      )[\n        // `actionId` must exist if we got here, as otherwise we would have thrown an error above\n        actionId!\n      ]\n\n      const returnVal = await actionHandler.apply(null, bound)\n\n      // For form actions, we need to continue rendering the page.\n      if (isFetchAction) {\n        await addRevalidationHeader(res, {\n          staticGenerationStore,\n          requestStore,\n        })\n\n        actionResult = await generateFlight(ctx, {\n          actionResult: Promise.resolve(returnVal),\n          // if the page was not revalidated, or if the action was forwarded from another worker, we can skip the rendering the flight tree\n          skipFlight:\n            !staticGenerationStore.pathWasRevalidated || actionWasForwarded,\n        })\n      }\n    })\n\n    return {\n      type: 'done',\n      result: actionResult,\n      formState,\n    }\n  } catch (err) {\n    if (isRedirectError(err)) {\n      const redirectUrl = getURLFromRedirectError(err)\n      const statusCode = getRedirectStatusCodeFromError(err)\n\n      await addRevalidationHeader(res, {\n        staticGenerationStore,\n        requestStore,\n      })\n\n      // if it's a fetch action, we'll set the status code for logging/debugging purposes\n      // but we won't set a Location header, as the redirect will be handled by the client router\n      res.statusCode = statusCode\n\n      if (isFetchAction) {\n        return {\n          type: 'done',\n          result: await createRedirectRenderResult(\n            req,\n            res,\n            host,\n            redirectUrl,\n            ctx.renderOpts.basePath,\n            staticGenerationStore\n          ),\n        }\n      }\n\n      if (err.mutableCookies) {\n        const headers = new Headers()\n\n        // If there were mutable cookies set, we need to set them on the\n        // response.\n        if (appendMutableCookies(headers, err.mutableCookies)) {\n          res.setHeader('set-cookie', Array.from(headers.values()))\n        }\n      }\n\n      res.setHeader('Location', redirectUrl)\n      return {\n        type: 'done',\n        result: RenderResult.fromStatic(''),\n      }\n    } else if (isNotFoundError(err)) {\n      res.statusCode = 404\n\n      await addRevalidationHeader(res, {\n        staticGenerationStore,\n        requestStore,\n      })\n\n      if (isFetchAction) {\n        const promise = Promise.reject(err)\n        try {\n          // we need to await the promise to trigger the rejection early\n          // so that it's already handled by the time we call\n          // the RSC runtime. Otherwise, it will throw an unhandled\n          // promise rejection error in the renderer.\n          await promise\n        } catch {\n          // swallow error, it's gonna be handled on the client\n        }\n        return {\n          type: 'done',\n          result: await generateFlight(ctx, {\n            skipFlight: false,\n            actionResult: promise,\n            asNotFound: true,\n          }),\n        }\n      }\n      return {\n        type: 'not-found',\n      }\n    }\n\n    if (isFetchAction) {\n      res.statusCode = 500\n      await Promise.all([\n        staticGenerationStore.incrementalCache?.revalidateTag(\n          staticGenerationStore.revalidatedTags || []\n        ),\n        ...Object.values(staticGenerationStore.pendingRevalidates || {}),\n      ])\n      const promise = Promise.reject(err)\n      try {\n        // we need to await the promise to trigger the rejection early\n        // so that it's already handled by the time we call\n        // the RSC runtime. Otherwise, it will throw an unhandled\n        // promise rejection error in the renderer.\n        await promise\n      } catch {\n        // swallow error, it's gonna be handled on the client\n      }\n\n      return {\n        type: 'done',\n        result: await generateFlight(ctx, {\n          actionResult: promise,\n          // if the page was not revalidated, or if the action was forwarded from another worker, we can skip the rendering the flight tree\n          skipFlight:\n            !staticGenerationStore.pathWasRevalidated || actionWasForwarded,\n        }),\n      }\n    }\n\n    throw err\n  }\n}\n\n/**\n * Attempts to find the module ID for the action from the module map. When this fails, it could be a deployment skew where\n * the action came from a different deployment. It could also simply be an invalid POST request that is not a server action.\n * In either case, we'll throw an error to be handled by the caller.\n */\nfunction getActionModIdOrError(\n  actionId: string | null,\n  serverModuleMap: ServerModuleMap\n): string {\n  try {\n    // if we're missing the action ID header, we can't do any further processing\n    if (!actionId) {\n      throw new Error(\"Invariant: Missing 'next-action' header.\")\n    }\n\n    const actionModId = serverModuleMap?.[actionId]?.id\n\n    if (!actionModId) {\n      throw new Error(\n        \"Invariant: Couldn't find action module ID from module map.\"\n      )\n    }\n\n    return actionModId\n  } catch (err) {\n    throw new Error(\n      `Failed to find Server Action \"${actionId}\". This request might be from an older or newer deployment. ${\n        err instanceof Error ? `Original error: ${err.message}` : ''\n      }`\n    )\n  }\n}\n"],"names":["handleAction","formDataFromSearchQueryString","query","searchParams","URLSearchParams","formData","FormData","key","value","append","nodeHeadersToRecord","headers","record","Object","entries","undefined","Array","isArray","join","getForwardedHeaders","req","res","requestHeaders","requestCookies","RequestCookies","HeadersAdapter","from","responseHeaders","getHeaders","responseCookies","ResponseCookies","fromNodeOutgoingHttpHeaders","mergedHeaders","filterReqHeaders","actionsForbiddenHeaders","getAll","forEach","cookie","delete","name","set","toString","Headers","addRevalidationHeader","staticGenerationStore","requestStore","Promise","all","incrementalCache","revalidateTag","revalidatedTags","values","pendingRevalidates","isTagRevalidated","length","isCookieRevalidated","getModifiedCookieValues","mutableCookies","setHeader","JSON","stringify","createForwardedActionResponse","host","workerPathname","basePath","Error","forwardedHeaders","proto","requestProtocol","origin","process","env","__NEXT_PRIVATE_ORIGIN","fetchUrl","URL","body","NEXT_RUNTIME","isWebNextRequest","isNodeNextRequest","stream","response","fetch","method","duplex","redirect","next","internal","get","RSC_CONTENT_TYPE_HEADER","includes","FlightRenderResult","cancel","err","console","error","RenderResult","fromStatic","getAppRelativeRedirectUrl","redirectUrl","startsWith","parsedRedirectUrl","pathname","createRedirectRenderResult","originalHost","appRelativeRedirectUrl","RSC_HEADER","search","NEXT_CACHE_REVALIDATED_TAGS_HEADER","NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER","prerenderManifest","preview","previewModeId","NEXT_ROUTER_STATE_TREE_HEADER","ACTION_HEADER","limitUntrustedHeaderValueForLogs","slice","ComponentMod","serverModuleMap","generateFlight","serverActions","ctx","contentType","serverActionsManifest","page","renderOpts","actionId","isURLEncodedAction","isMultipartAction","isFetchAction","isServerAction","getServerActionRequestMetadata","isStaticGeneration","fetchCache","originDomain","forwardedHostHeader","hostHeader","type","warning","warnBadServerActionRequest","warn","isCsrfOriginAllowed","allowedOrigins","statusCode","promise","reject","result","actionResult","skipFlight","pathWasRevalidated","bound","actionAsyncStorage","formState","actionModId","actionWasForwarded","Boolean","forwardedWorker","selectWorkerForForwarding","run","isAction","decodeReply","decodeAction","decodeFormState","request","action","actionReturnedState","getActionModIdOrError","actionData","reader","getReader","done","read","TextDecoder","decode","decodeReplyFromBusboy","require","Transform","defaultBodySizeLimit","bodySizeLimit","bodySizeLimitBytes","parse","size","pipe","transform","chunk","encoding","callback","Buffer","byteLength","ApiError","busboy","limits","fieldSize","fakeRequest","Request","ReadableStream","start","controller","on","enqueue","Uint8Array","close","chunks","push","concat","actionHandler","__next_app__","returnVal","apply","resolve","isRedirectError","getURLFromRedirectError","getRedirectStatusCodeFromError","appendMutableCookies","isNotFoundError","asNotFound","id","message"],"mappings":"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"}