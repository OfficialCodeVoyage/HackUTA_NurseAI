{"version":3,"sources":["../../../src/server/app-render/use-flight-response.tsx"],"sourcesContent":["import type { ClientReferenceManifest } from '../../build/webpack/plugins/flight-manifest-plugin'\nimport type { BinaryStreamOf } from './app-render'\n\nimport { htmlEscapeJsonString } from '../htmlescape'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\n\nconst isEdgeRuntime = process.env.NEXT_RUNTIME === 'edge'\n\nconst INLINE_FLIGHT_PAYLOAD_BOOTSTRAP = 0\nconst INLINE_FLIGHT_PAYLOAD_DATA = 1\nconst INLINE_FLIGHT_PAYLOAD_FORM_STATE = 2\nconst INLINE_FLIGHT_PAYLOAD_BINARY = 3\n\nconst flightResponses = new WeakMap<BinaryStreamOf<any>, Promise<any>>()\nconst encoder = new TextEncoder()\n\n/**\n * Render Flight stream.\n * This is only used for renderToHTML, the Flight response does not need additional wrappers.\n */\nexport function useFlightStream<T>(\n  flightStream: BinaryStreamOf<T>,\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>,\n  nonce?: string\n): Promise<T> {\n  const response = flightResponses.get(flightStream)\n\n  if (response) {\n    return response\n  }\n\n  // react-server-dom-webpack/client.edge must not be hoisted for require cache clearing to work correctly\n  let createFromReadableStream\n  // @TODO: investigate why the aliasing for turbopack doesn't pick this up, requiring this runtime check\n  if (process.env.TURBOPACK) {\n    createFromReadableStream =\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-turbopack/client.edge').createFromReadableStream\n  } else {\n    createFromReadableStream =\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge').createFromReadableStream\n  }\n\n  const newResponse = createFromReadableStream(flightStream, {\n    ssrManifest: {\n      moduleLoading: clientReferenceManifest.moduleLoading,\n      moduleMap: isEdgeRuntime\n        ? clientReferenceManifest.edgeSSRModuleMapping\n        : clientReferenceManifest.ssrModuleMapping,\n    },\n    nonce,\n  })\n\n  flightResponses.set(flightStream, newResponse)\n\n  return newResponse\n}\n\n/**\n * There are times when an SSR render may be finished but the RSC render\n * is ongoing and we need to wait for it to complete to make some determination\n * about how to handle the render. This function will drain the RSC reader and\n * resolve when completed. This will generally require teeing the RSC stream and it\n * should be noted that it will cause all the RSC chunks to queue in the underlying\n * ReadableStream however given Flight currently is a push stream that doesn't respond\n * to backpressure this shouldn't change how much memory is maximally consumed\n */\nexport async function flightRenderComplete(\n  flightStream: ReadableStream<Uint8Array>\n): Promise<void> {\n  const flightReader = flightStream.getReader()\n\n  while (true) {\n    const { done } = await flightReader.read()\n    if (done) {\n      return\n    }\n  }\n}\n\n/**\n * Creates a ReadableStream provides inline script tag chunks for writing hydration\n * data to the client outside the React render itself.\n *\n * @param flightStream The RSC render stream\n * @param nonce optionally a nonce used during this particular render\n * @param formState optionally the formState used with this particular render\n * @returns a ReadableStream without the complete property. This signifies a lazy ReadableStream\n */\nexport function createInlinedDataReadableStream(\n  flightStream: ReadableStream<Uint8Array>,\n  nonce: string | undefined,\n  formState: unknown | null\n): ReadableStream<Uint8Array> {\n  const startScriptTag = nonce\n    ? `<script nonce=${JSON.stringify(nonce)}>`\n    : '<script>'\n\n  const flightReader = flightStream.getReader()\n  const decoder = new TextDecoder('utf-8', { fatal: true })\n\n  const readable = new ReadableStream({\n    type: 'bytes',\n    start(controller) {\n      try {\n        writeInitialInstructions(controller, startScriptTag, formState)\n      } catch (error) {\n        // during encoding or enqueueing forward the error downstream\n        controller.error(error)\n      }\n    },\n    async pull(controller) {\n      try {\n        const { done, value } = await flightReader.read()\n\n        if (value) {\n          try {\n            const decodedString = decoder.decode(value, { stream: !done })\n\n            // The chunk cannot be decoded as valid UTF-8 string as it might\n            // have arbitrary binary data.\n            writeFlightDataInstruction(\n              controller,\n              startScriptTag,\n              decodedString\n            )\n          } catch {\n            // The chunk cannot be decoded as valid UTF-8 string.\n            writeFlightDataInstruction(controller, startScriptTag, value)\n          }\n        }\n\n        if (done) {\n          controller.close()\n        }\n      } catch (error) {\n        // There was a problem in the upstream reader or during decoding or enqueuing\n        // forward the error downstream\n        controller.error(error)\n      }\n    },\n  })\n\n  return readable\n}\n\nfunction writeInitialInstructions(\n  controller: ReadableStreamDefaultController,\n  scriptStart: string,\n  formState: unknown | null\n) {\n  controller.enqueue(\n    encoder.encode(\n      `${scriptStart}(self.__next_f=self.__next_f||[]).push(${htmlEscapeJsonString(\n        JSON.stringify([INLINE_FLIGHT_PAYLOAD_BOOTSTRAP])\n      )});self.__next_f.push(${htmlEscapeJsonString(\n        JSON.stringify([INLINE_FLIGHT_PAYLOAD_FORM_STATE, formState])\n      )})</script>`\n    )\n  )\n}\n\nfunction writeFlightDataInstruction(\n  controller: ReadableStreamDefaultController,\n  scriptStart: string,\n  chunk: string | Uint8Array\n) {\n  let htmlInlinedData: string\n\n  if (typeof chunk === 'string') {\n    htmlInlinedData = htmlEscapeJsonString(\n      JSON.stringify([INLINE_FLIGHT_PAYLOAD_DATA, chunk])\n    )\n  } else {\n    // The chunk cannot be embedded as a UTF-8 string in the script tag.\n    // Instead let's inline it in base64.\n    // Credits to Devon Govett (devongovett) for the technique.\n    // https://github.com/devongovett/rsc-html-stream\n    const base64 = btoa(String.fromCodePoint(...chunk))\n    htmlInlinedData = htmlEscapeJsonString(\n      JSON.stringify([INLINE_FLIGHT_PAYLOAD_BINARY, base64])\n    )\n  }\n\n  controller.enqueue(\n    encoder.encode(\n      `${scriptStart}self.__next_f.push(${htmlInlinedData})</script>`\n    )\n  )\n}\n"],"names":["createInlinedDataReadableStream","flightRenderComplete","useFlightStream","isEdgeRuntime","process","env","NEXT_RUNTIME","INLINE_FLIGHT_PAYLOAD_BOOTSTRAP","INLINE_FLIGHT_PAYLOAD_DATA","INLINE_FLIGHT_PAYLOAD_FORM_STATE","INLINE_FLIGHT_PAYLOAD_BINARY","flightResponses","WeakMap","encoder","TextEncoder","flightStream","clientReferenceManifest","nonce","response","get","createFromReadableStream","TURBOPACK","require","newResponse","ssrManifest","moduleLoading","moduleMap","edgeSSRModuleMapping","ssrModuleMapping","set","flightReader","getReader","done","read","formState","startScriptTag","JSON","stringify","decoder","TextDecoder","fatal","readable","ReadableStream","type","start","controller","writeInitialInstructions","error","pull","value","decodedString","decode","stream","writeFlightDataInstruction","close","scriptStart","enqueue","encode","htmlEscapeJsonString","chunk","htmlInlinedData","base64","btoa","String","fromCodePoint"],"mappings":"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"}