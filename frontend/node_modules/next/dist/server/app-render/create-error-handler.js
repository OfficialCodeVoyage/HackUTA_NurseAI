"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createErrorHandler", {
    enumerable: true,
    get: function() {
        return createErrorHandler;
    }
});
const _stringhash = /*#__PURE__*/ _interop_require_default(require("next/dist/compiled/string-hash"));
const _formatservererror = require("../../lib/format-server-error");
const _tracer = require("../lib/trace/tracer");
const _pipereadable = require("../pipe-readable");
const _bailouttocsr = require("../../shared/lib/lazy-dynamic/bailout-to-csr");
const _hooksservercontext = require("../../client/components/hooks-server-context");
const _isnextroutererror = require("../../client/components/is-next-router-error");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function createErrorHandler({ dev, isNextExport, onReactStreamRenderError, getErrorByRenderSource, allCapturedErrors, silenceLogger }) {
    return (err, errorInfo)=>{
        var _err_message;
        // If the error already has a digest, respect the original digest,
        // so it won't get re-generated into another new error.
        if (!err.digest) {
            // TODO-APP: look at using webcrypto instead. Requires a promise to be awaited.
            err.digest = (0, _stringhash.default)(err.message + ((errorInfo == null ? void 0 : errorInfo.stack) || err.stack || '')).toString();
        }
        if (allCapturedErrors) allCapturedErrors.push(err);
        // If the response was closed, we don't need to log the error.
        if ((0, _pipereadable.isAbortError)(err)) return;
        // If we're bailing out to CSR, we don't need to log the error.
        if ((0, _bailouttocsr.isBailoutToCSRError)(err)) return err.digest;
        // If this is a navigation error, we don't need to log the error.
        if ((0, _isnextroutererror.isNextRouterError)(err)) return err.digest;
        err = getErrorByRenderSource(err);
        // If this error occurs, we know that we should be stopping the static
        // render. This is only thrown in static generation when PPR is not enabled,
        // which causes the whole page to be marked as dynamic. We don't need to
        // tell the user about this error, as it's not actionable.
        if ((0, _hooksservercontext.isDynamicServerError)(err)) return err.digest;
        // Format server errors in development to add more helpful error messages
        if (dev) {
            (0, _formatservererror.formatServerError)(err);
        }
        // Don't log the suppressed error during export
        if (!(isNextExport && (err == null ? void 0 : (_err_message = err.message) == null ? void 0 : _err_message.includes('The specific message is omitted in production builds to avoid leaking sensitive details.')))) {
            // Record exception in an active span, if available.
            const span = (0, _tracer.getTracer)().getActiveScopeSpan();
            if (span) {
                span.recordException(err);
                span.setStatus({
                    code: _tracer.SpanStatusCode.ERROR,
                    message: err.message
                });
            }
            if (!silenceLogger) {
                onReactStreamRenderError == null ? void 0 : onReactStreamRenderError(err);
            }
        }
        return err.digest;
    };
}

//# sourceMappingURL=create-error-handler.js.map