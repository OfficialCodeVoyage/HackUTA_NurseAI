{"version":3,"sources":["../../../src/server/app-render/create-error-handler.tsx"],"sourcesContent":["import stringHash from 'next/dist/compiled/string-hash'\nimport { formatServerError } from '../../lib/format-server-error'\nimport { SpanStatusCode, getTracer } from '../lib/trace/tracer'\nimport { isAbortError } from '../pipe-readable'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { isDynamicServerError } from '../../client/components/hooks-server-context'\nimport { isNextRouterError } from '../../client/components/is-next-router-error'\n\ndeclare global {\n  var __next_log_error__: undefined | ((err: unknown) => void)\n}\n\nexport type ErrorHandler = (\n  err: unknown,\n  errorInfo: unknown\n) => string | undefined\n\nexport type DigestedError = Error & { digest: string }\n\n/**\n * Create error handler for renderers.\n * Tolerate dynamic server errors during prerendering so console\n * isn't spammed with unactionable errors\n */\nexport function createErrorHandler({\n  dev,\n  isNextExport,\n  onReactStreamRenderError,\n  getErrorByRenderSource,\n  allCapturedErrors,\n  silenceLogger,\n}: {\n  dev?: boolean\n  isNextExport?: boolean\n  onReactStreamRenderError?: (err: any) => void\n  getErrorByRenderSource: (err: DigestedError) => Error\n  allCapturedErrors?: Error[]\n  silenceLogger?: boolean\n}): ErrorHandler {\n  return (err: any, errorInfo: any) => {\n    // If the error already has a digest, respect the original digest,\n    // so it won't get re-generated into another new error.\n    if (!err.digest) {\n      // TODO-APP: look at using webcrypto instead. Requires a promise to be awaited.\n      err.digest = stringHash(\n        err.message + (errorInfo?.stack || err.stack || '')\n      ).toString()\n    }\n\n    if (allCapturedErrors) allCapturedErrors.push(err)\n\n    // If the response was closed, we don't need to log the error.\n    if (isAbortError(err)) return\n\n    // If we're bailing out to CSR, we don't need to log the error.\n    if (isBailoutToCSRError(err)) return err.digest\n\n    // If this is a navigation error, we don't need to log the error.\n    if (isNextRouterError(err)) return err.digest\n\n    err = getErrorByRenderSource(err)\n\n    // If this error occurs, we know that we should be stopping the static\n    // render. This is only thrown in static generation when PPR is not enabled,\n    // which causes the whole page to be marked as dynamic. We don't need to\n    // tell the user about this error, as it's not actionable.\n    if (isDynamicServerError(err)) return err.digest\n\n    // Format server errors in development to add more helpful error messages\n    if (dev) {\n      formatServerError(err)\n    }\n\n    // Don't log the suppressed error during export\n    if (\n      !(\n        isNextExport &&\n        err?.message?.includes(\n          'The specific message is omitted in production builds to avoid leaking sensitive details.'\n        )\n      )\n    ) {\n      // Record exception in an active span, if available.\n      const span = getTracer().getActiveScopeSpan()\n      if (span) {\n        span.recordException(err)\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: err.message,\n        })\n      }\n\n      if (!silenceLogger) {\n        onReactStreamRenderError?.(err)\n      }\n    }\n\n    return err.digest\n  }\n}\n"],"names":["createErrorHandler","dev","isNextExport","onReactStreamRenderError","getErrorByRenderSource","allCapturedErrors","silenceLogger","err","errorInfo","digest","stringHash","message","stack","toString","push","isAbortError","isBailoutToCSRError","isNextRouterError","isDynamicServerError","formatServerError","includes","span","getTracer","getActiveScopeSpan","recordException","setStatus","code","SpanStatusCode","ERROR"],"mappings":";;;;+BAwBgBA;;;eAAAA;;;mEAxBO;mCACW;wBACQ;8BACb;8BACO;oCACC;mCACH;;;;;;AAkB3B,SAASA,mBAAmB,EACjCC,GAAG,EACHC,YAAY,EACZC,wBAAwB,EACxBC,sBAAsB,EACtBC,iBAAiB,EACjBC,aAAa,EAQd;IACC,OAAO,CAACC,KAAUC;YAsCZD;QArCJ,kEAAkE;QAClE,uDAAuD;QACvD,IAAI,CAACA,IAAIE,MAAM,EAAE;YACf,+EAA+E;YAC/EF,IAAIE,MAAM,GAAGC,IAAAA,mBAAU,EACrBH,IAAII,OAAO,GAAIH,CAAAA,CAAAA,6BAAAA,UAAWI,KAAK,KAAIL,IAAIK,KAAK,IAAI,EAAC,GACjDC,QAAQ;QACZ;QAEA,IAAIR,mBAAmBA,kBAAkBS,IAAI,CAACP;QAE9C,8DAA8D;QAC9D,IAAIQ,IAAAA,0BAAY,EAACR,MAAM;QAEvB,+DAA+D;QAC/D,IAAIS,IAAAA,iCAAmB,EAACT,MAAM,OAAOA,IAAIE,MAAM;QAE/C,iEAAiE;QACjE,IAAIQ,IAAAA,oCAAiB,EAACV,MAAM,OAAOA,IAAIE,MAAM;QAE7CF,MAAMH,uBAAuBG;QAE7B,sEAAsE;QACtE,4EAA4E;QAC5E,wEAAwE;QACxE,0DAA0D;QAC1D,IAAIW,IAAAA,wCAAoB,EAACX,MAAM,OAAOA,IAAIE,MAAM;QAEhD,yEAAyE;QACzE,IAAIR,KAAK;YACPkB,IAAAA,oCAAiB,EAACZ;QACpB;QAEA,+CAA+C;QAC/C,IACE,CACEL,CAAAA,iBACAK,wBAAAA,eAAAA,IAAKI,OAAO,qBAAZJ,aAAca,QAAQ,CACpB,4FACF,GAEF;YACA,oDAAoD;YACpD,MAAMC,OAAOC,IAAAA,iBAAS,IAAGC,kBAAkB;YAC3C,IAAIF,MAAM;gBACRA,KAAKG,eAAe,CAACjB;gBACrBc,KAAKI,SAAS,CAAC;oBACbC,MAAMC,sBAAc,CAACC,KAAK;oBAC1BjB,SAASJ,IAAII,OAAO;gBACtB;YACF;YAEA,IAAI,CAACL,eAAe;gBAClBH,4CAAAA,yBAA2BI;YAC7B;QACF;QAEA,OAAOA,IAAIE,MAAM;IACnB;AACF"}