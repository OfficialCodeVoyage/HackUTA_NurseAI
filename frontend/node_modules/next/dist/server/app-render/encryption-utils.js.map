{"version":3,"sources":["../../../src/server/app-render/encryption-utils.ts"],"sourcesContent":["import type { ActionManifest } from '../../build/webpack/plugins/flight-client-entry-plugin'\nimport type { ClientReferenceManifest } from '../../build/webpack/plugins/flight-manifest-plugin'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\n\n// Keep the key in memory as it should never change during the lifetime of the server in\n// both development and production.\nlet __next_encryption_key_generation_promise: Promise<\n  [CryptoKey, string]\n> | null = null\nlet __next_loaded_action_key: CryptoKey\nlet __next_internal_development_raw_action_key: string\n\nexport function arrayBufferToString(buffer: ArrayBuffer) {\n  const bytes = new Uint8Array(buffer)\n  const len = bytes.byteLength\n\n  // @anonrig: V8 has a limit of 65535 arguments in a function.\n  // For len < 65535, this is faster.\n  // https://github.com/vercel/next.js/pull/56377#pullrequestreview-1656181623\n  if (len < 65535) {\n    return String.fromCharCode.apply(null, bytes as unknown as number[])\n  }\n\n  let binary = ''\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i])\n  }\n  return binary\n}\n\nexport function stringToUint8Array(binary: string) {\n  const len = binary.length\n  const arr = new Uint8Array(len)\n\n  for (let i = 0; i < len; i++) {\n    arr[i] = binary.charCodeAt(i)\n  }\n\n  return arr\n}\n\nexport function encrypt(key: CryptoKey, iv: Uint8Array, data: Uint8Array) {\n  return crypto.subtle.encrypt(\n    {\n      name: 'AES-GCM',\n      iv,\n    },\n    key,\n    data\n  )\n}\n\nexport function decrypt(key: CryptoKey, iv: Uint8Array, data: Uint8Array) {\n  return crypto.subtle.decrypt(\n    {\n      name: 'AES-GCM',\n      iv,\n    },\n    key,\n    data\n  )\n}\n\nexport async function generateEncryptionKeyBase64(dev?: boolean) {\n  // For development, we just keep one key in memory for all actions.\n  // This makes things faster.\n  if (dev) {\n    if (typeof __next_internal_development_raw_action_key !== 'undefined') {\n      return __next_internal_development_raw_action_key\n    }\n  }\n\n  // This avoids it being generated multiple times in parallel.\n  if (!__next_encryption_key_generation_promise) {\n    __next_encryption_key_generation_promise = new Promise(\n      async (resolve, reject) => {\n        try {\n          const key = await crypto.subtle.generateKey(\n            {\n              name: 'AES-GCM',\n              length: 256,\n            },\n            true,\n            ['encrypt', 'decrypt']\n          )\n          const exported = await crypto.subtle.exportKey('raw', key)\n          const b64 = btoa(arrayBufferToString(exported))\n\n          resolve([key, b64])\n        } catch (error) {\n          reject(error)\n        }\n      }\n    )\n  }\n\n  const [key, b64] = await __next_encryption_key_generation_promise\n\n  __next_loaded_action_key = key\n  if (dev) {\n    __next_internal_development_raw_action_key = b64\n  }\n\n  return b64\n}\n\n// This is a global singleton that is used to encode/decode the action bound args from\n// the closure. This can't be using a AsyncLocalStorage as it might happen on the module\n// level. Since the client reference manifest won't be mutated, let's use a global singleton\n// to keep it.\nconst SERVER_ACTION_MANIFESTS_SINGLETON = Symbol.for(\n  'next.server.action-manifests'\n)\n\nexport function setReferenceManifestsSingleton({\n  clientReferenceManifest,\n  serverActionsManifest,\n  serverModuleMap,\n}: {\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n  serverActionsManifest: DeepReadonly<ActionManifest>\n  serverModuleMap: {\n    [id: string]: {\n      id: string\n      chunks: string[]\n      name: string\n    }\n  }\n}) {\n  // @ts-ignore\n  globalThis[SERVER_ACTION_MANIFESTS_SINGLETON] = {\n    clientReferenceManifest,\n    serverActionsManifest,\n    serverModuleMap,\n  }\n}\n\nexport function getServerModuleMap() {\n  const serverActionsManifestSingleton = (globalThis as any)[\n    SERVER_ACTION_MANIFESTS_SINGLETON\n  ] as {\n    serverModuleMap: {\n      [id: string]: {\n        id: string\n        chunks: string[]\n        name: string\n      }\n    }\n  }\n\n  if (!serverActionsManifestSingleton) {\n    throw new Error(\n      'Missing manifest for Server Actions. This is a bug in Next.js'\n    )\n  }\n\n  return serverActionsManifestSingleton.serverModuleMap\n}\n\nexport function getClientReferenceManifestSingleton() {\n  const serverActionsManifestSingleton = (globalThis as any)[\n    SERVER_ACTION_MANIFESTS_SINGLETON\n  ] as {\n    clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n    serverActionsManifest: DeepReadonly<ActionManifest>\n  }\n\n  if (!serverActionsManifestSingleton) {\n    throw new Error(\n      'Missing manifest for Server Actions. This is a bug in Next.js'\n    )\n  }\n\n  return serverActionsManifestSingleton.clientReferenceManifest\n}\n\nexport async function getActionEncryptionKey() {\n  if (__next_loaded_action_key) {\n    return __next_loaded_action_key\n  }\n\n  const serverActionsManifestSingleton = (globalThis as any)[\n    SERVER_ACTION_MANIFESTS_SINGLETON\n  ] as {\n    clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n    serverActionsManifest: DeepReadonly<ActionManifest>\n  }\n\n  if (!serverActionsManifestSingleton) {\n    throw new Error(\n      'Missing manifest for Server Actions. This is a bug in Next.js'\n    )\n  }\n\n  const rawKey =\n    process.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY ||\n    serverActionsManifestSingleton.serverActionsManifest.encryptionKey\n\n  if (rawKey === undefined) {\n    throw new Error('Missing encryption key for Server Actions')\n  }\n\n  __next_loaded_action_key = await crypto.subtle.importKey(\n    'raw',\n    stringToUint8Array(atob(rawKey)),\n    'AES-GCM',\n    true,\n    ['encrypt', 'decrypt']\n  )\n\n  return __next_loaded_action_key\n}\n"],"names":["arrayBufferToString","decrypt","encrypt","generateEncryptionKeyBase64","getActionEncryptionKey","getClientReferenceManifestSingleton","getServerModuleMap","setReferenceManifestsSingleton","stringToUint8Array","__next_encryption_key_generation_promise","__next_loaded_action_key","__next_internal_development_raw_action_key","buffer","bytes","Uint8Array","len","byteLength","String","fromCharCode","apply","binary","i","length","arr","charCodeAt","key","iv","data","crypto","subtle","name","dev","Promise","resolve","reject","generateKey","exported","exportKey","b64","btoa","error","SERVER_ACTION_MANIFESTS_SINGLETON","Symbol","for","clientReferenceManifest","serverActionsManifest","serverModuleMap","globalThis","serverActionsManifestSingleton","Error","rawKey","process","env","NEXT_SERVER_ACTIONS_ENCRYPTION_KEY","encryptionKey","undefined","importKey","atob"],"mappings":"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"}