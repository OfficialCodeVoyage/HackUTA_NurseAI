{"version":3,"sources":["../../../../src/server/route-modules/app-route/module.ts"],"sourcesContent":["import type { NextConfig } from '../../config-shared'\nimport type { AppRouteRouteDefinition } from '../../route-definitions/app-route-route-definition'\nimport type { AppConfig } from '../../../build/utils'\nimport type { NextRequest } from '../../web/spec-extension/request'\nimport type { PrerenderManifest } from '../../../build'\nimport type { NextURL } from '../../web/next-url'\nimport type { DeepReadonly } from '../../../shared/lib/deep-readonly'\n\nimport {\n  RouteModule,\n  type RouteModuleHandleContext,\n  type RouteModuleOptions,\n} from '../route-module'\nimport {\n  withRequestStore,\n  type RequestContext,\n} from '../../async-storage/with-request-store'\nimport {\n  withStaticGenerationStore,\n  type StaticGenerationContext,\n} from '../../async-storage/with-static-generation-store'\nimport {\n  handleBadRequestResponse,\n  handleInternalServerErrorResponse,\n} from '../helpers/response-handlers'\nimport { type HTTP_METHOD, HTTP_METHODS, isHTTPMethod } from '../../web/http'\nimport { addImplicitTags, patchFetch } from '../../lib/patch-fetch'\nimport { getTracer } from '../../lib/trace/tracer'\nimport { AppRouteRouteHandlersSpan } from '../../lib/trace/constants'\nimport { getPathnameFromAbsolutePath } from './helpers/get-pathname-from-absolute-path'\nimport { resolveHandlerError } from './helpers/resolve-handler-error'\nimport * as Log from '../../../build/output/log'\nimport { autoImplementMethods } from './helpers/auto-implement-methods'\nimport {\n  appendMutableCookies,\n  type ReadonlyRequestCookies,\n} from '../../web/spec-extension/adapters/request-cookies'\nimport { HeadersAdapter } from '../../web/spec-extension/adapters/headers'\nimport { RequestCookiesAdapter } from '../../web/spec-extension/adapters/request-cookies'\nimport { parsedUrlQueryToParams } from './helpers/parsed-url-query-to-params'\n\nimport * as serverHooks from '../../../client/components/hooks-server-context'\nimport { DynamicServerError } from '../../../client/components/hooks-server-context'\n\nimport { requestAsyncStorage } from '../../../client/components/request-async-storage.external'\nimport {\n  staticGenerationAsyncStorage,\n  type StaticGenerationStore,\n} from '../../../client/components/static-generation-async-storage.external'\nimport { actionAsyncStorage } from '../../../client/components/action-async-storage.external'\nimport * as sharedModules from './shared-modules'\nimport { getIsServerAction } from '../../lib/server-action-request-meta'\nimport { RequestCookies } from 'next/dist/compiled/@edge-runtime/cookies'\nimport { cleanURL } from './helpers/clean-url'\nimport { StaticGenBailoutError } from '../../../client/components/static-generation-bailout'\nimport { isStaticGenEnabled } from './helpers/is-static-gen-enabled'\nimport { trackDynamicDataAccessed } from '../../app-render/dynamic-rendering'\nimport { ReflectAdapter } from '../../web/spec-extension/adapters/reflect'\nimport type { RenderOptsPartial } from '../../app-render/types'\n\n/**\n * The AppRouteModule is the type of the module exported by the bundled App\n * Route module.\n */\nexport type AppRouteModule = typeof import('../../../build/templates/app-route')\n\n/**\n * AppRouteRouteHandlerContext is the context that is passed to the route\n * handler for app routes.\n */\nexport interface AppRouteRouteHandlerContext extends RouteModuleHandleContext {\n  renderOpts: StaticGenerationContext['renderOpts'] &\n    Pick<RenderOptsPartial, 'onInstrumentationRequestError'>\n  prerenderManifest: DeepReadonly<PrerenderManifest>\n}\n\n/**\n * AppRouteHandlerFnContext is the context that is passed to the handler as the\n * second argument.\n */\ntype AppRouteHandlerFnContext = {\n  params?: Record<string, string | string[]>\n}\n\n/**\n * Handler function for app routes. If a non-Response value is returned, an error\n * will be thrown.\n */\nexport type AppRouteHandlerFn = (\n  /**\n   * Incoming request object.\n   */\n  req: NextRequest,\n  /**\n   * Context properties on the request (including the parameters if this was a\n   * dynamic route).\n   */\n  ctx: AppRouteHandlerFnContext\n) => unknown\n\n/**\n * AppRouteHandlers describes the handlers for app routes that is provided by\n * the userland module.\n */\nexport type AppRouteHandlers = {\n  [method in HTTP_METHOD]?: AppRouteHandlerFn\n}\n\n/**\n * AppRouteUserlandModule is the userland module that is provided for app\n * routes. This contains all the user generated code.\n */\nexport type AppRouteUserlandModule = AppRouteHandlers &\n  Pick<AppConfig, 'dynamic' | 'revalidate' | 'dynamicParams' | 'fetchCache'> & {\n    // TODO: (wyattjoh) create a type for this\n    generateStaticParams?: any\n  }\n\n/**\n * AppRouteRouteModuleOptions is the options that are passed to the app route\n * module from the bundled code.\n */\nexport interface AppRouteRouteModuleOptions\n  extends RouteModuleOptions<AppRouteRouteDefinition, AppRouteUserlandModule> {\n  readonly resolvedPagePath: string\n  readonly nextConfigOutput: NextConfig['output']\n}\n\n/**\n * AppRouteRouteHandler is the handler for app routes.\n */\nexport class AppRouteRouteModule extends RouteModule<\n  AppRouteRouteDefinition,\n  AppRouteUserlandModule\n> {\n  /**\n   * A reference to the request async storage.\n   */\n  public readonly requestAsyncStorage = requestAsyncStorage\n\n  /**\n   * A reference to the static generation async storage.\n   */\n  public readonly staticGenerationAsyncStorage = staticGenerationAsyncStorage\n\n  /**\n   * An interface to call server hooks which interact with the underlying\n   * storage.\n   */\n  public readonly serverHooks = serverHooks\n\n  public static readonly sharedModules = sharedModules\n\n  /**\n   * A reference to the mutation related async storage, such as mutations of\n   * cookies.\n   */\n  public readonly actionAsyncStorage = actionAsyncStorage\n\n  public readonly resolvedPagePath: string\n  public readonly nextConfigOutput: NextConfig['output'] | undefined\n\n  private readonly methods: Record<HTTP_METHOD, AppRouteHandlerFn>\n  private readonly hasNonStaticMethods: boolean\n  private readonly dynamic: AppRouteUserlandModule['dynamic']\n\n  constructor({\n    userland,\n    definition,\n    resolvedPagePath,\n    nextConfigOutput,\n  }: AppRouteRouteModuleOptions) {\n    super({ userland, definition })\n\n    this.resolvedPagePath = resolvedPagePath\n    this.nextConfigOutput = nextConfigOutput\n\n    // Automatically implement some methods if they aren't implemented by the\n    // userland module.\n    this.methods = autoImplementMethods(userland)\n\n    // Get the non-static methods for this route.\n    this.hasNonStaticMethods = hasNonStaticMethods(userland)\n\n    // Get the dynamic property from the userland module.\n    this.dynamic = this.userland.dynamic\n    if (this.nextConfigOutput === 'export') {\n      if (this.dynamic === 'force-dynamic') {\n        throw new Error(\n          `export const dynamic = \"force-dynamic\" on page \"${definition.pathname}\" cannot be used with \"output: export\". See more info here: https://nextjs.org/docs/advanced-features/static-html-export`\n        )\n      } else if (!isStaticGenEnabled(this.userland) && this.userland['GET']) {\n        throw new Error(\n          `export const dynamic = \"force-static\"/export const revalidate not configured on route \"${definition.pathname}\" with \"output: export\". See more info here: https://nextjs.org/docs/advanced-features/static-html-export`\n        )\n      } else {\n        this.dynamic = 'error'\n      }\n    }\n\n    // We only warn in development after here, so return if we're not in\n    // development.\n    if (process.env.NODE_ENV === 'development') {\n      // Print error in development if the exported handlers are in lowercase, only\n      // uppercase handlers are supported.\n      const lowercased = HTTP_METHODS.map((method) => method.toLowerCase())\n      for (const method of lowercased) {\n        if (method in this.userland) {\n          Log.error(\n            `Detected lowercase method '${method}' in '${\n              this.resolvedPagePath\n            }'. Export the uppercase '${method.toUpperCase()}' method name to fix this error.`\n          )\n        }\n      }\n\n      // Print error if the module exports a default handler, they must use named\n      // exports for each HTTP method.\n      if ('default' in this.userland) {\n        Log.error(\n          `Detected default export in '${this.resolvedPagePath}'. Export a named export for each HTTP method instead.`\n        )\n      }\n\n      // If there is no methods exported by this module, then return a not found\n      // response.\n      if (!HTTP_METHODS.some((method) => method in this.userland)) {\n        Log.error(\n          `No HTTP methods exported in '${this.resolvedPagePath}'. Export a named export for each HTTP method.`\n        )\n      }\n    }\n  }\n\n  /**\n   * Resolves the handler function for the given method.\n   *\n   * @param method the requested method\n   * @returns the handler function for the given method\n   */\n  private resolve(method: string): AppRouteHandlerFn {\n    // Ensure that the requested method is a valid method (to prevent RCE's).\n    if (!isHTTPMethod(method)) return handleBadRequestResponse\n\n    // Return the handler.\n    return this.methods[method]\n  }\n\n  /**\n   * Executes the route handler.\n   */\n  private async execute(\n    rawRequest: NextRequest,\n    context: AppRouteRouteHandlerContext\n  ): Promise<Response> {\n    // Get the handler function for the given method.\n    const handler = this.resolve(rawRequest.method)\n\n    // Get the context for the request.\n    const requestContext: RequestContext = {\n      req: rawRequest,\n      url: rawRequest.nextUrl,\n      renderOpts: {\n        previewProps: context.prerenderManifest.preview,\n        waitUntil: context.renderOpts.waitUntil,\n        onClose: context.renderOpts.onClose,\n        experimental: context.renderOpts.experimental,\n      },\n    }\n\n    // Get the context for the static generation.\n    const staticGenerationContext: StaticGenerationContext = {\n      page: this.definition.page,\n      renderOpts: context.renderOpts,\n    }\n\n    // Add the fetchCache option to the renderOpts.\n    staticGenerationContext.renderOpts.fetchCache = this.userland.fetchCache\n\n    // Run the handler with the request AsyncLocalStorage to inject the helper\n    // support. We set this to `unknown` because the type is not known until\n    // runtime when we do a instanceof check below.\n    const response: unknown = await this.actionAsyncStorage.run(\n      {\n        isAppRoute: true,\n        isAction: getIsServerAction(rawRequest),\n      },\n      () =>\n        withRequestStore(\n          this.requestAsyncStorage,\n          requestContext,\n          (requestStore) =>\n            withStaticGenerationStore(\n              this.staticGenerationAsyncStorage,\n              staticGenerationContext,\n              (staticGenerationStore) => {\n                // Check to see if we should bail out of static generation based on\n                // having non-static methods.\n                const isStaticGeneration =\n                  staticGenerationStore.isStaticGeneration\n\n                if (this.hasNonStaticMethods) {\n                  if (isStaticGeneration) {\n                    const err = new DynamicServerError(\n                      'Route is configured with methods that cannot be statically generated.'\n                    )\n                    staticGenerationStore.dynamicUsageDescription = err.message\n                    staticGenerationStore.dynamicUsageStack = err.stack\n                    throw err\n                  } else {\n                    // We aren't statically generating but since this route has non-static methods\n                    // we still need to set the default caching to no cache by setting revalidate = 0\n                    // @TODO this type of logic is too indirect. we need to refactor how we set fetch cache\n                    // behavior. Prior to the most recent refactor this logic was buried deep in staticGenerationBailout\n                    // so it is possible it was unintentional and then tests were written to assert the current behavior\n                    staticGenerationStore.revalidate = 0\n                  }\n                }\n\n                // We assume we can pass the original request through however we may end up\n                // proxying it in certain circumstances based on execution type and configuration\n                let request = rawRequest\n\n                // Update the static generation store based on the dynamic property.\n                switch (this.dynamic) {\n                  case 'force-dynamic': {\n                    // Routes of generated paths should be dynamic\n                    staticGenerationStore.forceDynamic = true\n                    break\n                  }\n                  case 'force-static':\n                    // The dynamic property is set to force-static, so we should\n                    // force the page to be static.\n                    staticGenerationStore.forceStatic = true\n                    // We also Proxy the request to replace dynamic data on the request\n                    // with empty stubs to allow for safely executing as static\n                    request = new Proxy(rawRequest, forceStaticRequestHandlers)\n                    break\n                  case 'error':\n                    // The dynamic property is set to error, so we should throw an\n                    // error if the page is being statically generated.\n                    staticGenerationStore.dynamicShouldError = true\n                    if (isStaticGeneration)\n                      request = new Proxy(\n                        rawRequest,\n                        requireStaticRequestHandlers\n                      )\n                    break\n                  default:\n                    // We proxy `NextRequest` to track dynamic access, and potentially bail out of static generation\n                    request = proxyNextRequest(\n                      rawRequest,\n                      staticGenerationStore\n                    )\n                }\n\n                // If the static generation store does not have a revalidate value\n                // set, then we should set it the revalidate value from the userland\n                // module or default to false.\n                staticGenerationStore.revalidate ??=\n                  this.userland.revalidate ?? false\n\n                // TODO: propagate this pathname from route matcher\n                const route = getPathnameFromAbsolutePath(this.resolvedPagePath)\n                getTracer().getRootSpanAttributes()?.set('next.route', route)\n                return getTracer().trace(\n                  AppRouteRouteHandlersSpan.runHandler,\n                  {\n                    spanName: `executing api route (app) ${route}`,\n                    attributes: {\n                      'next.route': route,\n                    },\n                  },\n                  async () => {\n                    // Patch the global fetch.\n                    patchFetch({\n                      staticGenerationAsyncStorage:\n                        this.staticGenerationAsyncStorage,\n                      requestAsyncStorage: this.requestAsyncStorage,\n                    })\n                    const res = await handler(request, {\n                      params: context.params\n                        ? parsedUrlQueryToParams(context.params)\n                        : undefined,\n                    })\n                    if (!(res instanceof Response)) {\n                      throw new Error(\n                        `No response is returned from route handler '${this.resolvedPagePath}'. Ensure you return a \\`Response\\` or a \\`NextResponse\\` in all branches of your handler.`\n                      )\n                    }\n                    context.renderOpts.fetchMetrics =\n                      staticGenerationStore.fetchMetrics\n\n                    context.renderOpts.pendingWaitUntil = Promise.all([\n                      staticGenerationStore.incrementalCache?.revalidateTag(\n                        staticGenerationStore.revalidatedTags || []\n                      ),\n                      ...Object.values(\n                        staticGenerationStore.pendingRevalidates || {}\n                      ),\n                    ])\n\n                    addImplicitTags(staticGenerationStore, requestStore)\n                    ;(context.renderOpts as any).fetchTags =\n                      staticGenerationStore.tags?.join(',')\n\n                    // It's possible cookies were set in the handler, so we need\n                    // to merge the modified cookies and the returned response\n                    // here.\n                    if (requestStore && requestStore.mutableCookies) {\n                      const headers = new Headers(res.headers)\n                      if (\n                        appendMutableCookies(\n                          headers,\n                          requestStore.mutableCookies\n                        )\n                      ) {\n                        return new Response(res.body, {\n                          status: res.status,\n                          statusText: res.statusText,\n                          headers,\n                        })\n                      }\n                    }\n\n                    return res\n                  }\n                )\n              }\n            )\n        )\n    )\n\n    // If the handler did't return a valid response, then return the internal\n    // error response.\n    if (!(response instanceof Response)) {\n      // TODO: validate the correct handling behavior, maybe log something?\n      return handleInternalServerErrorResponse()\n    }\n\n    if (response.headers.has('x-middleware-rewrite')) {\n      // TODO: move this error into the `NextResponse.rewrite()` function.\n      // TODO-APP: re-enable support below when we can proxy these type of requests\n      throw new Error(\n        'NextResponse.rewrite() was used in a app route handler, this is not currently supported. Please remove the invocation to continue.'\n      )\n\n      // // This is a rewrite created via `NextResponse.rewrite()`. We need to send\n      // // the response up so it can be handled by the backing server.\n\n      // // If the server is running in minimal mode, we just want to forward the\n      // // response (including the rewrite headers) upstream so it can perform the\n      // // redirect for us, otherwise return with the special condition so this\n      // // server can perform a rewrite.\n      // if (!minimalMode) {\n      //   return { response, condition: 'rewrite' }\n      // }\n\n      // // Relativize the url so it's relative to the base url. This is so the\n      // // outgoing headers upstream can be relative.\n      // const rewritePath = response.headers.get('x-middleware-rewrite')!\n      // const initUrl = getRequestMeta(req, 'initURL')!\n      // const { pathname } = parseUrl(relativizeURL(rewritePath, initUrl))\n      // response.headers.set('x-middleware-rewrite', pathname)\n    }\n\n    if (response.headers.get('x-middleware-next') === '1') {\n      // TODO: move this error into the `NextResponse.next()` function.\n      throw new Error(\n        'NextResponse.next() was used in a app route handler, this is not supported. See here for more info: https://nextjs.org/docs/messages/next-response-next-in-app-route-handler'\n      )\n    }\n\n    return response\n  }\n\n  public async handle(\n    request: NextRequest,\n    context: AppRouteRouteHandlerContext\n  ): Promise<Response> {\n    try {\n      // Execute the route to get the response.\n      const response = await this.execute(request, context)\n\n      // The response was handled, return it.\n      return response\n    } catch (err) {\n      // Try to resolve the error to a response, else throw it again.\n      const response = resolveHandlerError(err)\n      if (!response) throw err\n\n      // The response was resolved, return it.\n      return response\n    }\n  }\n}\n\nexport default AppRouteRouteModule\n\n/**\n * Gets all the method names for handlers that are not considered static.\n *\n * @param handlers the handlers from the userland module\n * @returns the method names that are not considered static or false if all\n *          methods are static\n */\nexport function hasNonStaticMethods(handlers: AppRouteHandlers): boolean {\n  if (\n    // Order these by how common they are to be used\n    handlers.POST ||\n    handlers.POST ||\n    handlers.DELETE ||\n    handlers.PATCH ||\n    handlers.OPTIONS\n  ) {\n    return true\n  }\n  return false\n}\n\n// These symbols will be used to stash cached values on Proxied requests without requiring\n// additional closures or storage such as WeakMaps.\nconst nextURLSymbol = Symbol('nextUrl')\nconst requestCloneSymbol = Symbol('clone')\nconst urlCloneSymbol = Symbol('clone')\nconst searchParamsSymbol = Symbol('searchParams')\nconst hrefSymbol = Symbol('href')\nconst toStringSymbol = Symbol('toString')\nconst headersSymbol = Symbol('headers')\nconst cookiesSymbol = Symbol('cookies')\n\ntype RequestSymbolTarget = {\n  [headersSymbol]?: Headers\n  [cookiesSymbol]?: RequestCookies | ReadonlyRequestCookies\n  [nextURLSymbol]?: NextURL\n  [requestCloneSymbol]?: () => NextRequest\n}\n\ntype UrlSymbolTarget = {\n  [searchParamsSymbol]?: URLSearchParams\n  [hrefSymbol]?: string\n  [toStringSymbol]?: () => string\n  [urlCloneSymbol]?: () => NextURL\n}\n\n/**\n * The general technique with these proxy handlers is to prioritize keeping them static\n * by stashing computed values on the Proxy itself. This is safe because the Proxy is\n * inaccessible to the consumer since all operations are forwarded\n */\nconst forceStaticRequestHandlers = {\n  get(\n    target: NextRequest & RequestSymbolTarget,\n    prop: string | symbol,\n    receiver: any\n  ): unknown {\n    switch (prop) {\n      case 'headers':\n        return (\n          target[headersSymbol] ||\n          (target[headersSymbol] = HeadersAdapter.seal(new Headers({})))\n        )\n      case 'cookies':\n        return (\n          target[cookiesSymbol] ||\n          (target[cookiesSymbol] = RequestCookiesAdapter.seal(\n            new RequestCookies(new Headers({}))\n          ))\n        )\n      case 'nextUrl':\n        return (\n          target[nextURLSymbol] ||\n          (target[nextURLSymbol] = new Proxy(\n            target.nextUrl,\n            forceStaticNextUrlHandlers\n          ))\n        )\n      case 'url':\n        // we don't need to separately cache this we can just read the nextUrl\n        // and return the href since we know it will have been stripped of any\n        // dynamic parts. We access via the receiver to trigger the get trap\n        return receiver.nextUrl.href\n      case 'geo':\n      case 'ip':\n        return undefined\n      case 'clone':\n        return (\n          target[requestCloneSymbol] ||\n          (target[requestCloneSymbol] = () =>\n            new Proxy(\n              // This is vaguely unsafe but it's required since NextRequest does not implement\n              // clone. The reason we might expect this to work in this context is the Proxy will\n              // respond with static-amenable values anyway somewhat restoring the interface.\n              // @TODO we need to rethink NextRequest and NextURL because they are not sufficientlly\n              // sophisticated to adequately represent themselves in all contexts. A better approach is\n              // to probably embed the static generation logic into the class itself removing the need\n              // for any kind of proxying\n              target.clone() as NextRequest,\n              forceStaticRequestHandlers\n            ))\n        )\n      default:\n        return ReflectAdapter.get(target, prop, receiver)\n    }\n  },\n  // We don't need to proxy set because all the properties we proxy are ready only\n  // and will be ignored\n}\n\nconst forceStaticNextUrlHandlers = {\n  get(\n    target: NextURL & UrlSymbolTarget,\n    prop: string | symbol,\n    receiver: any\n  ): unknown {\n    switch (prop) {\n      // URL properties\n      case 'search':\n        return ''\n      case 'searchParams':\n        return (\n          target[searchParamsSymbol] ||\n          (target[searchParamsSymbol] = new URLSearchParams())\n        )\n      case 'href':\n        return (\n          target[hrefSymbol] ||\n          (target[hrefSymbol] = cleanURL(target.href).href)\n        )\n      case 'toJSON':\n      case 'toString':\n        return (\n          target[toStringSymbol] ||\n          (target[toStringSymbol] = () => receiver.href)\n        )\n\n      // NextUrl properties\n      case 'url':\n        // Currently nextURL does not expose url but our Docs indicate that it is an available property\n        // I am forcing this to undefined here to avoid accidentally exposing a dynamic value later if\n        // the underlying nextURL ends up adding this property\n        return undefined\n      case 'clone':\n        return (\n          target[urlCloneSymbol] ||\n          (target[urlCloneSymbol] = () =>\n            new Proxy(target.clone(), forceStaticNextUrlHandlers))\n        )\n      default:\n        return ReflectAdapter.get(target, prop, receiver)\n    }\n  },\n}\n\nfunction proxyNextRequest(\n  request: NextRequest,\n  staticGenerationStore: StaticGenerationStore\n) {\n  const nextUrlHandlers = {\n    get(\n      target: NextURL & UrlSymbolTarget,\n      prop: string | symbol,\n      receiver: any\n    ): unknown {\n      switch (prop) {\n        case 'search':\n        case 'searchParams':\n        case 'url':\n        case 'href':\n        case 'toJSON':\n        case 'toString':\n        case 'origin': {\n          trackDynamicDataAccessed(staticGenerationStore, `nextUrl.${prop}`)\n          return ReflectAdapter.get(target, prop, receiver)\n        }\n        case 'clone':\n          return (\n            target[urlCloneSymbol] ||\n            (target[urlCloneSymbol] = () =>\n              new Proxy(target.clone(), nextUrlHandlers))\n          )\n        default:\n          return ReflectAdapter.get(target, prop, receiver)\n      }\n    },\n  }\n\n  const nextRequestHandlers = {\n    get(\n      target: NextRequest & RequestSymbolTarget,\n      prop: string | symbol\n    ): unknown {\n      switch (prop) {\n        case 'nextUrl':\n          return (\n            target[nextURLSymbol] ||\n            (target[nextURLSymbol] = new Proxy(target.nextUrl, nextUrlHandlers))\n          )\n        case 'headers':\n        case 'cookies':\n        case 'url':\n        case 'body':\n        case 'blob':\n        case 'json':\n        case 'text':\n        case 'arrayBuffer':\n        case 'formData': {\n          trackDynamicDataAccessed(staticGenerationStore, `request.${prop}`)\n          // The receiver arg is intentionally the same as the target to fix an issue with\n          // edge runtime, where attempting to access internal slots with the wrong `this` context\n          // results in an error.\n          return ReflectAdapter.get(target, prop, target)\n        }\n        case 'clone':\n          return (\n            target[requestCloneSymbol] ||\n            (target[requestCloneSymbol] = () =>\n              new Proxy(\n                // This is vaguely unsafe but it's required since NextRequest does not implement\n                // clone. The reason we might expect this to work in this context is the Proxy will\n                // respond with static-amenable values anyway somewhat restoring the interface.\n                // @TODO we need to rethink NextRequest and NextURL because they are not sufficientlly\n                // sophisticated to adequately represent themselves in all contexts. A better approach is\n                // to probably embed the static generation logic into the class itself removing the need\n                // for any kind of proxying\n                target.clone() as NextRequest,\n                nextRequestHandlers\n              ))\n          )\n        default:\n          // The receiver arg is intentionally the same as the target to fix an issue with\n          // edge runtime, where attempting to access internal slots with the wrong `this` context\n          // results in an error.\n          return ReflectAdapter.get(target, prop, target)\n      }\n    },\n    // We don't need to proxy set because all the properties we proxy are ready only\n    // and will be ignored\n  }\n\n  return new Proxy(request, nextRequestHandlers)\n}\n\nconst requireStaticRequestHandlers = {\n  get(\n    target: NextRequest & RequestSymbolTarget,\n    prop: string | symbol,\n    receiver: any\n  ): unknown {\n    switch (prop) {\n      case 'nextUrl':\n        return (\n          target[nextURLSymbol] ||\n          (target[nextURLSymbol] = new Proxy(\n            target.nextUrl,\n            requireStaticNextUrlHandlers\n          ))\n        )\n      case 'headers':\n      case 'cookies':\n      case 'url':\n      case 'body':\n      case 'blob':\n      case 'json':\n      case 'text':\n      case 'arrayBuffer':\n      case 'formData':\n        throw new StaticGenBailoutError(\n          `Route ${target.nextUrl.pathname} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used \\`request.${prop}\\`.`\n        )\n      case 'clone':\n        return (\n          target[requestCloneSymbol] ||\n          (target[requestCloneSymbol] = () =>\n            new Proxy(\n              // This is vaguely unsafe but it's required since NextRequest does not implement\n              // clone. The reason we might expect this to work in this context is the Proxy will\n              // respond with static-amenable values anyway somewhat restoring the interface.\n              // @TODO we need to rethink NextRequest and NextURL because they are not sufficientlly\n              // sophisticated to adequately represent themselves in all contexts. A better approach is\n              // to probably embed the static generation logic into the class itself removing the need\n              // for any kind of proxying\n              target.clone() as NextRequest,\n              requireStaticRequestHandlers\n            ))\n        )\n      default:\n        return ReflectAdapter.get(target, prop, receiver)\n    }\n  },\n  // We don't need to proxy set because all the properties we proxy are ready only\n  // and will be ignored\n}\n\nconst requireStaticNextUrlHandlers = {\n  get(\n    target: NextURL & UrlSymbolTarget,\n    prop: string | symbol,\n    receiver: any\n  ): unknown {\n    switch (prop) {\n      case 'search':\n      case 'searchParams':\n      case 'url':\n      case 'href':\n      case 'toJSON':\n      case 'toString':\n      case 'origin':\n        throw new StaticGenBailoutError(\n          `Route ${target.pathname} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used \\`nextUrl.${prop}\\`.`\n        )\n      case 'clone':\n        return (\n          target[urlCloneSymbol] ||\n          (target[urlCloneSymbol] = () =>\n            new Proxy(target.clone(), requireStaticNextUrlHandlers))\n        )\n      default:\n        return ReflectAdapter.get(target, prop, receiver)\n    }\n  },\n}\n"],"names":["AppRouteRouteModule","hasNonStaticMethods","RouteModule","sharedModules","constructor","userland","definition","resolvedPagePath","nextConfigOutput","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","actionAsyncStorage","methods","autoImplementMethods","dynamic","Error","pathname","isStaticGenEnabled","process","env","NODE_ENV","lowercased","HTTP_METHODS","map","method","toLowerCase","Log","error","toUpperCase","some","resolve","isHTTPMethod","handleBadRequestResponse","execute","rawRequest","context","handler","requestContext","req","url","nextUrl","renderOpts","previewProps","prerenderManifest","preview","waitUntil","onClose","experimental","staticGenerationContext","page","fetchCache","response","run","isAppRoute","isAction","getIsServerAction","withRequestStore","requestStore","withStaticGenerationStore","staticGenerationStore","getTracer","isStaticGeneration","err","DynamicServerError","dynamicUsageDescription","message","dynamicUsageStack","stack","revalidate","request","forceDynamic","forceStatic","Proxy","forceStaticRequestHandlers","dynamicShouldError","requireStaticRequestHandlers","proxyNextRequest","route","getPathnameFromAbsolutePath","getRootSpanAttributes","set","trace","AppRouteRouteHandlersSpan","runHandler","spanName","attributes","patchFetch","res","params","parsedUrlQueryToParams","undefined","Response","fetchMetrics","pendingWaitUntil","Promise","all","incrementalCache","revalidateTag","revalidatedTags","Object","values","pendingRevalidates","addImplicitTags","fetchTags","tags","join","mutableCookies","headers","Headers","appendMutableCookies","body","status","statusText","handleInternalServerErrorResponse","has","get","handle","resolveHandlerError","handlers","POST","DELETE","PATCH","OPTIONS","nextURLSymbol","Symbol","requestCloneSymbol","urlCloneSymbol","searchParamsSymbol","hrefSymbol","toStringSymbol","headersSymbol","cookiesSymbol","target","prop","receiver","HeadersAdapter","seal","RequestCookiesAdapter","RequestCookies","forceStaticNextUrlHandlers","href","clone","ReflectAdapter","URLSearchParams","cleanURL","nextUrlHandlers","trackDynamicDataAccessed","nextRequestHandlers","requireStaticNextUrlHandlers","StaticGenBailoutError"],"mappings":"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"}