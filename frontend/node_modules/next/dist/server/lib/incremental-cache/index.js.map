{"version":3,"sources":["../../../../src/server/lib/incremental-cache/index.ts"],"sourcesContent":["import type { CacheFs } from '../../../shared/lib/utils'\nimport type { PrerenderManifest } from '../../../build'\nimport type {\n  IncrementalCacheValue,\n  IncrementalCacheEntry,\n  IncrementalCache as IncrementalCacheType,\n  IncrementalCacheKindHint,\n} from '../../response-cache'\nimport type { Revalidate } from '../revalidate'\nimport type { DeepReadonly } from '../../../shared/lib/deep-readonly'\n\nimport FetchCache from './fetch-cache'\nimport FileSystemCache from './file-system-cache'\nimport { normalizePagePath } from '../../../shared/lib/page-path/normalize-page-path'\n\nimport {\n  CACHE_ONE_YEAR,\n  NEXT_CACHE_REVALIDATED_TAGS_HEADER,\n  NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER,\n  PRERENDER_REVALIDATE_HEADER,\n} from '../../../lib/constants'\nimport { toRoute } from '../to-route'\nimport { SharedRevalidateTimings } from './shared-revalidate-timings'\n\nexport interface CacheHandlerContext {\n  fs?: CacheFs\n  dev?: boolean\n  flushToDisk?: boolean\n  serverDistDir?: string\n  maxMemoryCacheSize?: number\n  fetchCacheKeyPrefix?: string\n  prerenderManifest?: PrerenderManifest\n  revalidatedTags: string[]\n  _appDir: boolean\n  _pagesDir: boolean\n  _requestHeaders: IncrementalCache['requestHeaders']\n}\n\nexport interface CacheHandlerValue {\n  lastModified?: number\n  age?: number\n  cacheState?: string\n  value: IncrementalCacheValue | null\n}\n\nexport class CacheHandler {\n  // eslint-disable-next-line\n  constructor(_ctx: CacheHandlerContext) {}\n\n  public async get(\n    ..._args: Parameters<IncrementalCache['get']>\n  ): Promise<CacheHandlerValue | null> {\n    return {} as any\n  }\n\n  public async set(\n    ..._args: Parameters<IncrementalCache['set']>\n  ): Promise<void> {}\n\n  public async revalidateTag(\n    ..._args: Parameters<IncrementalCache['revalidateTag']>\n  ): Promise<void> {}\n\n  public resetRequestCache(): void {}\n}\n\nexport class IncrementalCache implements IncrementalCacheType {\n  readonly dev?: boolean\n  readonly disableForTestmode?: boolean\n  readonly cacheHandler?: CacheHandler\n  readonly hasCustomCacheHandler: boolean\n  readonly prerenderManifest: DeepReadonly<PrerenderManifest>\n  readonly requestHeaders: Record<string, undefined | string | string[]>\n  readonly requestProtocol?: 'http' | 'https'\n  readonly allowedRevalidateHeaderKeys?: string[]\n  readonly minimalMode?: boolean\n  readonly fetchCacheKeyPrefix?: string\n  readonly revalidatedTags?: string[]\n  readonly isOnDemandRevalidate?: boolean\n\n  private readonly locks = new Map<string, Promise<void>>()\n  private readonly unlocks = new Map<string, () => Promise<void>>()\n\n  /**\n   * The revalidate timings for routes. This will source the timings from the\n   * prerender manifest until the in-memory cache is updated with new timings.\n   */\n  private readonly revalidateTimings: SharedRevalidateTimings\n\n  constructor({\n    fs,\n    dev,\n    appDir,\n    pagesDir,\n    flushToDisk,\n    fetchCache,\n    minimalMode,\n    serverDistDir,\n    requestHeaders,\n    requestProtocol,\n    maxMemoryCacheSize,\n    getPrerenderManifest,\n    fetchCacheKeyPrefix,\n    CurCacheHandler,\n    allowedRevalidateHeaderKeys,\n  }: {\n    fs?: CacheFs\n    dev: boolean\n    appDir?: boolean\n    pagesDir?: boolean\n    fetchCache?: boolean\n    minimalMode?: boolean\n    serverDistDir?: string\n    flushToDisk?: boolean\n    requestProtocol?: 'http' | 'https'\n    allowedRevalidateHeaderKeys?: string[]\n    requestHeaders: IncrementalCache['requestHeaders']\n    maxMemoryCacheSize?: number\n    getPrerenderManifest: () => DeepReadonly<PrerenderManifest>\n    fetchCacheKeyPrefix?: string\n    CurCacheHandler?: typeof CacheHandler\n  }) {\n    const debug = !!process.env.NEXT_PRIVATE_DEBUG_CACHE\n    this.hasCustomCacheHandler = Boolean(CurCacheHandler)\n    if (!CurCacheHandler) {\n      if (fs && serverDistDir) {\n        if (debug) {\n          console.log('using filesystem cache handler')\n        }\n        CurCacheHandler = FileSystemCache\n      }\n      if (\n        FetchCache.isAvailable({ _requestHeaders: requestHeaders }) &&\n        minimalMode &&\n        fetchCache\n      ) {\n        if (debug) {\n          console.log('using fetch cache handler')\n        }\n        CurCacheHandler = FetchCache\n      }\n    } else if (debug) {\n      console.log('using custom cache handler', CurCacheHandler.name)\n    }\n\n    if (process.env.__NEXT_TEST_MAX_ISR_CACHE) {\n      // Allow cache size to be overridden for testing purposes\n      maxMemoryCacheSize = parseInt(process.env.__NEXT_TEST_MAX_ISR_CACHE, 10)\n    }\n    this.dev = dev\n    this.disableForTestmode = process.env.NEXT_PRIVATE_TEST_PROXY === 'true'\n    // this is a hack to avoid Webpack knowing this is equal to this.minimalMode\n    // because we replace this.minimalMode to true in production bundles.\n    const minimalModeKey = 'minimalMode'\n    this[minimalModeKey] = minimalMode\n    this.requestHeaders = requestHeaders\n    this.requestProtocol = requestProtocol\n    this.allowedRevalidateHeaderKeys = allowedRevalidateHeaderKeys\n    this.prerenderManifest = getPrerenderManifest()\n    this.revalidateTimings = new SharedRevalidateTimings(this.prerenderManifest)\n    this.fetchCacheKeyPrefix = fetchCacheKeyPrefix\n    let revalidatedTags: string[] = []\n\n    if (\n      requestHeaders[PRERENDER_REVALIDATE_HEADER] ===\n      this.prerenderManifest?.preview?.previewModeId\n    ) {\n      this.isOnDemandRevalidate = true\n    }\n\n    if (\n      minimalMode &&\n      typeof requestHeaders[NEXT_CACHE_REVALIDATED_TAGS_HEADER] === 'string' &&\n      requestHeaders[NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER] ===\n        this.prerenderManifest?.preview?.previewModeId\n    ) {\n      revalidatedTags =\n        requestHeaders[NEXT_CACHE_REVALIDATED_TAGS_HEADER].split(',')\n    }\n\n    if (CurCacheHandler) {\n      this.cacheHandler = new CurCacheHandler({\n        dev,\n        fs,\n        flushToDisk,\n        serverDistDir,\n        revalidatedTags,\n        maxMemoryCacheSize,\n        _pagesDir: !!pagesDir,\n        _appDir: !!appDir,\n        _requestHeaders: requestHeaders,\n        fetchCacheKeyPrefix,\n      })\n    }\n  }\n\n  private calculateRevalidate(\n    pathname: string,\n    fromTime: number,\n    dev?: boolean\n  ): Revalidate {\n    // in development we don't have a prerender-manifest\n    // and default to always revalidating to allow easier debugging\n    if (dev) return new Date().getTime() - 1000\n\n    // if an entry isn't present in routes we fallback to a default\n    // of revalidating after 1 second.\n    const initialRevalidateSeconds =\n      this.revalidateTimings.get(toRoute(pathname)) ?? 1\n\n    const revalidateAfter =\n      typeof initialRevalidateSeconds === 'number'\n        ? initialRevalidateSeconds * 1000 + fromTime\n        : initialRevalidateSeconds\n\n    return revalidateAfter\n  }\n\n  _getPathname(pathname: string, fetchCache?: boolean) {\n    return fetchCache ? pathname : normalizePagePath(pathname)\n  }\n\n  resetRequestCache() {\n    this.cacheHandler?.resetRequestCache?.()\n  }\n\n  async unlock(cacheKey: string) {\n    const unlock = this.unlocks.get(cacheKey)\n    if (unlock) {\n      unlock()\n      this.locks.delete(cacheKey)\n      this.unlocks.delete(cacheKey)\n    }\n  }\n\n  async lock(cacheKey: string) {\n    let unlockNext: () => Promise<void> = () => Promise.resolve()\n    const existingLock = this.locks.get(cacheKey)\n\n    if (existingLock) {\n      await existingLock\n    } else {\n      const newLock = new Promise<void>((resolve) => {\n        unlockNext = async () => {\n          resolve()\n        }\n      })\n\n      this.locks.set(cacheKey, newLock)\n      this.unlocks.set(cacheKey, unlockNext)\n    }\n\n    return unlockNext\n  }\n\n  async revalidateTag(tags: string | string[]): Promise<void> {\n    return this.cacheHandler?.revalidateTag?.(tags)\n  }\n\n  // x-ref: https://github.com/facebook/react/blob/2655c9354d8e1c54ba888444220f63e836925caa/packages/react/src/ReactFetch.js#L23\n  async generateCacheKey(\n    url: string,\n    init: RequestInit | Request = {}\n  ): Promise<string> {\n    // this should be bumped anytime a fix is made to cache entries\n    // that should bust the cache\n    const MAIN_KEY_PREFIX = 'v3'\n\n    const bodyChunks: string[] = []\n\n    const encoder = new TextEncoder()\n    const decoder = new TextDecoder()\n\n    if (init.body) {\n      // handle ReadableStream body\n      if (typeof (init.body as any).getReader === 'function') {\n        const readableBody = init.body as ReadableStream<Uint8Array | string>\n\n        const chunks: Uint8Array[] = []\n\n        try {\n          await readableBody.pipeTo(\n            new WritableStream({\n              write(chunk) {\n                if (typeof chunk === 'string') {\n                  chunks.push(encoder.encode(chunk))\n                  bodyChunks.push(chunk)\n                } else {\n                  chunks.push(chunk)\n                  bodyChunks.push(decoder.decode(chunk, { stream: true }))\n                }\n              },\n            })\n          )\n\n          // Flush the decoder.\n          bodyChunks.push(decoder.decode())\n\n          // Create a new buffer with all the chunks.\n          const length = chunks.reduce((total, arr) => total + arr.length, 0)\n          const arrayBuffer = new Uint8Array(length)\n\n          // Push each of the chunks into the new array buffer.\n          let offset = 0\n          for (const chunk of chunks) {\n            arrayBuffer.set(chunk, offset)\n            offset += chunk.length\n          }\n\n          ;(init as any)._ogBody = arrayBuffer\n        } catch (err) {\n          console.error('Problem reading body', err)\n        }\n      } // handle FormData or URLSearchParams bodies\n      else if (typeof (init.body as any).keys === 'function') {\n        const formData = init.body as FormData\n        ;(init as any)._ogBody = init.body\n        for (const key of new Set([...formData.keys()])) {\n          const values = formData.getAll(key)\n          bodyChunks.push(\n            `${key}=${(\n              await Promise.all(\n                values.map(async (val) => {\n                  if (typeof val === 'string') {\n                    return val\n                  } else {\n                    return await val.text()\n                  }\n                })\n              )\n            ).join(',')}`\n          )\n        }\n        // handle blob body\n      } else if (typeof (init.body as any).arrayBuffer === 'function') {\n        const blob = init.body as Blob\n        const arrayBuffer = await blob.arrayBuffer()\n        bodyChunks.push(await blob.text())\n        ;(init as any)._ogBody = new Blob([arrayBuffer], { type: blob.type })\n      } else if (typeof init.body === 'string') {\n        bodyChunks.push(init.body)\n        ;(init as any)._ogBody = init.body\n      }\n    }\n\n    const headers =\n      typeof (init.headers || {}).keys === 'function'\n        ? Object.fromEntries(init.headers as Headers)\n        : Object.assign({}, init.headers)\n\n    if ('traceparent' in headers) delete headers['traceparent']\n\n    const cacheString = JSON.stringify([\n      MAIN_KEY_PREFIX,\n      this.fetchCacheKeyPrefix || '',\n      url,\n      init.method,\n      headers,\n      init.mode,\n      init.redirect,\n      init.credentials,\n      init.referrer,\n      init.referrerPolicy,\n      init.integrity,\n      init.cache,\n      bodyChunks,\n    ])\n\n    if (process.env.NEXT_RUNTIME === 'edge') {\n      function bufferToHex(buffer: ArrayBuffer): string {\n        return Array.prototype.map\n          .call(new Uint8Array(buffer), (b) => b.toString(16).padStart(2, '0'))\n          .join('')\n      }\n      const buffer = encoder.encode(cacheString)\n      return bufferToHex(await crypto.subtle.digest('SHA-256', buffer))\n    } else {\n      const crypto = require('crypto') as typeof import('crypto')\n      return crypto.createHash('sha256').update(cacheString).digest('hex')\n    }\n  }\n\n  // get data from cache if available\n  async get(\n    cacheKey: string,\n    ctx: {\n      kindHint?: IncrementalCacheKindHint\n      revalidate?: Revalidate\n      fetchUrl?: string\n      fetchIdx?: number\n      tags?: string[]\n      softTags?: string[]\n      isRoutePPREnabled?: boolean\n    } = {}\n  ): Promise<IncrementalCacheEntry | null> {\n    // we don't leverage the prerender cache in dev mode\n    // so that getStaticProps is always called for easier debugging\n    if (\n      this.disableForTestmode ||\n      (this.dev &&\n        (ctx.kindHint !== 'fetch' ||\n          this.requestHeaders['cache-control'] === 'no-cache'))\n    ) {\n      return null\n    }\n\n    cacheKey = this._getPathname(cacheKey, ctx.kindHint === 'fetch')\n    let entry: IncrementalCacheEntry | null = null\n    let revalidate = ctx.revalidate\n\n    const cacheData = await this.cacheHandler?.get(cacheKey, ctx)\n\n    if (cacheData?.value?.kind === 'FETCH') {\n      const combinedTags = [...(ctx.tags || []), ...(ctx.softTags || [])]\n      // if a tag was revalidated we don't return stale data\n      if (\n        combinedTags.some((tag) => {\n          return this.revalidatedTags?.includes(tag)\n        })\n      ) {\n        return null\n      }\n\n      revalidate = revalidate || cacheData.value.revalidate\n      const age = (Date.now() - (cacheData.lastModified || 0)) / 1000\n\n      const isStale = age > revalidate\n      const data = cacheData.value.data\n\n      return {\n        isStale: isStale,\n        value: {\n          kind: 'FETCH',\n          data,\n          revalidate: revalidate,\n        },\n        revalidateAfter: Date.now() + revalidate * 1000,\n      }\n    }\n\n    const curRevalidate = this.revalidateTimings.get(toRoute(cacheKey))\n\n    let isStale: boolean | -1 | undefined\n    let revalidateAfter: Revalidate\n\n    if (cacheData?.lastModified === -1) {\n      isStale = -1\n      revalidateAfter = -1 * CACHE_ONE_YEAR\n    } else {\n      revalidateAfter = this.calculateRevalidate(\n        cacheKey,\n        cacheData?.lastModified || Date.now(),\n        this.dev && ctx.kindHint !== 'fetch'\n      )\n      isStale =\n        revalidateAfter !== false && revalidateAfter < Date.now()\n          ? true\n          : undefined\n    }\n\n    if (cacheData) {\n      entry = {\n        isStale,\n        curRevalidate,\n        revalidateAfter,\n        value: cacheData.value,\n      }\n    }\n\n    if (\n      !cacheData &&\n      this.prerenderManifest.notFoundRoutes.includes(cacheKey)\n    ) {\n      // for the first hit after starting the server the cache\n      // may not have a way to save notFound: true so if\n      // the prerender-manifest marks this as notFound then we\n      // return that entry and trigger a cache set to give it a\n      // chance to update in-memory entries\n      entry = {\n        isStale,\n        value: null,\n        curRevalidate,\n        revalidateAfter,\n      }\n      this.set(cacheKey, entry.value, ctx)\n    }\n    return entry\n  }\n\n  // populate the incremental cache with new data\n  async set(\n    pathname: string,\n    data: IncrementalCacheValue | null,\n    ctx: {\n      revalidate?: Revalidate\n      fetchCache?: boolean\n      fetchUrl?: string\n      fetchIdx?: number\n      tags?: string[]\n      isRoutePPREnabled?: boolean\n    }\n  ) {\n    if (this.disableForTestmode || (this.dev && !ctx.fetchCache)) return\n    // FetchCache has upper limit of 2MB per-entry currently\n    const itemSize = JSON.stringify(data).length\n    if (\n      ctx.fetchCache &&\n      // we don't show this error/warning when a custom cache handler is being used\n      // as it might not have this limit\n      !this.hasCustomCacheHandler &&\n      itemSize > 2 * 1024 * 1024\n    ) {\n      if (this.dev) {\n        throw new Error(\n          `Failed to set Next.js data cache, items over 2MB can not be cached (${itemSize} bytes)`\n        )\n      }\n      return\n    }\n\n    pathname = this._getPathname(pathname, ctx.fetchCache)\n\n    try {\n      // Set the value for the revalidate seconds so if it changes we can\n      // update the cache with the new value.\n      if (typeof ctx.revalidate !== 'undefined' && !ctx.fetchCache) {\n        this.revalidateTimings.set(toRoute(pathname), ctx.revalidate)\n      }\n\n      await this.cacheHandler?.set(pathname, data, ctx)\n    } catch (error) {\n      console.warn('Failed to update prerender cache for', pathname, error)\n    }\n  }\n}\n"],"names":["CacheHandler","IncrementalCache","constructor","_ctx","get","_args","set","revalidateTag","resetRequestCache","fs","dev","appDir","pagesDir","flushToDisk","fetchCache","minimalMode","serverDistDir","requestHeaders","requestProtocol","maxMemoryCacheSize","getPrerenderManifest","fetchCacheKeyPrefix","CurCacheHandler","allowedRevalidateHeaderKeys","locks","Map","unlocks","debug","process","env","NEXT_PRIVATE_DEBUG_CACHE","hasCustomCacheHandler","Boolean","console","log","FileSystemCache","FetchCache","isAvailable","_requestHeaders","name","__NEXT_TEST_MAX_ISR_CACHE","parseInt","disableForTestmode","NEXT_PRIVATE_TEST_PROXY","minimalModeKey","prerenderManifest","revalidateTimings","SharedRevalidateTimings","revalidatedTags","PRERENDER_REVALIDATE_HEADER","preview","previewModeId","isOnDemandRevalidate","NEXT_CACHE_REVALIDATED_TAGS_HEADER","NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER","split","cacheHandler","_pagesDir","_appDir","calculateRevalidate","pathname","fromTime","Date","getTime","initialRevalidateSeconds","toRoute","revalidateAfter","_getPathname","normalizePagePath","unlock","cacheKey","delete","lock","unlockNext","Promise","resolve","existingLock","newLock","tags","generateCacheKey","url","init","MAIN_KEY_PREFIX","bodyChunks","encoder","TextEncoder","decoder","TextDecoder","body","getReader","readableBody","chunks","pipeTo","WritableStream","write","chunk","push","encode","decode","stream","length","reduce","total","arr","arrayBuffer","Uint8Array","offset","_ogBody","err","error","keys","formData","key","Set","values","getAll","all","map","val","text","join","blob","Blob","type","headers","Object","fromEntries","assign","cacheString","JSON","stringify","method","mode","redirect","credentials","referrer","referrerPolicy","integrity","cache","NEXT_RUNTIME","bufferToHex","buffer","Array","prototype","call","b","toString","padStart","crypto","subtle","digest","require","createHash","update","ctx","cacheData","kindHint","entry","revalidate","value","kind","combinedTags","softTags","some","tag","includes","age","now","lastModified","isStale","data","curRevalidate","CACHE_ONE_YEAR","undefined","notFoundRoutes","itemSize","Error","warn"],"mappings":"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"}