{"version":3,"sources":["../../../../src/server/lib/router-utils/setup-dev-bundler.ts"],"sourcesContent":["import type { NextConfigComplete } from '../../config-shared'\nimport type { FilesystemDynamicRoute } from './filesystem'\nimport type { UnwrapPromise } from '../../../lib/coalesced-function'\nimport {\n  getPageStaticInfo,\n  type MiddlewareMatcher,\n} from '../../../build/analysis/get-page-static-info'\nimport type { MiddlewareRouteMatch } from '../../../shared/lib/router/utils/middleware-route-matcher'\nimport type { PropagateToWorkersField } from './types'\nimport type { NextJsHotReloaderInterface } from '../../dev/hot-reloader-types'\n\nimport { createDefineEnv, type Project } from '../../../build/swc'\nimport fs from 'fs'\nimport { mkdir } from 'fs/promises'\nimport url from 'url'\nimport path from 'path'\nimport qs from 'querystring'\nimport Watchpack from 'next/dist/compiled/watchpack'\nimport { loadEnvConfig } from '@next/env'\nimport isError, { type NextError } from '../../../lib/is-error'\nimport findUp from 'next/dist/compiled/find-up'\nimport { buildCustomRoute } from './filesystem'\nimport * as Log from '../../../build/output/log'\nimport HotReloaderWebpack from '../../dev/hot-reloader-webpack'\nimport { setGlobal } from '../../../trace/shared'\nimport type { Telemetry } from '../../../telemetry/storage'\nimport type { IncomingMessage, ServerResponse } from 'http'\nimport loadJsConfig from '../../../build/load-jsconfig'\nimport { createValidFileMatcher } from '../find-page-file'\nimport { eventCliSession } from '../../../telemetry/events'\nimport { getDefineEnv } from '../../../build/webpack/plugins/define-env-plugin'\nimport { logAppDirError } from '../../dev/log-app-dir-error'\nimport { getSortedRoutes } from '../../../shared/lib/router/utils'\nimport {\n  getStaticInfoIncludingLayouts,\n  sortByPageExts,\n} from '../../../build/entries'\nimport { verifyTypeScriptSetup } from '../../../lib/verify-typescript-setup'\nimport { verifyPartytownSetup } from '../../../lib/verify-partytown-setup'\nimport { getRouteRegex } from '../../../shared/lib/router/utils/route-regex'\nimport { normalizeAppPath } from '../../../shared/lib/router/utils/app-paths'\nimport { buildDataRoute } from './build-data-route'\nimport { getRouteMatcher } from '../../../shared/lib/router/utils/route-matcher'\nimport { normalizePathSep } from '../../../shared/lib/page-path/normalize-path-sep'\nimport { createClientRouterFilter } from '../../../lib/create-client-router-filter'\nimport { absolutePathToPage } from '../../../shared/lib/page-path/absolute-path-to-page'\nimport { generateInterceptionRoutesRewrites } from '../../../lib/generate-interception-routes-rewrites'\n\nimport {\n  CLIENT_STATIC_FILES_PATH,\n  COMPILER_NAMES,\n  DEV_CLIENT_PAGES_MANIFEST,\n  DEV_CLIENT_MIDDLEWARE_MANIFEST,\n  PHASE_DEVELOPMENT_SERVER,\n} from '../../../shared/lib/constants'\n\nimport { getMiddlewareRouteMatcher } from '../../../shared/lib/router/utils/middleware-route-matcher'\n\nimport {\n  isMiddlewareFile,\n  NestedMiddlewareError,\n  isInstrumentationHookFile,\n  getPossibleMiddlewareFilenames,\n  getPossibleInstrumentationHookFilenames,\n} from '../../../build/utils'\nimport {\n  createOriginalStackFrame,\n  getSourceById,\n  parseStack,\n} from '../../../client/components/react-dev-overlay/server/middleware'\nimport {\n  batchedTraceSource,\n  createOriginalStackFrame as createOriginalTurboStackFrame,\n} from '../../../client/components/react-dev-overlay/server/middleware-turbopack'\nimport { devPageFiles } from '../../../build/webpack/plugins/next-types-plugin/shared'\nimport type { LazyRenderServerInstance } from '../router-server'\nimport { HMR_ACTIONS_SENT_TO_BROWSER } from '../../dev/hot-reloader-types'\nimport { PAGE_TYPES } from '../../../lib/page-types'\nimport { createHotReloaderTurbopack } from '../../dev/hot-reloader-turbopack'\nimport { getErrorSource } from '../../../shared/lib/error-source'\nimport type { StackFrame } from 'next/dist/compiled/stacktrace-parser'\nimport { generateEncryptionKeyBase64 } from '../../app-render/encryption-utils'\nimport {\n  ModuleBuildError,\n  TurbopackInternalError,\n} from '../../dev/turbopack-utils'\nimport { isMetadataRoute } from '../../../lib/metadata/is-metadata-route'\nimport { normalizeMetadataPageToRoute } from '../../../lib/metadata/get-metadata-route'\nimport { createEnvDefinitions } from '../experimental/create-env-definitions'\nimport { JsConfigPathsPlugin } from '../../../build/webpack/plugins/jsconfig-paths-plugin'\n\nexport type SetupOpts = {\n  renderServer: LazyRenderServerInstance\n  dir: string\n  turbo?: boolean\n  appDir?: string\n  pagesDir?: string\n  telemetry: Telemetry\n  isCustomServer?: boolean\n  fsChecker: UnwrapPromise<\n    ReturnType<typeof import('./filesystem').setupFsCheck>\n  >\n  nextConfig: NextConfigComplete\n  port: number\n  onCleanup: (listener: () => Promise<void>) => void\n}\n\nexport type ServerFields = {\n  actualMiddlewareFile?: string | undefined\n  actualInstrumentationHookFile?: string | undefined\n  appPathRoutes?: Record<string, string | string[]>\n  middleware?:\n    | {\n        page: string\n        match: MiddlewareRouteMatch\n        matchers?: MiddlewareMatcher[]\n      }\n    | undefined\n  hasAppNotFound?: boolean\n  interceptionRoutes?: ReturnType<\n    typeof import('./filesystem').buildCustomRoute\n  >[]\n  setAppIsrStatus?: (key: string, value: false | number | null) => void\n}\n\nasync function verifyTypeScript(opts: SetupOpts) {\n  let usingTypeScript = false\n  const verifyResult = await verifyTypeScriptSetup({\n    dir: opts.dir,\n    distDir: opts.nextConfig.distDir,\n    intentDirs: [opts.pagesDir, opts.appDir].filter(Boolean) as string[],\n    typeCheckPreflight: false,\n    tsconfigPath: opts.nextConfig.typescript.tsconfigPath,\n    disableStaticImages: opts.nextConfig.images.disableStaticImages,\n    hasAppDir: !!opts.appDir,\n    hasPagesDir: !!opts.pagesDir,\n  })\n\n  if (verifyResult.version) {\n    usingTypeScript = true\n  }\n  return usingTypeScript\n}\n\nexport async function propagateServerField(\n  opts: SetupOpts,\n  field: PropagateToWorkersField,\n  args: any\n) {\n  await opts.renderServer?.instance?.propagateServerField(opts.dir, field, args)\n}\n\nasync function startWatcher(opts: SetupOpts) {\n  const { nextConfig, appDir, pagesDir, dir } = opts\n  const { useFileSystemPublicRoutes } = nextConfig\n  const usingTypeScript = await verifyTypeScript(opts)\n\n  const distDir = path.join(opts.dir, opts.nextConfig.distDir)\n\n  // we ensure the types directory exists here\n  if (usingTypeScript) {\n    const distTypesDir = path.join(distDir, 'types')\n    if (!fs.existsSync(distTypesDir)) {\n      await mkdir(distTypesDir, { recursive: true })\n    }\n  }\n\n  setGlobal('distDir', distDir)\n  setGlobal('phase', PHASE_DEVELOPMENT_SERVER)\n\n  const validFileMatcher = createValidFileMatcher(\n    nextConfig.pageExtensions,\n    appDir\n  )\n\n  const serverFields: ServerFields = {}\n\n  const hotReloader: NextJsHotReloaderInterface = opts.turbo\n    ? await createHotReloaderTurbopack(opts, serverFields, distDir)\n    : new HotReloaderWebpack(opts.dir, {\n        appDir,\n        pagesDir,\n        distDir: distDir,\n        config: opts.nextConfig,\n        buildId: 'development',\n        encryptionKey: await generateEncryptionKeyBase64(),\n        telemetry: opts.telemetry,\n        rewrites: opts.fsChecker.rewrites,\n        previewProps: opts.fsChecker.prerenderManifest.preview,\n      })\n\n  await hotReloader.start()\n\n  if (opts.nextConfig.experimental.nextScriptWorkers) {\n    await verifyPartytownSetup(\n      opts.dir,\n      path.join(distDir, CLIENT_STATIC_FILES_PATH)\n    )\n  }\n\n  opts.fsChecker.ensureCallback(async function ensure(item) {\n    if (item.type === 'appFile' || item.type === 'pageFile') {\n      await hotReloader.ensurePage({\n        clientOnly: false,\n        page: item.itemPath,\n        isApp: item.type === 'appFile',\n        definition: undefined,\n      })\n    }\n  })\n\n  let resolved = false\n  let prevSortedRoutes: string[] = []\n\n  await new Promise<void>(async (resolve, reject) => {\n    if (pagesDir) {\n      // Watchpack doesn't emit an event for an empty directory\n      fs.readdir(pagesDir, (_, files) => {\n        if (files?.length) {\n          return\n        }\n\n        if (!resolved) {\n          resolve()\n          resolved = true\n        }\n      })\n    }\n\n    const pages = pagesDir ? [pagesDir] : []\n    const app = appDir ? [appDir] : []\n    const directories = [...pages, ...app]\n\n    const rootDir = pagesDir || appDir\n    const files = [\n      ...getPossibleMiddlewareFilenames(\n        path.join(rootDir!, '..'),\n        nextConfig.pageExtensions\n      ),\n      ...getPossibleInstrumentationHookFilenames(\n        path.join(rootDir!, '..'),\n        nextConfig.pageExtensions\n      ),\n    ]\n    let nestedMiddleware: string[] = []\n\n    const envFiles = [\n      '.env.development.local',\n      '.env.local',\n      '.env.development',\n      '.env',\n    ].map((file) => path.join(dir, file))\n\n    files.push(...envFiles)\n\n    // tsconfig/jsconfig paths hot-reloading\n    const tsconfigPaths = [\n      path.join(dir, 'tsconfig.json'),\n      path.join(dir, 'jsconfig.json'),\n    ] as const\n    files.push(...tsconfigPaths)\n\n    const wp = new Watchpack({\n      ignored: (pathname: string) => {\n        return (\n          !files.some((file) => file.startsWith(pathname)) &&\n          !directories.some(\n            (d) => pathname.startsWith(d) || d.startsWith(pathname)\n          )\n        )\n      },\n    })\n    const fileWatchTimes = new Map()\n    let enabledTypeScript = usingTypeScript\n    let previousClientRouterFilters: any\n    let previousConflictingPagePaths: Set<string> = new Set()\n\n    wp.on('aggregated', async () => {\n      let middlewareMatchers: MiddlewareMatcher[] | undefined\n      const routedPages: string[] = []\n      const knownFiles = wp.getTimeInfoEntries()\n      const appPaths: Record<string, string[]> = {}\n      const pageNameSet = new Set<string>()\n      const conflictingAppPagePaths = new Set<string>()\n      const appPageFilePaths = new Map<string, string>()\n      const pagesPageFilePaths = new Map<string, string>()\n\n      let envChange = false\n      let tsconfigChange = false\n      let conflictingPageChange = 0\n      let hasRootAppNotFound = false\n\n      const { appFiles, pageFiles } = opts.fsChecker\n\n      appFiles.clear()\n      pageFiles.clear()\n      devPageFiles.clear()\n\n      const sortedKnownFiles: string[] = [...knownFiles.keys()].sort(\n        sortByPageExts(nextConfig.pageExtensions)\n      )\n\n      for (const fileName of sortedKnownFiles) {\n        if (\n          !files.includes(fileName) &&\n          !directories.some((d) => fileName.startsWith(d))\n        ) {\n          continue\n        }\n        const meta = knownFiles.get(fileName)\n\n        const watchTime = fileWatchTimes.get(fileName)\n        // If the file is showing up for the first time or the meta.timestamp is changed since last time\n        const watchTimeChange =\n          watchTime === undefined ||\n          (watchTime && watchTime !== meta?.timestamp)\n        fileWatchTimes.set(fileName, meta?.timestamp)\n\n        if (envFiles.includes(fileName)) {\n          if (watchTimeChange) {\n            envChange = true\n          }\n          continue\n        }\n\n        if (tsconfigPaths.includes(fileName)) {\n          if (fileName.endsWith('tsconfig.json')) {\n            enabledTypeScript = true\n          }\n          if (watchTimeChange) {\n            tsconfigChange = true\n          }\n          continue\n        }\n\n        if (\n          meta?.accuracy === undefined ||\n          !validFileMatcher.isPageFile(fileName)\n        ) {\n          continue\n        }\n\n        const isAppPath = Boolean(\n          appDir &&\n            normalizePathSep(fileName).startsWith(\n              normalizePathSep(appDir) + '/'\n            )\n        )\n        const isPagePath = Boolean(\n          pagesDir &&\n            normalizePathSep(fileName).startsWith(\n              normalizePathSep(pagesDir) + '/'\n            )\n        )\n\n        const rootFile = absolutePathToPage(fileName, {\n          dir: dir,\n          extensions: nextConfig.pageExtensions,\n          keepIndex: false,\n          pagesType: PAGE_TYPES.ROOT,\n        })\n\n        if (isMiddlewareFile(rootFile)) {\n          const staticInfo = await getStaticInfoIncludingLayouts({\n            pageFilePath: fileName,\n            config: nextConfig,\n            appDir: appDir,\n            page: rootFile,\n            isDev: true,\n            isInsideAppDir: isAppPath,\n            pageExtensions: nextConfig.pageExtensions,\n          })\n          if (nextConfig.output === 'export') {\n            Log.error(\n              'Middleware cannot be used with \"output: export\". See more info here: https://nextjs.org/docs/advanced-features/static-html-export'\n            )\n            continue\n          }\n          serverFields.actualMiddlewareFile = rootFile\n          await propagateServerField(\n            opts,\n            'actualMiddlewareFile',\n            serverFields.actualMiddlewareFile\n          )\n          middlewareMatchers = staticInfo.middleware?.matchers || [\n            { regexp: '.*', originalSource: '/:path*' },\n          ]\n          continue\n        }\n        if (\n          isInstrumentationHookFile(rootFile) &&\n          nextConfig.experimental.instrumentationHook\n        ) {\n          serverFields.actualInstrumentationHookFile = rootFile\n          await propagateServerField(\n            opts,\n            'actualInstrumentationHookFile',\n            serverFields.actualInstrumentationHookFile\n          )\n          continue\n        }\n\n        if (fileName.endsWith('.ts') || fileName.endsWith('.tsx')) {\n          enabledTypeScript = true\n        }\n\n        if (!(isAppPath || isPagePath)) {\n          continue\n        }\n\n        // Collect all current filenames for the TS plugin to use\n        devPageFiles.add(fileName)\n\n        let pageName = absolutePathToPage(fileName, {\n          dir: isAppPath ? appDir! : pagesDir!,\n          extensions: nextConfig.pageExtensions,\n          keepIndex: isAppPath,\n          pagesType: isAppPath ? PAGE_TYPES.APP : PAGE_TYPES.PAGES,\n        })\n\n        if (isAppPath && isMetadataRoute(pageName)) {\n          const staticInfo = await getPageStaticInfo({\n            pageFilePath: fileName,\n            nextConfig: {},\n            page: pageName,\n            isDev: true,\n            pageType: PAGE_TYPES.APP,\n          })\n\n          pageName = normalizeMetadataPageToRoute(\n            pageName,\n            !!(staticInfo.generateSitemaps || staticInfo.generateImageMetadata)\n          )\n        }\n\n        if (\n          !isAppPath &&\n          pageName.startsWith('/api/') &&\n          nextConfig.output === 'export'\n        ) {\n          Log.error(\n            'API Routes cannot be used with \"output: export\". See more info here: https://nextjs.org/docs/advanced-features/static-html-export'\n          )\n          continue\n        }\n\n        if (isAppPath) {\n          const isRootNotFound = validFileMatcher.isRootNotFound(fileName)\n          hasRootAppNotFound = true\n\n          if (isRootNotFound) {\n            continue\n          }\n          if (!isRootNotFound && !validFileMatcher.isAppRouterPage(fileName)) {\n            continue\n          }\n          // Ignore files/directories starting with `_` in the app directory\n          if (normalizePathSep(pageName).includes('/_')) {\n            continue\n          }\n\n          const originalPageName = pageName\n          pageName = normalizeAppPath(pageName).replace(/%5F/g, '_')\n          if (!appPaths[pageName]) {\n            appPaths[pageName] = []\n          }\n          appPaths[pageName].push(originalPageName)\n\n          if (useFileSystemPublicRoutes) {\n            appFiles.add(pageName)\n          }\n\n          if (routedPages.includes(pageName)) {\n            continue\n          }\n        } else {\n          if (useFileSystemPublicRoutes) {\n            pageFiles.add(pageName)\n            // always add to nextDataRoutes for now but in future only add\n            // entries that actually use getStaticProps/getServerSideProps\n            opts.fsChecker.nextDataRoutes.add(pageName)\n          }\n        }\n        ;(isAppPath ? appPageFilePaths : pagesPageFilePaths).set(\n          pageName,\n          fileName\n        )\n\n        if (appDir && pageNameSet.has(pageName)) {\n          conflictingAppPagePaths.add(pageName)\n        } else {\n          pageNameSet.add(pageName)\n        }\n\n        /**\n         * If there is a middleware that is not declared in the root we will\n         * warn without adding it so it doesn't make its way into the system.\n         */\n        if (/[\\\\\\\\/]_middleware$/.test(pageName)) {\n          nestedMiddleware.push(pageName)\n          continue\n        }\n\n        routedPages.push(pageName)\n      }\n\n      const numConflicting = conflictingAppPagePaths.size\n      conflictingPageChange = numConflicting - previousConflictingPagePaths.size\n\n      if (conflictingPageChange !== 0) {\n        if (numConflicting > 0) {\n          let errorMessage = `Conflicting app and page file${\n            numConflicting === 1 ? ' was' : 's were'\n          } found, please remove the conflicting files to continue:\\n`\n\n          for (const p of conflictingAppPagePaths) {\n            const appPath = path.relative(dir, appPageFilePaths.get(p)!)\n            const pagesPath = path.relative(dir, pagesPageFilePaths.get(p)!)\n            errorMessage += `  \"${pagesPath}\" - \"${appPath}\"\\n`\n          }\n          hotReloader.setHmrServerError(new Error(errorMessage))\n        } else if (numConflicting === 0) {\n          hotReloader.clearHmrServerError()\n          await propagateServerField(opts, 'reloadMatchers', undefined)\n        }\n      }\n\n      previousConflictingPagePaths = conflictingAppPagePaths\n\n      let clientRouterFilters: any\n      if (nextConfig.experimental.clientRouterFilter) {\n        clientRouterFilters = createClientRouterFilter(\n          Object.keys(appPaths),\n          nextConfig.experimental.clientRouterFilterRedirects\n            ? ((nextConfig as any)._originalRedirects || []).filter(\n                (r: any) => !r.internal\n              )\n            : [],\n          nextConfig.experimental.clientRouterFilterAllowedRate\n        )\n\n        if (\n          !previousClientRouterFilters ||\n          JSON.stringify(previousClientRouterFilters) !==\n            JSON.stringify(clientRouterFilters)\n        ) {\n          envChange = true\n          previousClientRouterFilters = clientRouterFilters\n        }\n      }\n\n      if (!usingTypeScript && enabledTypeScript) {\n        // we tolerate the error here as this is best effort\n        // and the manual install command will be shown\n        await verifyTypeScript(opts)\n          .then(() => {\n            tsconfigChange = true\n          })\n          .catch(() => {})\n      }\n\n      if (envChange || tsconfigChange) {\n        if (envChange) {\n          const { parsedEnv } = loadEnvConfig(\n            dir,\n            true,\n            Log,\n            true,\n            (envFilePath) => {\n              Log.info(`Reload env: ${envFilePath}`)\n            }\n          )\n\n          if (usingTypeScript && nextConfig.experimental?.typedEnv) {\n            // do not await, this is not essential for further process\n            createEnvDefinitions({\n              distDir,\n              env: { ...parsedEnv, ...nextConfig.env },\n            })\n          }\n\n          await propagateServerField(opts, 'loadEnvConfig', [\n            { dev: true, forceReload: true, silent: true },\n          ])\n        }\n        let tsconfigResult:\n          | UnwrapPromise<ReturnType<typeof loadJsConfig>>\n          | undefined\n\n        if (tsconfigChange) {\n          try {\n            tsconfigResult = await loadJsConfig(dir, nextConfig)\n          } catch (_) {\n            /* do we want to log if there are syntax errors in tsconfig  while editing? */\n          }\n        }\n\n        if (hotReloader.turbopackProject) {\n          const hasRewrites =\n            opts.fsChecker.rewrites.afterFiles.length > 0 ||\n            opts.fsChecker.rewrites.beforeFiles.length > 0 ||\n            opts.fsChecker.rewrites.fallback.length > 0\n\n          await hotReloader.turbopackProject.update({\n            defineEnv: createDefineEnv({\n              isTurbopack: true,\n              clientRouterFilters,\n              config: nextConfig,\n              dev: true,\n              distDir,\n              fetchCacheKeyPrefix:\n                opts.nextConfig.experimental.fetchCacheKeyPrefix,\n              hasRewrites,\n              // TODO: Implement\n              middlewareMatchers: undefined,\n            }),\n          })\n        }\n\n        hotReloader.activeWebpackConfigs?.forEach((config, idx) => {\n          const isClient = idx === 0\n          const isNodeServer = idx === 1\n          const isEdgeServer = idx === 2\n          const hasRewrites =\n            opts.fsChecker.rewrites.afterFiles.length > 0 ||\n            opts.fsChecker.rewrites.beforeFiles.length > 0 ||\n            opts.fsChecker.rewrites.fallback.length > 0\n\n          if (tsconfigChange) {\n            config.resolve?.plugins?.forEach((plugin: any) => {\n              // look for the JsConfigPathsPlugin and update with\n              // the latest paths/baseUrl config\n              if (plugin instanceof JsConfigPathsPlugin && tsconfigResult) {\n                const { resolvedBaseUrl, jsConfig } = tsconfigResult\n                const currentResolvedBaseUrl = plugin.resolvedBaseUrl\n                const resolvedUrlIndex = config.resolve?.modules?.findIndex(\n                  (item) => item === currentResolvedBaseUrl?.baseUrl\n                )\n\n                if (resolvedBaseUrl) {\n                  if (\n                    resolvedBaseUrl.baseUrl !== currentResolvedBaseUrl?.baseUrl\n                  ) {\n                    // remove old baseUrl and add new one\n                    if (resolvedUrlIndex && resolvedUrlIndex > -1) {\n                      config.resolve?.modules?.splice(resolvedUrlIndex, 1)\n                    }\n\n                    // If the resolvedBaseUrl is implicit we only remove the previous value.\n                    // Only add the baseUrl if it's explicitly set in tsconfig/jsconfig\n                    if (!resolvedBaseUrl.isImplicit) {\n                      config.resolve?.modules?.push(resolvedBaseUrl.baseUrl)\n                    }\n                  }\n                }\n\n                if (jsConfig?.compilerOptions?.paths && resolvedBaseUrl) {\n                  Object.keys(plugin.paths).forEach((key) => {\n                    delete plugin.paths[key]\n                  })\n                  Object.assign(plugin.paths, jsConfig.compilerOptions.paths)\n                  plugin.resolvedBaseUrl = resolvedBaseUrl\n                }\n              }\n            })\n          }\n\n          if (envChange) {\n            config.plugins?.forEach((plugin: any) => {\n              // we look for the DefinePlugin definitions so we can\n              // update them on the active compilers\n              if (\n                plugin &&\n                typeof plugin.definitions === 'object' &&\n                plugin.definitions.__NEXT_DEFINE_ENV\n              ) {\n                const newDefine = getDefineEnv({\n                  isTurbopack: false,\n                  clientRouterFilters,\n                  config: nextConfig,\n                  dev: true,\n                  distDir,\n                  fetchCacheKeyPrefix:\n                    opts.nextConfig.experimental.fetchCacheKeyPrefix,\n                  hasRewrites,\n                  isClient,\n                  isEdgeServer,\n                  isNodeOrEdgeCompilation: isNodeServer || isEdgeServer,\n                  isNodeServer,\n                  middlewareMatchers: undefined,\n                })\n\n                Object.keys(plugin.definitions).forEach((key) => {\n                  if (!(key in newDefine)) {\n                    delete plugin.definitions[key]\n                  }\n                })\n                Object.assign(plugin.definitions, newDefine)\n              }\n            })\n          }\n        })\n        await hotReloader.invalidate({\n          reloadAfterInvalidation: envChange,\n        })\n      }\n\n      if (nestedMiddleware.length > 0) {\n        Log.error(\n          new NestedMiddlewareError(\n            nestedMiddleware,\n            dir,\n            (pagesDir || appDir)!\n          ).message\n        )\n        nestedMiddleware = []\n      }\n\n      // Make sure to sort parallel routes to make the result deterministic.\n      serverFields.appPathRoutes = Object.fromEntries(\n        Object.entries(appPaths).map(([k, v]) => [k, v.sort()])\n      )\n      await propagateServerField(\n        opts,\n        'appPathRoutes',\n        serverFields.appPathRoutes\n      )\n\n      // TODO: pass this to fsChecker/next-dev-server?\n      serverFields.middleware = middlewareMatchers\n        ? {\n            match: null as any,\n            page: '/',\n            matchers: middlewareMatchers,\n          }\n        : undefined\n\n      await propagateServerField(opts, 'middleware', serverFields.middleware)\n      serverFields.hasAppNotFound = hasRootAppNotFound\n\n      opts.fsChecker.middlewareMatcher = serverFields.middleware?.matchers\n        ? getMiddlewareRouteMatcher(serverFields.middleware?.matchers)\n        : undefined\n\n      const interceptionRoutes = generateInterceptionRoutesRewrites(\n        Object.keys(appPaths),\n        opts.nextConfig.basePath\n      ).map((item) =>\n        buildCustomRoute(\n          'before_files_rewrite',\n          item,\n          opts.nextConfig.basePath,\n          opts.nextConfig.experimental.caseSensitiveRoutes\n        )\n      )\n\n      opts.fsChecker.rewrites.beforeFiles.push(...interceptionRoutes)\n\n      const exportPathMap =\n        (typeof nextConfig.exportPathMap === 'function' &&\n          (await nextConfig.exportPathMap?.(\n            {},\n            {\n              dev: true,\n              dir: opts.dir,\n              outDir: null,\n              distDir: distDir,\n              buildId: 'development',\n            }\n          ))) ||\n        {}\n\n      const exportPathMapEntries = Object.entries(exportPathMap || {})\n\n      if (exportPathMapEntries.length > 0) {\n        opts.fsChecker.exportPathMapRoutes = exportPathMapEntries.map(\n          ([key, value]) =>\n            buildCustomRoute(\n              'before_files_rewrite',\n              {\n                source: key,\n                destination: `${value.page}${\n                  value.query ? '?' : ''\n                }${qs.stringify(value.query)}`,\n              },\n              opts.nextConfig.basePath,\n              opts.nextConfig.experimental.caseSensitiveRoutes\n            )\n        )\n      }\n\n      try {\n        // we serve a separate manifest with all pages for the client in\n        // dev mode so that we can match a page after a rewrite on the client\n        // before it has been built and is populated in the _buildManifest\n        const sortedRoutes = getSortedRoutes(routedPages)\n\n        opts.fsChecker.dynamicRoutes = sortedRoutes.map(\n          (page): FilesystemDynamicRoute => {\n            const regex = getRouteRegex(page)\n            return {\n              regex: regex.re.toString(),\n              match: getRouteMatcher(regex),\n              page,\n            }\n          }\n        )\n\n        const dataRoutes: typeof opts.fsChecker.dynamicRoutes = []\n\n        for (const page of sortedRoutes) {\n          const route = buildDataRoute(page, 'development')\n          const routeRegex = getRouteRegex(route.page)\n          dataRoutes.push({\n            ...route,\n            regex: routeRegex.re.toString(),\n            match: getRouteMatcher({\n              // TODO: fix this in the manifest itself, must also be fixed in\n              // upstream builder that relies on this\n              re: opts.nextConfig.i18n\n                ? new RegExp(\n                    route.dataRouteRegex.replace(\n                      `/development/`,\n                      `/development/(?<nextLocale>[^/]+?)/`\n                    )\n                  )\n                : new RegExp(route.dataRouteRegex),\n              groups: routeRegex.groups,\n            }),\n          })\n        }\n        opts.fsChecker.dynamicRoutes.unshift(...dataRoutes)\n\n        if (!prevSortedRoutes?.every((val, idx) => val === sortedRoutes[idx])) {\n          const addedRoutes = sortedRoutes.filter(\n            (route) => !prevSortedRoutes.includes(route)\n          )\n          const removedRoutes = prevSortedRoutes.filter(\n            (route) => !sortedRoutes.includes(route)\n          )\n\n          // emit the change so clients fetch the update\n          hotReloader.send({\n            action: HMR_ACTIONS_SENT_TO_BROWSER.DEV_PAGES_MANIFEST_UPDATE,\n            data: [\n              {\n                devPagesManifest: true,\n              },\n            ],\n          })\n\n          addedRoutes.forEach((route) => {\n            hotReloader.send({\n              action: HMR_ACTIONS_SENT_TO_BROWSER.ADDED_PAGE,\n              data: [route],\n            })\n          })\n\n          removedRoutes.forEach((route) => {\n            hotReloader.send({\n              action: HMR_ACTIONS_SENT_TO_BROWSER.REMOVED_PAGE,\n              data: [route],\n            })\n          })\n        }\n        prevSortedRoutes = sortedRoutes\n\n        if (!resolved) {\n          resolve()\n          resolved = true\n        }\n      } catch (e) {\n        if (!resolved) {\n          reject(e)\n          resolved = true\n        } else {\n          Log.warn('Failed to reload dynamic routes:', e)\n        }\n      } finally {\n        // Reload the matchers. The filesystem would have been written to,\n        // and the matchers need to re-scan it to update the router.\n        await propagateServerField(opts, 'reloadMatchers', undefined)\n      }\n    })\n\n    wp.watch({ directories: [dir], startTime: 0 })\n  })\n\n  const clientPagesManifestPath = `/_next/${CLIENT_STATIC_FILES_PATH}/development/${DEV_CLIENT_PAGES_MANIFEST}`\n  opts.fsChecker.devVirtualFsItems.add(clientPagesManifestPath)\n\n  const devMiddlewareManifestPath = `/_next/${CLIENT_STATIC_FILES_PATH}/development/${DEV_CLIENT_MIDDLEWARE_MANIFEST}`\n  opts.fsChecker.devVirtualFsItems.add(devMiddlewareManifestPath)\n\n  async function requestHandler(req: IncomingMessage, res: ServerResponse) {\n    const parsedUrl = url.parse(req.url || '/')\n\n    if (parsedUrl.pathname?.includes(clientPagesManifestPath)) {\n      res.statusCode = 200\n      res.setHeader('Content-Type', 'application/json; charset=utf-8')\n      res.end(\n        JSON.stringify({\n          pages: prevSortedRoutes.filter(\n            (route) => !opts.fsChecker.appFiles.has(route)\n          ),\n        })\n      )\n      return { finished: true }\n    }\n\n    if (parsedUrl.pathname?.includes(devMiddlewareManifestPath)) {\n      res.statusCode = 200\n      res.setHeader('Content-Type', 'application/json; charset=utf-8')\n      res.end(JSON.stringify(serverFields.middleware?.matchers || []))\n      return { finished: true }\n    }\n    return { finished: false }\n  }\n\n  async function logErrorWithOriginalStack(\n    err: unknown,\n    type?: 'unhandledRejection' | 'uncaughtException' | 'warning' | 'app-dir'\n  ) {\n    let usedOriginalStack = false\n\n    if (isError(err) && err.stack) {\n      try {\n        const frames = parseStack(err.stack!)\n        // Filter out internal edge related runtime stack\n        const frame = frames.find(\n          ({ file }) =>\n            !file?.startsWith('eval') &&\n            !file?.includes('web/adapter') &&\n            !file?.includes('web/globals') &&\n            !file?.includes('sandbox/context') &&\n            !file?.includes('<anonymous>')\n        )\n\n        let originalFrame, isEdgeCompiler\n        const frameFile = frame?.file\n        if (frame?.lineNumber && frameFile) {\n          if (hotReloader.turbopackProject) {\n            try {\n              originalFrame = await createOriginalTurboStackFrame(\n                hotReloader.turbopackProject,\n                {\n                  file: frameFile,\n                  methodName: frame.methodName,\n                  line: frame.lineNumber ?? 0,\n                  column: frame.column,\n                  isServer: true,\n                }\n              )\n            } catch {}\n          } else {\n            const moduleId = frameFile.replace(\n              /^(webpack-internal:\\/\\/\\/|file:\\/\\/)/,\n              ''\n            )\n            const modulePath = frameFile.replace(\n              /^(webpack-internal:\\/\\/\\/|file:\\/\\/)(\\(.*\\)\\/)?/,\n              ''\n            )\n\n            const src = getErrorSource(err as Error)\n            isEdgeCompiler = src === COMPILER_NAMES.edgeServer\n            const compilation = (\n              isEdgeCompiler\n                ? hotReloader.edgeServerStats?.compilation\n                : hotReloader.serverStats?.compilation\n            )!\n\n            const source = await getSourceById(\n              !!frame.file?.startsWith(path.sep) ||\n                !!frame.file?.startsWith('file:'),\n              moduleId,\n              compilation\n            )\n\n            try {\n              originalFrame = await createOriginalStackFrame({\n                source,\n                frame,\n                moduleId,\n                modulePath,\n                rootDirectory: opts.dir,\n                errorMessage: err.message,\n                compilation: isEdgeCompiler\n                  ? hotReloader.edgeServerStats?.compilation\n                  : hotReloader.serverStats?.compilation,\n              })\n            } catch {}\n          }\n\n          if (\n            originalFrame?.originalCodeFrame &&\n            originalFrame.originalStackFrame\n          ) {\n            const { originalCodeFrame, originalStackFrame } = originalFrame\n            const { file, lineNumber, column, methodName } = originalStackFrame\n\n            Log[type === 'warning' ? 'warn' : 'error'](\n              `${file} (${lineNumber}:${column}) @ ${methodName}`\n            )\n\n            let errorToLog\n            if (isEdgeCompiler) {\n              errorToLog = err.message\n            } else if (isError(err) && hotReloader.turbopackProject) {\n              const stack = await traceTurbopackErrorStack(\n                hotReloader.turbopackProject,\n                err,\n                frames\n              )\n\n              const error: NextError = new Error(err.message)\n              error.stack = stack\n              error.digest = err.digest\n              errorToLog = error\n            } else {\n              errorToLog = err\n            }\n\n            logError(errorToLog, type)\n            console[type === 'warning' ? 'warn' : 'error'](originalCodeFrame)\n            usedOriginalStack = true\n          }\n        }\n      } catch (_) {\n        // failed to load original stack using source maps\n        // this un-actionable by users so we don't show the\n        // internal error and only show the provided stack\n      }\n    }\n\n    if (!usedOriginalStack) {\n      logError(err, type)\n    }\n  }\n\n  return {\n    serverFields,\n    hotReloader,\n    requestHandler,\n    logErrorWithOriginalStack,\n\n    async ensureMiddleware(requestUrl?: string) {\n      if (!serverFields.actualMiddlewareFile) return\n      return hotReloader.ensurePage({\n        page: serverFields.actualMiddlewareFile,\n        clientOnly: false,\n        definition: undefined,\n        url: requestUrl,\n      })\n    },\n  }\n}\n\nfunction logError(\n  err: unknown,\n  type?: 'unhandledRejection' | 'uncaughtException' | 'warning' | 'app-dir'\n) {\n  if (err instanceof ModuleBuildError) {\n    // Errors that may come from issues from the user's code\n    Log.error(err.message)\n  } else if (err instanceof TurbopackInternalError) {\n    // An internal Turbopack error that has been handled by next-swc, written\n    // to disk and a simplified message shown to user on the Rust side.\n  } else if (type === 'warning') {\n    Log.warn(err)\n  } else if (type === 'app-dir') {\n    logAppDirError(err)\n  } else if (type) {\n    Log.error(`${type}:`, err)\n  } else {\n    Log.error(err)\n  }\n}\n\nexport async function setupDevBundler(opts: SetupOpts) {\n  const isSrcDir = path\n    .relative(opts.dir, opts.pagesDir || opts.appDir || '')\n    .startsWith('src')\n\n  const result = await startWatcher(opts)\n\n  opts.telemetry.record(\n    eventCliSession(\n      path.join(opts.dir, opts.nextConfig.distDir),\n      opts.nextConfig,\n      {\n        webpackVersion: 5,\n        isSrcDir,\n        turboFlag: !!opts.turbo,\n        cliCommand: 'dev',\n        appDir: !!opts.appDir,\n        pagesDir: !!opts.pagesDir,\n        isCustomServer: !!opts.isCustomServer,\n        hasNowJson: !!(await findUp('now.json', { cwd: opts.dir })),\n      }\n    )\n  )\n  return result\n}\n\nexport type DevBundler = Awaited<ReturnType<typeof setupDevBundler>>\n\n// Returns a trace rewritten through Turbopack's sourcemaps\nasync function traceTurbopackErrorStack(\n  project: Project,\n  error: Error,\n  frames: StackFrame[]\n): Promise<string> {\n  let originalFrames = await Promise.all(\n    frames.map(async (f) => {\n      try {\n        const traced = await batchedTraceSource(project, {\n          file: f.file!,\n          methodName: f.methodName,\n          line: f.lineNumber ?? 0,\n          column: f.column,\n          isServer: true,\n        })\n\n        return traced?.frame ?? f\n      } catch {\n        return f\n      }\n    })\n  )\n\n  return (\n    error.name +\n    ': ' +\n    error.message +\n    '\\n' +\n    originalFrames\n      .map((f) => {\n        if (f == null) {\n          return null\n        }\n\n        let line = '    at'\n        if (f.methodName != null) {\n          line += ' ' + f.methodName\n        }\n\n        if (f.file != null) {\n          const file =\n            f.file.startsWith('/') ||\n            // Built-in \"filenames\" like `<anonymous>` shouldn't be made relative\n            f.file.startsWith('<') ||\n            f.file.startsWith('node:')\n              ? f.file\n              : `./${f.file}`\n\n          line += ` (${file}`\n          if (f.lineNumber != null) {\n            line += ':' + f.lineNumber\n\n            if (f.column != null) {\n              line += ':' + f.column\n            }\n          }\n          line += ')'\n        }\n\n        return line\n      })\n      .filter(Boolean)\n      .join('\\n')\n  )\n}\n"],"names":["propagateServerField","setupDevBundler","verifyTypeScript","opts","usingTypeScript","verifyResult","verifyTypeScriptSetup","dir","distDir","nextConfig","intentDirs","pagesDir","appDir","filter","Boolean","typeCheckPreflight","tsconfigPath","typescript","disableStaticImages","images","hasAppDir","hasPagesDir","version","field","args","renderServer","instance","startWatcher","useFileSystemPublicRoutes","path","join","distTypesDir","fs","existsSync","mkdir","recursive","setGlobal","PHASE_DEVELOPMENT_SERVER","validFileMatcher","createValidFileMatcher","pageExtensions","serverFields","hotReloader","turbo","createHotReloaderTurbopack","HotReloaderWebpack","config","buildId","encryptionKey","generateEncryptionKeyBase64","telemetry","rewrites","fsChecker","previewProps","prerenderManifest","preview","start","experimental","nextScriptWorkers","verifyPartytownSetup","CLIENT_STATIC_FILES_PATH","ensureCallback","ensure","item","type","ensurePage","clientOnly","page","itemPath","isApp","definition","undefined","resolved","prevSortedRoutes","Promise","resolve","reject","readdir","_","files","length","pages","app","directories","rootDir","getPossibleMiddlewareFilenames","getPossibleInstrumentationHookFilenames","nestedMiddleware","envFiles","map","file","push","tsconfigPaths","wp","Watchpack","ignored","pathname","some","startsWith","d","fileWatchTimes","Map","enabledTypeScript","previousClientRouterFilters","previousConflictingPagePaths","Set","on","middlewareMatchers","routedPages","knownFiles","getTimeInfoEntries","appPaths","pageNameSet","conflictingAppPagePaths","appPageFilePaths","pagesPageFilePaths","envChange","tsconfigChange","conflictingPageChange","hasRootAppNotFound","appFiles","pageFiles","clear","devPageFiles","sortedKnownFiles","keys","sort","sortByPageExts","fileName","includes","meta","get","watchTime","watchTimeChange","timestamp","set","endsWith","accuracy","isPageFile","isAppPath","normalizePathSep","isPagePath","rootFile","absolutePathToPage","extensions","keepIndex","pagesType","PAGE_TYPES","ROOT","isMiddlewareFile","staticInfo","getStaticInfoIncludingLayouts","pageFilePath","isDev","isInsideAppDir","output","Log","error","actualMiddlewareFile","middleware","matchers","regexp","originalSource","isInstrumentationHookFile","instrumentationHook","actualInstrumentationHookFile","add","pageName","APP","PAGES","isMetadataRoute","getPageStaticInfo","pageType","normalizeMetadataPageToRoute","generateSitemaps","generateImageMetadata","isRootNotFound","isAppRouterPage","originalPageName","normalizeAppPath","replace","nextDataRoutes","has","test","numConflicting","size","errorMessage","p","appPath","relative","pagesPath","setHmrServerError","Error","clearHmrServerError","clientRouterFilters","clientRouterFilter","createClientRouterFilter","Object","clientRouterFilterRedirects","_originalRedirects","r","internal","clientRouterFilterAllowedRate","JSON","stringify","then","catch","parsedEnv","loadEnvConfig","envFilePath","info","typedEnv","createEnvDefinitions","env","dev","forceReload","silent","tsconfigResult","loadJsConfig","turbopackProject","hasRewrites","afterFiles","beforeFiles","fallback","update","defineEnv","createDefineEnv","isTurbopack","fetchCacheKeyPrefix","activeWebpackConfigs","forEach","idx","isClient","isNodeServer","isEdgeServer","plugins","plugin","JsConfigPathsPlugin","jsConfig","resolvedBaseUrl","currentResolvedBaseUrl","resolvedUrlIndex","modules","findIndex","baseUrl","splice","isImplicit","compilerOptions","paths","key","assign","definitions","__NEXT_DEFINE_ENV","newDefine","getDefineEnv","isNodeOrEdgeCompilation","invalidate","reloadAfterInvalidation","NestedMiddlewareError","message","appPathRoutes","fromEntries","entries","k","v","match","hasAppNotFound","middlewareMatcher","getMiddlewareRouteMatcher","interceptionRoutes","generateInterceptionRoutesRewrites","basePath","buildCustomRoute","caseSensitiveRoutes","exportPathMap","outDir","exportPathMapEntries","exportPathMapRoutes","value","source","destination","query","qs","sortedRoutes","getSortedRoutes","dynamicRoutes","regex","getRouteRegex","re","toString","getRouteMatcher","dataRoutes","route","buildDataRoute","routeRegex","i18n","RegExp","dataRouteRegex","groups","unshift","every","val","addedRoutes","removedRoutes","send","action","HMR_ACTIONS_SENT_TO_BROWSER","DEV_PAGES_MANIFEST_UPDATE","data","devPagesManifest","ADDED_PAGE","REMOVED_PAGE","e","warn","watch","startTime","clientPagesManifestPath","DEV_CLIENT_PAGES_MANIFEST","devVirtualFsItems","devMiddlewareManifestPath","DEV_CLIENT_MIDDLEWARE_MANIFEST","requestHandler","req","res","parsedUrl","url","parse","statusCode","setHeader","end","finished","logErrorWithOriginalStack","err","usedOriginalStack","isError","stack","frames","parseStack","frame","find","originalFrame","isEdgeCompiler","frameFile","lineNumber","createOriginalTurboStackFrame","methodName","line","column","isServer","moduleId","modulePath","src","getErrorSource","COMPILER_NAMES","edgeServer","compilation","edgeServerStats","serverStats","getSourceById","sep","createOriginalStackFrame","rootDirectory","originalCodeFrame","originalStackFrame","errorToLog","traceTurbopackErrorStack","digest","logError","console","ensureMiddleware","requestUrl","ModuleBuildError","TurbopackInternalError","logAppDirError","isSrcDir","result","record","eventCliSession","webpackVersion","turboFlag","cliCommand","isCustomServer","hasNowJson","findUp","cwd","project","originalFrames","all","f","traced","batchedTraceSource","name"],"mappings":"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"}