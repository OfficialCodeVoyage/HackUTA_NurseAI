{"version":3,"sources":["../../src/server/post-process.ts"],"sourcesContent":["import type { RenderOpts } from './render'\nimport type { HTMLElement } from 'next/dist/compiled/node-html-parser'\n\nimport { OPTIMIZED_FONT_PROVIDERS } from '../shared/lib/constants'\nimport { nonNullable } from '../lib/non-nullable'\n\ntype postProcessOptions = {\n  optimizeFonts: any\n}\n\ntype renderOptions = {\n  getFontDefinition?: (url: string) => string\n}\ninterface PostProcessMiddleware {\n  inspect: (originalDom: HTMLElement, options: renderOptions) => any\n  mutate: (markup: string, data: any, options: renderOptions) => Promise<string>\n}\n\ntype middlewareSignature = {\n  name: string\n  middleware: PostProcessMiddleware\n  condition: ((options: postProcessOptions) => boolean) | null\n}\n\ntype PostProcessorFunction =\n  | ((html: string) => Promise<string>)\n  | ((html: string) => string)\n\nconst middlewareRegistry: Array<middlewareSignature> = []\n\nfunction registerPostProcessor(\n  name: string,\n  middleware: PostProcessMiddleware,\n  condition?: (options: postProcessOptions) => boolean\n) {\n  middlewareRegistry.push({ name, middleware, condition: condition || null })\n}\n\nasync function processHTML(\n  html: string,\n  data: renderOptions,\n  options: postProcessOptions\n): Promise<string> {\n  // Don't parse unless there's at least one processor middleware\n  if (!middlewareRegistry[0]) {\n    return html\n  }\n\n  const { parse } =\n    require('next/dist/compiled/node-html-parser') as typeof import('next/dist/compiled/node-html-parser')\n  const root: HTMLElement = parse(html)\n  let document = html\n\n  // Calls the middleware, with some instrumentation and logging\n  async function callMiddleWare(middleware: PostProcessMiddleware) {\n    // let timer = Date.now()\n    const inspectData = middleware.inspect(root, data)\n    document = await middleware.mutate(document, inspectData, data)\n    // timer = Date.now() - timer\n    // if (timer > MIDDLEWARE_TIME_BUDGET) {\n    // TODO: Identify a correct upper limit for the postprocess step\n    // and add a warning to disable the optimization\n    // }\n    return\n  }\n\n  for (let i = 0; i < middlewareRegistry.length; i++) {\n    let middleware = middlewareRegistry[i]\n    if (!middleware.condition || middleware.condition(options)) {\n      await callMiddleWare(middlewareRegistry[i].middleware)\n    }\n  }\n\n  return document\n}\n\nclass FontOptimizerMiddleware implements PostProcessMiddleware {\n  inspect(originalDom: HTMLElement, options: renderOptions) {\n    if (!options.getFontDefinition) {\n      return\n    }\n    const fontDefinitions: (string | undefined)[][] = []\n    // collecting all the requested font definitions\n    originalDom\n      .querySelectorAll('link')\n      .filter(\n        (tag: HTMLElement) =>\n          tag.getAttribute('rel') === 'stylesheet' &&\n          tag.hasAttribute('data-href') &&\n          OPTIMIZED_FONT_PROVIDERS.some(({ url }) => {\n            const dataHref = tag.getAttribute('data-href')\n            return dataHref ? dataHref.startsWith(url) : false\n          })\n      )\n      .forEach((element: HTMLElement) => {\n        const url = element.getAttribute('data-href')\n        const nonce = element.getAttribute('nonce')\n\n        if (url) {\n          fontDefinitions.push([url, nonce])\n        }\n      })\n\n    return fontDefinitions\n  }\n  mutate = async (\n    markup: string,\n    fontDefinitions: string[][],\n    options: renderOptions\n  ) => {\n    let result = markup\n    let preconnectUrls = new Set<string>()\n\n    if (!options.getFontDefinition) {\n      return markup\n    }\n\n    fontDefinitions.forEach((fontDef) => {\n      const [url, nonce] = fontDef\n      const fallBackLinkTag = `<link rel=\"stylesheet\" href=\"${url}\"/>`\n      if (\n        result.indexOf(`<style data-href=\"${url}\">`) > -1 ||\n        result.indexOf(fallBackLinkTag) > -1\n      ) {\n        // The font is already optimized and probably the response is cached\n        return\n      }\n      const fontContent = options.getFontDefinition\n        ? options.getFontDefinition(url as string)\n        : null\n      if (!fontContent) {\n        /**\n         * In case of unreachable font definitions, fallback to default link tag.\n         */\n        result = result.replace('</head>', `${fallBackLinkTag}</head>`)\n      } else {\n        const nonceStr = nonce ? ` nonce=\"${nonce}\"` : ''\n        let dataAttr = ''\n\n        if (fontContent.includes('ascent-override')) {\n          dataAttr = ' data-size-adjust=\"true\"'\n        }\n\n        result = result.replace(\n          '</head>',\n          `<style data-href=\"${url}\"${nonceStr}${dataAttr}>${fontContent}</style></head>`\n        )\n\n        // Remove inert font tag\n        const escapedUrl = url\n          .replace(/&/g, '&amp;')\n          .replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n        const fontRegex = new RegExp(\n          `<link[^>]*data-href=\"${escapedUrl}\"[^>]*/>`\n        )\n        result = result.replace(fontRegex, '')\n\n        const provider = OPTIMIZED_FONT_PROVIDERS.find((p) =>\n          url.startsWith(p.url)\n        )\n\n        if (provider) {\n          preconnectUrls.add(provider.preconnect)\n        }\n      }\n    })\n\n    let preconnectTag = ''\n    preconnectUrls.forEach((url) => {\n      preconnectTag += `<link rel=\"preconnect\" href=\"${url}\" crossorigin />`\n    })\n\n    result = result.replace(\n      '<meta name=\"next-font-preconnect\"/>',\n      preconnectTag\n    )\n\n    return result\n  }\n}\n\nasync function postProcessHTML(\n  pathname: string,\n  content: string,\n  renderOpts: Pick<\n    RenderOpts,\n    | 'ampOptimizerConfig'\n    | 'ampValidator'\n    | 'ampSkipValidation'\n    | 'optimizeFonts'\n    | 'fontManifest'\n    | 'optimizeCss'\n    | 'distDir'\n    | 'assetPrefix'\n  >,\n  { inAmpMode, hybridAmp }: { inAmpMode: boolean; hybridAmp: boolean }\n) {\n  const postProcessors: Array<PostProcessorFunction> = [\n    process.env.NEXT_RUNTIME !== 'edge' && inAmpMode\n      ? async (html: string) => {\n          const optimizeAmp = require('./optimize-amp')\n            .default as typeof import('./optimize-amp').default\n          html = await optimizeAmp!(html, renderOpts.ampOptimizerConfig)\n          if (!renderOpts.ampSkipValidation && renderOpts.ampValidator) {\n            await renderOpts.ampValidator(html, pathname)\n          }\n          return html\n        }\n      : null,\n    process.env.NEXT_RUNTIME !== 'edge' && renderOpts.optimizeFonts\n      ? async (html: string) => {\n          const getFontDefinition = (url: string) => {\n            if (!renderOpts.fontManifest) {\n              return ''\n            }\n            return (\n              renderOpts.fontManifest.find((font) => {\n                if (font && font.url === url) {\n                  return true\n                }\n                return false\n              })?.content || ''\n            )\n          }\n          return await processHTML(\n            html,\n            { getFontDefinition },\n            {\n              optimizeFonts: renderOpts.optimizeFonts,\n            }\n          )\n        }\n      : null,\n    process.env.NEXT_RUNTIME !== 'edge' && renderOpts.optimizeCss\n      ? async (html: string) => {\n          // eslint-disable-next-line import/no-extraneous-dependencies\n          const Critters = require('critters')\n          const cssOptimizer = new Critters({\n            ssrMode: true,\n            reduceInlineStyles: false,\n            path: renderOpts.distDir,\n            publicPath: `${renderOpts.assetPrefix}/_next/`,\n            preload: 'media',\n            fonts: false,\n            logLevel:\n              process.env.CRITTERS_LOG_LEVEL ||\n              (process.env.NODE_ENV === 'production' ? 'warn' : 'info'),\n            ...renderOpts.optimizeCss,\n          })\n          return await cssOptimizer.process(html)\n        }\n      : null,\n    inAmpMode || hybridAmp\n      ? (html: string) => {\n          return html.replace(/&amp;amp=1/g, '&amp=1')\n        }\n      : null,\n  ].filter(nonNullable)\n\n  for (const postProcessor of postProcessors) {\n    if (postProcessor) {\n      content = await postProcessor(content)\n    }\n  }\n  return content\n}\n\n// Initialization\nregisterPostProcessor(\n  'Inline-Fonts',\n  new FontOptimizerMiddleware(),\n  // Using process.env because passing Experimental flag through loader is not possible.\n  // @ts-ignore\n  (options) => options.optimizeFonts || process.env.__NEXT_OPTIMIZE_FONTS\n)\n\nexport { postProcessHTML }\n"],"names":["postProcessHTML","middlewareRegistry","registerPostProcessor","name","middleware","condition","push","processHTML","html","data","options","parse","require","root","document","callMiddleWare","inspectData","inspect","mutate","i","length","FontOptimizerMiddleware","originalDom","getFontDefinition","fontDefinitions","querySelectorAll","filter","tag","getAttribute","hasAttribute","OPTIMIZED_FONT_PROVIDERS","some","url","dataHref","startsWith","forEach","element","nonce","markup","result","preconnectUrls","Set","fontDef","fallBackLinkTag","indexOf","fontContent","replace","nonceStr","dataAttr","includes","escapedUrl","fontRegex","RegExp","provider","find","p","add","preconnect","preconnectTag","pathname","content","renderOpts","inAmpMode","hybridAmp","postProcessors","process","env","NEXT_RUNTIME","optimizeAmp","default","ampOptimizerConfig","ampSkipValidation","ampValidator","optimizeFonts","fontManifest","font","optimizeCss","Critters","cssOptimizer","ssrMode","reduceInlineStyles","path","distDir","publicPath","assetPrefix","preload","fonts","logLevel","CRITTERS_LOG_LEVEL","NODE_ENV","nonNullable","postProcessor","__NEXT_OPTIMIZE_FONTS"],"mappings":"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"}