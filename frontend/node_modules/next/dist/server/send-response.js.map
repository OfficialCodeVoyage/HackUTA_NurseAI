{"version":3,"sources":["../../src/server/send-response.ts"],"sourcesContent":["import type { BaseNextRequest, BaseNextResponse } from './base-http'\nimport { isNodeNextResponse } from './base-http/helpers'\n\nimport { pipeToNodeResponse } from './pipe-readable'\nimport { splitCookiesString } from './web/utils'\n\n/**\n * Sends the response on the underlying next response object.\n *\n * @param req the underlying request object\n * @param res the underlying response object\n * @param response the response to send\n */\nexport async function sendResponse(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  response: Response,\n  waitUntil?: Promise<unknown>\n): Promise<void> {\n  if (\n    // The type check here ensures that `req` is correctly typed, and the\n    // environment variable check provides dead code elimination.\n    process.env.NEXT_RUNTIME !== 'edge' &&\n    isNodeNextResponse(res)\n  ) {\n    // Copy over the response status.\n    res.statusCode = response.status\n    res.statusMessage = response.statusText\n\n    // Copy over the response headers.\n    response.headers?.forEach((value, name) => {\n      // The append handling is special cased for `set-cookie`.\n      if (name.toLowerCase() === 'set-cookie') {\n        // TODO: (wyattjoh) replace with native response iteration when we can upgrade undici\n        for (const cookie of splitCookiesString(value)) {\n          res.appendHeader(name, cookie)\n        }\n      } else {\n        res.appendHeader(name, value)\n      }\n    })\n\n    /**\n     * The response can't be directly piped to the underlying response. The\n     * following is duplicated from the edge runtime handler.\n     *\n     * See packages/next/server/next-server.ts\n     */\n\n    const { originalResponse } = res\n\n    // A response body must not be sent for HEAD requests. See https://httpwg.org/specs/rfc9110.html#HEAD\n    if (response.body && req.method !== 'HEAD') {\n      await pipeToNodeResponse(response.body, originalResponse, waitUntil)\n    } else {\n      originalResponse.end()\n    }\n  }\n}\n"],"names":["sendResponse","req","res","response","waitUntil","process","env","NEXT_RUNTIME","isNodeNextResponse","statusCode","status","statusMessage","statusText","headers","forEach","value","name","toLowerCase","cookie","splitCookiesString","appendHeader","originalResponse","body","method","pipeToNodeResponse","end"],"mappings":";;;;+BAasBA;;;eAAAA;;;yBAZa;8BAEA;uBACA;AAS5B,eAAeA,aACpBC,GAAoB,EACpBC,GAAqB,EACrBC,QAAkB,EAClBC,SAA4B;IAE5B,IACE,qEAAqE;IACrE,6DAA6D;IAC7DC,QAAQC,GAAG,CAACC,YAAY,KAAK,UAC7BC,IAAAA,2BAAkB,EAACN,MACnB;YAKA,kCAAkC;QAClCC;QALA,iCAAiC;QACjCD,IAAIO,UAAU,GAAGN,SAASO,MAAM;QAChCR,IAAIS,aAAa,GAAGR,SAASS,UAAU;SAGvCT,oBAAAA,SAASU,OAAO,qBAAhBV,kBAAkBW,OAAO,CAAC,CAACC,OAAOC;YAChC,yDAAyD;YACzD,IAAIA,KAAKC,WAAW,OAAO,cAAc;gBACvC,qFAAqF;gBACrF,KAAK,MAAMC,UAAUC,IAAAA,yBAAkB,EAACJ,OAAQ;oBAC9Cb,IAAIkB,YAAY,CAACJ,MAAME;gBACzB;YACF,OAAO;gBACLhB,IAAIkB,YAAY,CAACJ,MAAMD;YACzB;QACF;QAEA;;;;;KAKC,GAED,MAAM,EAAEM,gBAAgB,EAAE,GAAGnB;QAE7B,qGAAqG;QACrG,IAAIC,SAASmB,IAAI,IAAIrB,IAAIsB,MAAM,KAAK,QAAQ;YAC1C,MAAMC,IAAAA,gCAAkB,EAACrB,SAASmB,IAAI,EAAED,kBAAkBjB;QAC5D,OAAO;YACLiB,iBAAiBI,GAAG;QACtB;IACF;AACF"}