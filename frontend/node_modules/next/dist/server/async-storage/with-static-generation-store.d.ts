import type { WithStore } from './with-store';
import type { StaticGenerationStore } from '../../client/components/static-generation-async-storage.external';
import type { IncrementalCache } from '../lib/incremental-cache';
import type { RenderOptsPartial } from '../app-render/types';
import type { FetchMetric } from '../base-http';
import type { RequestLifecycleOpts } from '../base-server';
export type StaticGenerationContext = {
    /**
     * The page that is being rendered. This relates to the path to the page file.
     */
    page: string;
    requestEndedState?: {
        ended?: boolean;
    };
    renderOpts: {
        incrementalCache?: IncrementalCache;
        isOnDemandRevalidate?: boolean;
        fetchCache?: StaticGenerationStore['fetchCache'];
        isServerAction?: boolean;
        pendingWaitUntil?: Promise<any>;
        experimental: Pick<RenderOptsPartial['experimental'], 'isRoutePPREnabled' | 'after'>;
        /**
         * Fetch metrics attached in patch-fetch.ts
         **/
        fetchMetrics?: FetchMetric[];
    } & Pick<RenderOptsPartial, 'supportsDynamicResponse' | 'isRevalidate' | 'nextExport' | 'isDraftMode' | 'isDebugDynamicAccesses'> & Partial<RequestLifecycleOpts>;
};
export declare const withStaticGenerationStore: WithStore<StaticGenerationStore, StaticGenerationContext>;
