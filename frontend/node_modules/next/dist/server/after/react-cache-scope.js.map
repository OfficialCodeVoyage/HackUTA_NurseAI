{"version":3,"sources":["../../../src/server/after/react-cache-scope.ts"],"sourcesContent":["import { AsyncLocalStorage } from 'async_hooks'\nimport { InvariantError } from '../../shared/lib/invariant-error'\n\nexport function createCacheScope() {\n  const storage = createCacheMap()\n  return {\n    run: <T>(callback: () => T): T => {\n      return CacheScopeStorage.run(storage, () => callback())\n    },\n  }\n}\n\nexport type CacheScope = ReturnType<typeof createCacheScope>\n\n// #region  custom cache dispatcher with support for scoping\n\n// Note that the plan is to upstream this into React itself,\n// but after() is an experimental feature, and this should be good enough for now.\n\ntype CacheDispatcher = {\n  [HAS_CACHE_SCOPE]?: boolean\n  getCacheForType: <T>(create: () => T) => T\n  // DEV-only (or !disableStringRefs)\n  getOwner?: () => null | Record<string, unknown>\n}\n\nconst HAS_CACHE_SCOPE: unique symbol = Symbol.for('next.cacheScope')\n\ntype CacheMap = Map<Function, unknown>\n\nfunction createCacheMap(): CacheMap {\n  return new Map()\n}\n\nfunction isWithinCacheScope() {\n  return !!CacheScopeStorage.getStore()\n}\n\nconst CacheScopeStorage: AsyncLocalStorage<CacheMap> =\n  new AsyncLocalStorage<CacheMap>()\n\n/** forked from packages/react-server/src/flight/ReactFlightServerCache.js */\nfunction resolveCache(): CacheMap {\n  const store = CacheScopeStorage.getStore()\n  if (store) {\n    return store\n  }\n  return createCacheMap()\n}\n\n/** forked from packages/react-server/src/flight/ReactFlightServerCache.js */\nconst ScopedCacheDispatcher: CacheDispatcher = {\n  getCacheForType<T>(resourceType: () => T): T {\n    if (!isWithinCacheScope()) {\n      throw new InvariantError(\n        'Expected patched cache dispatcher to run within CacheScopeStorage'\n      )\n    }\n    const cache = resolveCache()\n    let entry: T | undefined = cache.get(resourceType) as any\n    if (entry === undefined) {\n      entry = resourceType()\n      // TODO: Warn if undefined?\n      cache.set(resourceType, entry)\n    }\n    return entry\n  },\n}\n\n// #endregion\n\n// #region  injecting the patched dispatcher into React\n\nexport function patchCacheScopeSupportIntoReact(React: typeof import('react')) {\n  const internals = getReactServerInternals(React)\n  if ('A' in internals) {\n    if (internals.A) {\n      patchReactCacheDispatcher(internals.A)\n    } else {\n      patchReactCacheDispatcherWhenSet(internals, 'A')\n    }\n  } else {\n    throw new InvariantError(\n      'Could not find cache dispatcher in React internals'\n    )\n  }\n}\n\nfunction patchReactCacheDispatcher(dispatcher: CacheDispatcher) {\n  if (dispatcher[HAS_CACHE_SCOPE]) {\n    return\n  }\n  const { getCacheForType: originalGetCacheForType } = dispatcher\n\n  dispatcher.getCacheForType = function <T>(\n    this: CacheDispatcher,\n    create: () => T\n  ) {\n    if (isWithinCacheScope()) {\n      return ScopedCacheDispatcher.getCacheForType(create)\n    }\n    return originalGetCacheForType.call(this, create) as T\n  }\n  dispatcher[HAS_CACHE_SCOPE] = true\n}\n\nfunction patchReactCacheDispatcherWhenSet<\n  Container extends Record<string, any> & { [HAS_CACHE_SCOPE]?: boolean },\n>(container: Container, key: keyof Container) {\n  if (container[HAS_CACHE_SCOPE]) {\n    return\n  }\n\n  let current: CacheDispatcher | null = null\n  Object.defineProperty(container, key, {\n    get: () => current,\n    set: (maybeDispatcher) => {\n      try {\n        if (maybeDispatcher) {\n          patchReactCacheDispatcher(maybeDispatcher)\n        }\n      } catch (err) {\n        throw new InvariantError('Could not patch the React cache dispatcher', {\n          cause: err,\n        })\n      }\n      current = maybeDispatcher\n    },\n  })\n  container[HAS_CACHE_SCOPE] = true\n}\n\ntype ReactWithServerInternals = typeof import('react') &\n  ReactServerInternalProperties\n\ntype ReactServerInternalProperties = {\n  __SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE: ReactServerSharedInternals\n}\n\ntype ReactServerSharedInternals = {\n  [HAS_CACHE_SCOPE]?: boolean\n  A: CacheDispatcher | null\n}\n\nconst INTERNALS_KEY =\n  '__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE'\n\nfunction getReactServerInternals(\n  React: typeof import('react')\n): ReactServerSharedInternals {\n  const _React = React as ReactWithServerInternals\n\n  if (INTERNALS_KEY in _React) {\n    return _React[INTERNALS_KEY]\n  }\n\n  throw new InvariantError('Could not access React server internals')\n}\n\n// #endregion\n"],"names":["createCacheScope","patchCacheScopeSupportIntoReact","storage","createCacheMap","run","callback","CacheScopeStorage","HAS_CACHE_SCOPE","Symbol","for","Map","isWithinCacheScope","getStore","AsyncLocalStorage","resolveCache","store","ScopedCacheDispatcher","getCacheForType","resourceType","InvariantError","cache","entry","get","undefined","set","React","internals","getReactServerInternals","A","patchReactCacheDispatcher","patchReactCacheDispatcherWhenSet","dispatcher","originalGetCacheForType","create","call","container","key","current","Object","defineProperty","maybeDispatcher","err","cause","INTERNALS_KEY","_React"],"mappings":";;;;;;;;;;;;;;;IAGgBA,gBAAgB;eAAhBA;;IAsEAC,+BAA+B;eAA/BA;;;6BAzEkB;gCACH;AAExB,SAASD;IACd,MAAME,UAAUC;IAChB,OAAO;QACLC,KAAK,CAAIC;YACP,OAAOC,kBAAkBF,GAAG,CAACF,SAAS,IAAMG;QAC9C;IACF;AACF;AAgBA,MAAME,kBAAiCC,OAAOC,GAAG,CAAC;AAIlD,SAASN;IACP,OAAO,IAAIO;AACb;AAEA,SAASC;IACP,OAAO,CAAC,CAACL,kBAAkBM,QAAQ;AACrC;AAEA,MAAMN,oBACJ,IAAIO,8BAAiB;AAEvB,2EAA2E,GAC3E,SAASC;IACP,MAAMC,QAAQT,kBAAkBM,QAAQ;IACxC,IAAIG,OAAO;QACT,OAAOA;IACT;IACA,OAAOZ;AACT;AAEA,2EAA2E,GAC3E,MAAMa,wBAAyC;IAC7CC,iBAAmBC,YAAqB;QACtC,IAAI,CAACP,sBAAsB;YACzB,MAAM,IAAIQ,8BAAc,CACtB;QAEJ;QACA,MAAMC,QAAQN;QACd,IAAIO,QAAuBD,MAAME,GAAG,CAACJ;QACrC,IAAIG,UAAUE,WAAW;YACvBF,QAAQH;YACR,2BAA2B;YAC3BE,MAAMI,GAAG,CAACN,cAAcG;QAC1B;QACA,OAAOA;IACT;AACF;AAMO,SAASpB,gCAAgCwB,KAA6B;IAC3E,MAAMC,YAAYC,wBAAwBF;IAC1C,IAAI,OAAOC,WAAW;QACpB,IAAIA,UAAUE,CAAC,EAAE;YACfC,0BAA0BH,UAAUE,CAAC;QACvC,OAAO;YACLE,iCAAiCJ,WAAW;QAC9C;IACF,OAAO;QACL,MAAM,IAAIP,8BAAc,CACtB;IAEJ;AACF;AAEA,SAASU,0BAA0BE,UAA2B;IAC5D,IAAIA,UAAU,CAACxB,gBAAgB,EAAE;QAC/B;IACF;IACA,MAAM,EAAEU,iBAAiBe,uBAAuB,EAAE,GAAGD;IAErDA,WAAWd,eAAe,GAAG,SAE3BgB,MAAe;QAEf,IAAItB,sBAAsB;YACxB,OAAOK,sBAAsBC,eAAe,CAACgB;QAC/C;QACA,OAAOD,wBAAwBE,IAAI,CAAC,IAAI,EAAED;IAC5C;IACAF,UAAU,CAACxB,gBAAgB,GAAG;AAChC;AAEA,SAASuB,iCAEPK,SAAoB,EAAEC,GAAoB;IAC1C,IAAID,SAAS,CAAC5B,gBAAgB,EAAE;QAC9B;IACF;IAEA,IAAI8B,UAAkC;IACtCC,OAAOC,cAAc,CAACJ,WAAWC,KAAK;QACpCd,KAAK,IAAMe;QACXb,KAAK,CAACgB;YACJ,IAAI;gBACF,IAAIA,iBAAiB;oBACnBX,0BAA0BW;gBAC5B;YACF,EAAE,OAAOC,KAAK;gBACZ,MAAM,IAAItB,8BAAc,CAAC,8CAA8C;oBACrEuB,OAAOD;gBACT;YACF;YACAJ,UAAUG;QACZ;IACF;IACAL,SAAS,CAAC5B,gBAAgB,GAAG;AAC/B;AAcA,MAAMoC,gBACJ;AAEF,SAAShB,wBACPF,KAA6B;IAE7B,MAAMmB,SAASnB;IAEf,IAAIkB,iBAAiBC,QAAQ;QAC3B,OAAOA,MAAM,CAACD,cAAc;IAC9B;IAEA,MAAM,IAAIxB,8BAAc,CAAC;AAC3B,EAEA,aAAa"}