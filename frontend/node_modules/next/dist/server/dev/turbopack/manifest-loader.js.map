{"version":3,"sources":["../../../../src/server/dev/turbopack/manifest-loader.ts"],"sourcesContent":["import type {\n  EdgeFunctionDefinition,\n  MiddlewareManifest,\n} from '../../../build/webpack/plugins/middleware-plugin'\nimport type { BuildManifest } from '../../get-page-files'\nimport type { AppBuildManifest } from '../../../build/webpack/plugins/app-build-manifest-plugin'\nimport type { PagesManifest } from '../../../build/webpack/plugins/pages-manifest-plugin'\nimport { pathToRegexp } from 'next/dist/compiled/path-to-regexp'\nimport type { ActionManifest } from '../../../build/webpack/plugins/flight-client-entry-plugin'\nimport type { NextFontManifest } from '../../../build/webpack/plugins/next-font-manifest-plugin'\nimport type { LoadableManifest } from '../../load-components'\nimport {\n  APP_BUILD_MANIFEST,\n  APP_PATHS_MANIFEST,\n  AUTOMATIC_FONT_OPTIMIZATION_MANIFEST,\n  BUILD_MANIFEST,\n  INTERCEPTION_ROUTE_REWRITE_MANIFEST,\n  MIDDLEWARE_BUILD_MANIFEST,\n  MIDDLEWARE_MANIFEST,\n  MIDDLEWARE_REACT_LOADABLE_MANIFEST,\n  NEXT_FONT_MANIFEST,\n  PAGES_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n  TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST,\n} from '../../../shared/lib/constants'\nimport { join, posix } from 'path'\nimport { readFile, writeFile } from 'fs/promises'\nimport type { SetupOpts } from '../../lib/router-utils/setup-dev-bundler'\nimport { deleteCache } from '../../../build/webpack/plugins/nextjs-require-cache-hot-reloader'\nimport { writeFileAtomic } from '../../../lib/fs/write-atomic'\nimport { isInterceptionRouteRewrite } from '../../../lib/generate-interception-routes-rewrites'\nimport {\n  type ClientBuildManifest,\n  normalizeRewritesForBuildManifest,\n  srcEmptySsgManifest,\n  processRoute,\n} from '../../../build/webpack/plugins/build-manifest-plugin'\nimport type { Entrypoints } from './types'\nimport getAssetPathFromRoute from '../../../shared/lib/router/utils/get-asset-path-from-route'\nimport { getEntryKey, type EntryKey } from './entry-key'\nimport type { CustomRoutes } from '../../../lib/load-custom-routes'\nimport { getSortedRoutes } from '../../../shared/lib/router/utils'\n\ninterface InstrumentationDefinition {\n  files: string[]\n  name: 'instrumentation'\n}\n\ntype TurbopackMiddlewareManifest = MiddlewareManifest & {\n  instrumentation?: InstrumentationDefinition\n}\n\nasync function readPartialManifest<T>(\n  distDir: string,\n  name:\n    | typeof MIDDLEWARE_MANIFEST\n    | typeof BUILD_MANIFEST\n    | typeof APP_BUILD_MANIFEST\n    | typeof PAGES_MANIFEST\n    | typeof APP_PATHS_MANIFEST\n    | `${typeof SERVER_REFERENCE_MANIFEST}.json`\n    | `${typeof NEXT_FONT_MANIFEST}.json`\n    | typeof REACT_LOADABLE_MANIFEST,\n  pageName: string,\n  type: 'pages' | 'app' | 'middleware' | 'instrumentation' = 'pages'\n): Promise<T> {\n  const manifestPath = posix.join(\n    distDir,\n    `server`,\n    type,\n    type === 'middleware' || type === 'instrumentation'\n      ? ''\n      : type === 'app'\n        ? pageName\n        : getAssetPathFromRoute(pageName),\n    name\n  )\n  return JSON.parse(await readFile(posix.join(manifestPath), 'utf-8')) as T\n}\n\nexport class TurbopackManifestLoader {\n  private actionManifests: Map<EntryKey, ActionManifest> = new Map()\n  private appBuildManifests: Map<EntryKey, AppBuildManifest> = new Map()\n  private appPathsManifests: Map<EntryKey, PagesManifest> = new Map()\n  private buildManifests: Map<EntryKey, BuildManifest> = new Map()\n  private fontManifests: Map<EntryKey, NextFontManifest> = new Map()\n  private loadableManifests: Map<EntryKey, LoadableManifest> = new Map()\n  private middlewareManifests: Map<EntryKey, TurbopackMiddlewareManifest> =\n    new Map()\n  private pagesManifests: Map<string, PagesManifest> = new Map()\n  private encryptionKey: string\n\n  private readonly distDir: string\n  private readonly buildId: string\n\n  constructor({\n    distDir,\n    buildId,\n    encryptionKey,\n  }: {\n    buildId: string\n    distDir: string\n    encryptionKey: string\n  }) {\n    this.distDir = distDir\n    this.buildId = buildId\n    this.encryptionKey = encryptionKey\n  }\n\n  delete(key: EntryKey) {\n    this.actionManifests.delete(key)\n    this.appBuildManifests.delete(key)\n    this.appPathsManifests.delete(key)\n    this.buildManifests.delete(key)\n    this.fontManifests.delete(key)\n    this.loadableManifests.delete(key)\n    this.middlewareManifests.delete(key)\n    this.pagesManifests.delete(key)\n  }\n\n  async loadActionManifest(pageName: string): Promise<void> {\n    this.actionManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        `${SERVER_REFERENCE_MANIFEST}.json`,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private async mergeActionManifests(manifests: Iterable<ActionManifest>) {\n    type ActionEntries = ActionManifest['edge' | 'node']\n    const manifest: ActionManifest = {\n      node: {},\n      edge: {},\n      encryptionKey: this.encryptionKey,\n    }\n\n    function mergeActionIds(\n      actionEntries: ActionEntries,\n      other: ActionEntries\n    ): void {\n      for (const key in other) {\n        const action = (actionEntries[key] ??= {\n          workers: {},\n          layer: {},\n        })\n        Object.assign(action.workers, other[key].workers)\n        Object.assign(action.layer, other[key].layer)\n      }\n    }\n\n    for (const m of manifests) {\n      mergeActionIds(manifest.node, m.node)\n      mergeActionIds(manifest.edge, m.edge)\n    }\n\n    return manifest\n  }\n\n  private async writeActionManifest(): Promise<void> {\n    const actionManifest = await this.mergeActionManifests(\n      this.actionManifests.values()\n    )\n    const actionManifestJsonPath = join(\n      this.distDir,\n      'server',\n      `${SERVER_REFERENCE_MANIFEST}.json`\n    )\n    const actionManifestJsPath = join(\n      this.distDir,\n      'server',\n      `${SERVER_REFERENCE_MANIFEST}.js`\n    )\n    const json = JSON.stringify(actionManifest, null, 2)\n    deleteCache(actionManifestJsonPath)\n    deleteCache(actionManifestJsPath)\n    await writeFile(actionManifestJsonPath, json, 'utf-8')\n    await writeFile(\n      actionManifestJsPath,\n      `self.__RSC_SERVER_MANIFEST=${JSON.stringify(json)}`,\n      'utf-8'\n    )\n  }\n\n  async loadAppBuildManifest(pageName: string): Promise<void> {\n    this.appBuildManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        APP_BUILD_MANIFEST,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private mergeAppBuildManifests(manifests: Iterable<AppBuildManifest>) {\n    const manifest: AppBuildManifest = {\n      pages: {},\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.pages, m.pages)\n    }\n    return manifest\n  }\n\n  private async writeAppBuildManifest(): Promise<void> {\n    const appBuildManifest = this.mergeAppBuildManifests(\n      this.appBuildManifests.values()\n    )\n    const appBuildManifestPath = join(this.distDir, APP_BUILD_MANIFEST)\n    deleteCache(appBuildManifestPath)\n    await writeFileAtomic(\n      appBuildManifestPath,\n      JSON.stringify(appBuildManifest, null, 2)\n    )\n  }\n\n  async loadAppPathsManifest(pageName: string): Promise<void> {\n    this.appPathsManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        APP_PATHS_MANIFEST,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private async writeAppPathsManifest(): Promise<void> {\n    const appPathsManifest = this.mergePagesManifests(\n      this.appPathsManifests.values()\n    )\n    const appPathsManifestPath = join(\n      this.distDir,\n      'server',\n      APP_PATHS_MANIFEST\n    )\n    deleteCache(appPathsManifestPath)\n    await writeFileAtomic(\n      appPathsManifestPath,\n      JSON.stringify(appPathsManifest, null, 2)\n    )\n  }\n\n  /**\n   * Turbopack doesn't support this functionality, so it writes an empty manifest.\n   */\n  private async writeAutomaticFontOptimizationManifest() {\n    const manifestPath = join(\n      this.distDir,\n      'server',\n      AUTOMATIC_FONT_OPTIMIZATION_MANIFEST\n    )\n\n    await writeFileAtomic(manifestPath, JSON.stringify([]))\n  }\n\n  async loadBuildManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.buildManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(this.distDir, BUILD_MANIFEST, pageName, type)\n    )\n  }\n\n  private mergeBuildManifests(manifests: Iterable<BuildManifest>) {\n    const manifest: Partial<BuildManifest> & Pick<BuildManifest, 'pages'> = {\n      pages: {\n        '/_app': [],\n      },\n      // Something in next.js depends on these to exist even for app dir rendering\n      devFiles: [],\n      ampDevFiles: [],\n      polyfillFiles: [],\n      lowPriorityFiles: [\n        `static/${this.buildId}/_ssgManifest.js`,\n        `static/${this.buildId}/_buildManifest.js`,\n      ],\n      rootMainFiles: [],\n      ampFirstPages: [],\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.pages, m.pages)\n      if (m.rootMainFiles.length) manifest.rootMainFiles = m.rootMainFiles\n      // polyfillFiles should always be the same, so we can overwrite instead of actually merging\n      if (m.polyfillFiles.length) manifest.polyfillFiles = m.polyfillFiles\n    }\n    return manifest\n  }\n\n  private async writeBuildManifest(\n    entrypoints: Entrypoints,\n    devRewrites: SetupOpts['fsChecker']['rewrites'] | undefined,\n    productionRewrites: CustomRoutes['rewrites'] | undefined\n  ): Promise<void> {\n    const rewrites = productionRewrites ?? {\n      ...devRewrites,\n      beforeFiles: (devRewrites?.beforeFiles ?? []).map(processRoute),\n      afterFiles: (devRewrites?.afterFiles ?? []).map(processRoute),\n      fallback: (devRewrites?.fallback ?? []).map(processRoute),\n    }\n    const buildManifest = this.mergeBuildManifests(this.buildManifests.values())\n    const buildManifestPath = join(this.distDir, BUILD_MANIFEST)\n    const middlewareBuildManifestPath = join(\n      this.distDir,\n      'server',\n      `${MIDDLEWARE_BUILD_MANIFEST}.js`\n    )\n    const interceptionRewriteManifestPath = join(\n      this.distDir,\n      'server',\n      `${INTERCEPTION_ROUTE_REWRITE_MANIFEST}.js`\n    )\n    deleteCache(buildManifestPath)\n    deleteCache(middlewareBuildManifestPath)\n    deleteCache(interceptionRewriteManifestPath)\n    await writeFileAtomic(\n      buildManifestPath,\n      JSON.stringify(buildManifest, null, 2)\n    )\n    await writeFileAtomic(\n      middlewareBuildManifestPath,\n      `self.__BUILD_MANIFEST=${JSON.stringify(buildManifest)};`\n    )\n\n    const interceptionRewrites = JSON.stringify(\n      rewrites.beforeFiles.filter(isInterceptionRouteRewrite)\n    )\n\n    await writeFileAtomic(\n      interceptionRewriteManifestPath,\n      `self.__INTERCEPTION_ROUTE_REWRITE_MANIFEST=${JSON.stringify(\n        interceptionRewrites\n      )};`\n    )\n\n    const pagesKeys = [...entrypoints.page.keys()]\n    if (entrypoints.global.app) {\n      pagesKeys.push('/_app')\n    }\n    if (entrypoints.global.error) {\n      pagesKeys.push('/_error')\n    }\n\n    const sortedPageKeys = getSortedRoutes(pagesKeys)\n    const content: ClientBuildManifest = {\n      __rewrites: normalizeRewritesForBuildManifest(rewrites) as any,\n      ...Object.fromEntries(\n        sortedPageKeys.map((pathname) => [\n          pathname,\n          [`static/chunks/pages${pathname === '/' ? '/index' : pathname}.js`],\n        ])\n      ),\n      sortedPages: sortedPageKeys,\n    }\n    const buildManifestJs = `self.__BUILD_MANIFEST = ${JSON.stringify(\n      content\n    )};self.__BUILD_MANIFEST_CB && self.__BUILD_MANIFEST_CB()`\n    await writeFileAtomic(\n      join(this.distDir, 'static', this.buildId, '_buildManifest.js'),\n      buildManifestJs\n    )\n    await writeFileAtomic(\n      join(this.distDir, 'static', this.buildId, '_ssgManifest.js'),\n      srcEmptySsgManifest\n    )\n  }\n\n  private async writeClientMiddlewareManifest(): Promise<void> {\n    const middlewareManifest = this.mergeMiddlewareManifests(\n      this.middlewareManifests.values()\n    )\n\n    const matchers = middlewareManifest?.middleware['/']?.matchers || []\n\n    const clientMiddlewareManifestPath = join(\n      this.distDir,\n      'static',\n      this.buildId,\n      `${TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST}`\n    )\n    deleteCache(clientMiddlewareManifestPath)\n    await writeFileAtomic(\n      clientMiddlewareManifestPath,\n      JSON.stringify(matchers, null, 2)\n    )\n  }\n\n  private async writeFallbackBuildManifest(): Promise<void> {\n    const fallbackBuildManifest = this.mergeBuildManifests(\n      [\n        this.buildManifests.get(getEntryKey('pages', 'server', '_app')),\n        this.buildManifests.get(getEntryKey('pages', 'server', '_error')),\n      ].filter(Boolean) as BuildManifest[]\n    )\n    const fallbackBuildManifestPath = join(\n      this.distDir,\n      `fallback-${BUILD_MANIFEST}`\n    )\n    deleteCache(fallbackBuildManifestPath)\n    await writeFileAtomic(\n      fallbackBuildManifestPath,\n      JSON.stringify(fallbackBuildManifest, null, 2)\n    )\n  }\n\n  async loadFontManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.fontManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        `${NEXT_FONT_MANIFEST}.json`,\n        pageName,\n        type\n      )\n    )\n  }\n\n  private mergeFontManifests(manifests: Iterable<NextFontManifest>) {\n    const manifest: NextFontManifest = {\n      app: {},\n      appUsingSizeAdjust: false,\n      pages: {},\n      pagesUsingSizeAdjust: false,\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.app, m.app)\n      Object.assign(manifest.pages, m.pages)\n\n      manifest.appUsingSizeAdjust =\n        manifest.appUsingSizeAdjust || m.appUsingSizeAdjust\n      manifest.pagesUsingSizeAdjust =\n        manifest.pagesUsingSizeAdjust || m.pagesUsingSizeAdjust\n    }\n    return manifest\n  }\n\n  private async writeNextFontManifest(): Promise<void> {\n    const fontManifest = this.mergeFontManifests(this.fontManifests.values())\n    const json = JSON.stringify(fontManifest, null, 2)\n\n    const fontManifestJsonPath = join(\n      this.distDir,\n      'server',\n      `${NEXT_FONT_MANIFEST}.json`\n    )\n    const fontManifestJsPath = join(\n      this.distDir,\n      'server',\n      `${NEXT_FONT_MANIFEST}.js`\n    )\n    deleteCache(fontManifestJsonPath)\n    deleteCache(fontManifestJsPath)\n    await writeFileAtomic(fontManifestJsonPath, json)\n    await writeFileAtomic(\n      fontManifestJsPath,\n      `self.__NEXT_FONT_MANIFEST=${JSON.stringify(json)}`\n    )\n  }\n\n  async loadLoadableManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.loadableManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        REACT_LOADABLE_MANIFEST,\n        pageName,\n        type\n      )\n    )\n  }\n\n  private mergeLoadableManifests(manifests: Iterable<LoadableManifest>) {\n    const manifest: LoadableManifest = {}\n    for (const m of manifests) {\n      Object.assign(manifest, m)\n    }\n    return manifest\n  }\n\n  private async writeLoadableManifest(): Promise<void> {\n    const loadableManifest = this.mergeLoadableManifests(\n      this.loadableManifests.values()\n    )\n    const loadableManifestPath = join(this.distDir, REACT_LOADABLE_MANIFEST)\n    const middlewareloadableManifestPath = join(\n      this.distDir,\n      'server',\n      `${MIDDLEWARE_REACT_LOADABLE_MANIFEST}.js`\n    )\n\n    const json = JSON.stringify(loadableManifest, null, 2)\n\n    deleteCache(loadableManifestPath)\n    deleteCache(middlewareloadableManifestPath)\n    await writeFileAtomic(loadableManifestPath, json)\n    await writeFileAtomic(\n      middlewareloadableManifestPath,\n      `self.__REACT_LOADABLE_MANIFEST=${JSON.stringify(json)}`\n    )\n  }\n\n  async loadMiddlewareManifest(\n    pageName: string,\n    type: 'pages' | 'app' | 'middleware' | 'instrumentation'\n  ): Promise<void> {\n    this.middlewareManifests.set(\n      getEntryKey(\n        type === 'middleware' || type === 'instrumentation' ? 'root' : type,\n        'server',\n        pageName\n      ),\n      await readPartialManifest(\n        this.distDir,\n        MIDDLEWARE_MANIFEST,\n        pageName,\n        type\n      )\n    )\n  }\n\n  getMiddlewareManifest(key: EntryKey) {\n    return this.middlewareManifests.get(key)\n  }\n\n  deleteMiddlewareManifest(key: EntryKey) {\n    return this.middlewareManifests.delete(key)\n  }\n\n  private mergeMiddlewareManifests(\n    manifests: Iterable<TurbopackMiddlewareManifest>\n  ): MiddlewareManifest {\n    const manifest: MiddlewareManifest = {\n      version: 3,\n      middleware: {},\n      sortedMiddleware: [],\n      functions: {},\n    }\n    let instrumentation: InstrumentationDefinition | undefined = undefined\n    for (const m of manifests) {\n      Object.assign(manifest.functions, m.functions)\n      Object.assign(manifest.middleware, m.middleware)\n      if (m.instrumentation) {\n        instrumentation = m.instrumentation\n      }\n    }\n    const updateFunctionDefinition = (\n      fun: EdgeFunctionDefinition\n    ): EdgeFunctionDefinition => {\n      return {\n        ...fun,\n        files: [...(instrumentation?.files ?? []), ...fun.files],\n      }\n    }\n    for (const key of Object.keys(manifest.middleware)) {\n      const value = manifest.middleware[key]\n      manifest.middleware[key] = updateFunctionDefinition(value)\n    }\n    for (const key of Object.keys(manifest.functions)) {\n      const value = manifest.functions[key]\n      manifest.functions[key] = updateFunctionDefinition(value)\n    }\n    for (const fun of Object.values(manifest.functions).concat(\n      Object.values(manifest.middleware)\n    )) {\n      for (const matcher of fun.matchers) {\n        if (!matcher.regexp) {\n          matcher.regexp = pathToRegexp(matcher.originalSource, [], {\n            delimiter: '/',\n            sensitive: false,\n            strict: true,\n          }).source.replaceAll('\\\\/', '/')\n        }\n      }\n    }\n    manifest.sortedMiddleware = Object.keys(manifest.middleware)\n\n    return manifest\n  }\n\n  private async writeMiddlewareManifest(): Promise<void> {\n    const middlewareManifest = this.mergeMiddlewareManifests(\n      this.middlewareManifests.values()\n    )\n    const middlewareManifestPath = join(\n      this.distDir,\n      'server',\n      MIDDLEWARE_MANIFEST\n    )\n    deleteCache(middlewareManifestPath)\n    await writeFileAtomic(\n      middlewareManifestPath,\n      JSON.stringify(middlewareManifest, null, 2)\n    )\n  }\n\n  async loadPagesManifest(pageName: string): Promise<void> {\n    this.pagesManifests.set(\n      getEntryKey('pages', 'server', pageName),\n      await readPartialManifest(this.distDir, PAGES_MANIFEST, pageName)\n    )\n  }\n\n  private mergePagesManifests(manifests: Iterable<PagesManifest>) {\n    const manifest: PagesManifest = {}\n    for (const m of manifests) {\n      Object.assign(manifest, m)\n    }\n    return manifest\n  }\n\n  private async writePagesManifest(): Promise<void> {\n    const pagesManifest = this.mergePagesManifests(this.pagesManifests.values())\n    const pagesManifestPath = join(this.distDir, 'server', PAGES_MANIFEST)\n    deleteCache(pagesManifestPath)\n    await writeFileAtomic(\n      pagesManifestPath,\n      JSON.stringify(pagesManifest, null, 2)\n    )\n  }\n\n  async writeManifests({\n    devRewrites,\n    productionRewrites,\n    entrypoints,\n  }: {\n    devRewrites: SetupOpts['fsChecker']['rewrites'] | undefined\n    productionRewrites: CustomRoutes['rewrites'] | undefined\n    entrypoints: Entrypoints\n  }) {\n    await this.writeActionManifest()\n    await this.writeAppBuildManifest()\n    await this.writeAppPathsManifest()\n    await this.writeAutomaticFontOptimizationManifest()\n    await this.writeBuildManifest(entrypoints, devRewrites, productionRewrites)\n    await this.writeFallbackBuildManifest()\n    await this.writeLoadableManifest()\n    await this.writeMiddlewareManifest()\n    await this.writeClientMiddlewareManifest()\n    await this.writeNextFontManifest()\n    await this.writePagesManifest()\n  }\n}\n"],"names":["TurbopackManifestLoader","readPartialManifest","distDir","name","pageName","type","manifestPath","posix","join","getAssetPathFromRoute","JSON","parse","readFile","constructor","buildId","encryptionKey","actionManifests","Map","appBuildManifests","appPathsManifests","buildManifests","fontManifests","loadableManifests","middlewareManifests","pagesManifests","delete","key","loadActionManifest","set","getEntryKey","SERVER_REFERENCE_MANIFEST","mergeActionManifests","manifests","manifest","node","edge","mergeActionIds","actionEntries","other","action","workers","layer","Object","assign","m","writeActionManifest","actionManifest","values","actionManifestJsonPath","actionManifestJsPath","json","stringify","deleteCache","writeFile","loadAppBuildManifest","APP_BUILD_MANIFEST","mergeAppBuildManifests","pages","writeAppBuildManifest","appBuildManifest","appBuildManifestPath","writeFileAtomic","loadAppPathsManifest","APP_PATHS_MANIFEST","writeAppPathsManifest","appPathsManifest","mergePagesManifests","appPathsManifestPath","writeAutomaticFontOptimizationManifest","AUTOMATIC_FONT_OPTIMIZATION_MANIFEST","loadBuildManifest","BUILD_MANIFEST","mergeBuildManifests","devFiles","ampDevFiles","polyfillFiles","lowPriorityFiles","rootMainFiles","ampFirstPages","length","writeBuildManifest","entrypoints","devRewrites","productionRewrites","rewrites","beforeFiles","map","processRoute","afterFiles","fallback","buildManifest","buildManifestPath","middlewareBuildManifestPath","MIDDLEWARE_BUILD_MANIFEST","interceptionRewriteManifestPath","INTERCEPTION_ROUTE_REWRITE_MANIFEST","interceptionRewrites","filter","isInterceptionRouteRewrite","pagesKeys","page","keys","global","app","push","error","sortedPageKeys","getSortedRoutes","content","__rewrites","normalizeRewritesForBuildManifest","fromEntries","pathname","sortedPages","buildManifestJs","srcEmptySsgManifest","writeClientMiddlewareManifest","middlewareManifest","mergeMiddlewareManifests","matchers","middleware","clientMiddlewareManifestPath","TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST","writeFallbackBuildManifest","fallbackBuildManifest","get","Boolean","fallbackBuildManifestPath","loadFontManifest","NEXT_FONT_MANIFEST","mergeFontManifests","appUsingSizeAdjust","pagesUsingSizeAdjust","writeNextFontManifest","fontManifest","fontManifestJsonPath","fontManifestJsPath","loadLoadableManifest","REACT_LOADABLE_MANIFEST","mergeLoadableManifests","writeLoadableManifest","loadableManifest","loadableManifestPath","middlewareloadableManifestPath","MIDDLEWARE_REACT_LOADABLE_MANIFEST","loadMiddlewareManifest","MIDDLEWARE_MANIFEST","getMiddlewareManifest","deleteMiddlewareManifest","version","sortedMiddleware","functions","instrumentation","undefined","updateFunctionDefinition","fun","files","value","concat","matcher","regexp","pathToRegexp","originalSource","delimiter","sensitive","strict","source","replaceAll","writeMiddlewareManifest","middlewareManifestPath","loadPagesManifest","PAGES_MANIFEST","writePagesManifest","pagesManifest","pagesManifestPath","writeManifests"],"mappings":";;;;+BAiFaA;;;eAAAA;;;8BA1EgB;2BAkBtB;sBACqB;0BACQ;+CAER;6BACI;oDACW;qCAMpC;8EAE2B;0BACS;uBAEX;;;;;;AAWhC,eAAeC,oBACbC,OAAe,EACfC,IAQkC,EAClCC,QAAgB,EAChBC,OAA2D,OAAO;IAElE,MAAMC,eAAeC,WAAK,CAACC,IAAI,CAC7BN,SACA,CAAC,MAAM,CAAC,EACRG,MACAA,SAAS,gBAAgBA,SAAS,oBAC9B,KACAA,SAAS,QACPD,WACAK,IAAAA,8BAAqB,EAACL,WAC5BD;IAEF,OAAOO,KAAKC,KAAK,CAAC,MAAMC,IAAAA,kBAAQ,EAACL,WAAK,CAACC,IAAI,CAACF,eAAe;AAC7D;AAEO,MAAMN;IAeXa,YAAY,EACVX,OAAO,EACPY,OAAO,EACPC,aAAa,EAKd,CAAE;aAtBKC,kBAAiD,IAAIC;aACrDC,oBAAqD,IAAID;aACzDE,oBAAkD,IAAIF;aACtDG,iBAA+C,IAAIH;aACnDI,gBAAiD,IAAIJ;aACrDK,oBAAqD,IAAIL;aACzDM,sBACN,IAAIN;aACEO,iBAA6C,IAAIP;QAevD,IAAI,CAACf,OAAO,GAAGA;QACf,IAAI,CAACY,OAAO,GAAGA;QACf,IAAI,CAACC,aAAa,GAAGA;IACvB;IAEAU,OAAOC,GAAa,EAAE;QACpB,IAAI,CAACV,eAAe,CAACS,MAAM,CAACC;QAC5B,IAAI,CAACR,iBAAiB,CAACO,MAAM,CAACC;QAC9B,IAAI,CAACP,iBAAiB,CAACM,MAAM,CAACC;QAC9B,IAAI,CAACN,cAAc,CAACK,MAAM,CAACC;QAC3B,IAAI,CAACL,aAAa,CAACI,MAAM,CAACC;QAC1B,IAAI,CAACJ,iBAAiB,CAACG,MAAM,CAACC;QAC9B,IAAI,CAACH,mBAAmB,CAACE,MAAM,CAACC;QAChC,IAAI,CAACF,cAAc,CAACC,MAAM,CAACC;IAC7B;IAEA,MAAMC,mBAAmBvB,QAAgB,EAAiB;QACxD,IAAI,CAACY,eAAe,CAACY,GAAG,CACtBC,IAAAA,qBAAW,EAAC,OAAO,UAAUzB,WAC7B,MAAMH,oBACJ,IAAI,CAACC,OAAO,EACZ,CAAC,EAAE4B,oCAAyB,CAAC,KAAK,CAAC,EACnC1B,UACA;IAGN;IAEA,MAAc2B,qBAAqBC,SAAmC,EAAE;QAEtE,MAAMC,WAA2B;YAC/BC,MAAM,CAAC;YACPC,MAAM,CAAC;YACPpB,eAAe,IAAI,CAACA,aAAa;QACnC;QAEA,SAASqB,eACPC,aAA4B,EAC5BC,KAAoB;YAEpB,IAAK,MAAMZ,OAAOY,MAAO;gBACvB,MAAMC,SAAUF,aAAa,CAACX,IAAI,KAAK;oBACrCc,SAAS,CAAC;oBACVC,OAAO,CAAC;gBACV;gBACAC,OAAOC,MAAM,CAACJ,OAAOC,OAAO,EAAEF,KAAK,CAACZ,IAAI,CAACc,OAAO;gBAChDE,OAAOC,MAAM,CAACJ,OAAOE,KAAK,EAAEH,KAAK,CAACZ,IAAI,CAACe,KAAK;YAC9C;QACF;QAEA,KAAK,MAAMG,KAAKZ,UAAW;YACzBI,eAAeH,SAASC,IAAI,EAAEU,EAAEV,IAAI;YACpCE,eAAeH,SAASE,IAAI,EAAES,EAAET,IAAI;QACtC;QAEA,OAAOF;IACT;IAEA,MAAcY,sBAAqC;QACjD,MAAMC,iBAAiB,MAAM,IAAI,CAACf,oBAAoB,CACpD,IAAI,CAACf,eAAe,CAAC+B,MAAM;QAE7B,MAAMC,yBAAyBxC,IAAAA,UAAI,EACjC,IAAI,CAACN,OAAO,EACZ,UACA,CAAC,EAAE4B,oCAAyB,CAAC,KAAK,CAAC;QAErC,MAAMmB,uBAAuBzC,IAAAA,UAAI,EAC/B,IAAI,CAACN,OAAO,EACZ,UACA,CAAC,EAAE4B,oCAAyB,CAAC,GAAG,CAAC;QAEnC,MAAMoB,OAAOxC,KAAKyC,SAAS,CAACL,gBAAgB,MAAM;QAClDM,IAAAA,0CAAW,EAACJ;QACZI,IAAAA,0CAAW,EAACH;QACZ,MAAMI,IAAAA,mBAAS,EAACL,wBAAwBE,MAAM;QAC9C,MAAMG,IAAAA,mBAAS,EACbJ,sBACA,CAAC,2BAA2B,EAAEvC,KAAKyC,SAAS,CAACD,MAAM,CAAC,EACpD;IAEJ;IAEA,MAAMI,qBAAqBlD,QAAgB,EAAiB;QAC1D,IAAI,CAACc,iBAAiB,CAACU,GAAG,CACxBC,IAAAA,qBAAW,EAAC,OAAO,UAAUzB,WAC7B,MAAMH,oBACJ,IAAI,CAACC,OAAO,EACZqD,6BAAkB,EAClBnD,UACA;IAGN;IAEQoD,uBAAuBxB,SAAqC,EAAE;QACpE,MAAMC,WAA6B;YACjCwB,OAAO,CAAC;QACV;QACA,KAAK,MAAMb,KAAKZ,UAAW;YACzBU,OAAOC,MAAM,CAACV,SAASwB,KAAK,EAAEb,EAAEa,KAAK;QACvC;QACA,OAAOxB;IACT;IAEA,MAAcyB,wBAAuC;QACnD,MAAMC,mBAAmB,IAAI,CAACH,sBAAsB,CAClD,IAAI,CAACtC,iBAAiB,CAAC6B,MAAM;QAE/B,MAAMa,uBAAuBpD,IAAAA,UAAI,EAAC,IAAI,CAACN,OAAO,EAAEqD,6BAAkB;QAClEH,IAAAA,0CAAW,EAACQ;QACZ,MAAMC,IAAAA,4BAAe,EACnBD,sBACAlD,KAAKyC,SAAS,CAACQ,kBAAkB,MAAM;IAE3C;IAEA,MAAMG,qBAAqB1D,QAAgB,EAAiB;QAC1D,IAAI,CAACe,iBAAiB,CAACS,GAAG,CACxBC,IAAAA,qBAAW,EAAC,OAAO,UAAUzB,WAC7B,MAAMH,oBACJ,IAAI,CAACC,OAAO,EACZ6D,6BAAkB,EAClB3D,UACA;IAGN;IAEA,MAAc4D,wBAAuC;QACnD,MAAMC,mBAAmB,IAAI,CAACC,mBAAmB,CAC/C,IAAI,CAAC/C,iBAAiB,CAAC4B,MAAM;QAE/B,MAAMoB,uBAAuB3D,IAAAA,UAAI,EAC/B,IAAI,CAACN,OAAO,EACZ,UACA6D,6BAAkB;QAEpBX,IAAAA,0CAAW,EAACe;QACZ,MAAMN,IAAAA,4BAAe,EACnBM,sBACAzD,KAAKyC,SAAS,CAACc,kBAAkB,MAAM;IAE3C;IAEA;;GAEC,GACD,MAAcG,yCAAyC;QACrD,MAAM9D,eAAeE,IAAAA,UAAI,EACvB,IAAI,CAACN,OAAO,EACZ,UACAmE,+CAAoC;QAGtC,MAAMR,IAAAA,4BAAe,EAACvD,cAAcI,KAAKyC,SAAS,CAAC,EAAE;IACvD;IAEA,MAAMmB,kBACJlE,QAAgB,EAChBC,OAAwB,OAAO,EAChB;QACf,IAAI,CAACe,cAAc,CAACQ,GAAG,CACrBC,IAAAA,qBAAW,EAACxB,MAAM,UAAUD,WAC5B,MAAMH,oBAAoB,IAAI,CAACC,OAAO,EAAEqE,yBAAc,EAAEnE,UAAUC;IAEtE;IAEQmE,oBAAoBxC,SAAkC,EAAE;QAC9D,MAAMC,WAAkE;YACtEwB,OAAO;gBACL,SAAS,EAAE;YACb;YACA,4EAA4E;YAC5EgB,UAAU,EAAE;YACZC,aAAa,EAAE;YACfC,eAAe,EAAE;YACjBC,kBAAkB;gBAChB,CAAC,OAAO,EAAE,IAAI,CAAC9D,OAAO,CAAC,gBAAgB,CAAC;gBACxC,CAAC,OAAO,EAAE,IAAI,CAACA,OAAO,CAAC,kBAAkB,CAAC;aAC3C;YACD+D,eAAe,EAAE;YACjBC,eAAe,EAAE;QACnB;QACA,KAAK,MAAMlC,KAAKZ,UAAW;YACzBU,OAAOC,MAAM,CAACV,SAASwB,KAAK,EAAEb,EAAEa,KAAK;YACrC,IAAIb,EAAEiC,aAAa,CAACE,MAAM,EAAE9C,SAAS4C,aAAa,GAAGjC,EAAEiC,aAAa;YACpE,2FAA2F;YAC3F,IAAIjC,EAAE+B,aAAa,CAACI,MAAM,EAAE9C,SAAS0C,aAAa,GAAG/B,EAAE+B,aAAa;QACtE;QACA,OAAO1C;IACT;IAEA,MAAc+C,mBACZC,WAAwB,EACxBC,WAA2D,EAC3DC,kBAAwD,EACzC;QACf,MAAMC,WAAWD,sBAAsB;YACrC,GAAGD,WAAW;YACdG,aAAa,AAACH,CAAAA,CAAAA,+BAAAA,YAAaG,WAAW,KAAI,EAAE,AAAD,EAAGC,GAAG,CAACC,iCAAY;YAC9DC,YAAY,AAACN,CAAAA,CAAAA,+BAAAA,YAAaM,UAAU,KAAI,EAAE,AAAD,EAAGF,GAAG,CAACC,iCAAY;YAC5DE,UAAU,AAACP,CAAAA,CAAAA,+BAAAA,YAAaO,QAAQ,KAAI,EAAE,AAAD,EAAGH,GAAG,CAACC,iCAAY;QAC1D;QACA,MAAMG,gBAAgB,IAAI,CAAClB,mBAAmB,CAAC,IAAI,CAACpD,cAAc,CAAC2B,MAAM;QACzE,MAAM4C,oBAAoBnF,IAAAA,UAAI,EAAC,IAAI,CAACN,OAAO,EAAEqE,yBAAc;QAC3D,MAAMqB,8BAA8BpF,IAAAA,UAAI,EACtC,IAAI,CAACN,OAAO,EACZ,UACA,CAAC,EAAE2F,oCAAyB,CAAC,GAAG,CAAC;QAEnC,MAAMC,kCAAkCtF,IAAAA,UAAI,EAC1C,IAAI,CAACN,OAAO,EACZ,UACA,CAAC,EAAE6F,8CAAmC,CAAC,GAAG,CAAC;QAE7C3C,IAAAA,0CAAW,EAACuC;QACZvC,IAAAA,0CAAW,EAACwC;QACZxC,IAAAA,0CAAW,EAAC0C;QACZ,MAAMjC,IAAAA,4BAAe,EACnB8B,mBACAjF,KAAKyC,SAAS,CAACuC,eAAe,MAAM;QAEtC,MAAM7B,IAAAA,4BAAe,EACnB+B,6BACA,CAAC,sBAAsB,EAAElF,KAAKyC,SAAS,CAACuC,eAAe,CAAC,CAAC;QAG3D,MAAMM,uBAAuBtF,KAAKyC,SAAS,CACzCiC,SAASC,WAAW,CAACY,MAAM,CAACC,8DAA0B;QAGxD,MAAMrC,IAAAA,4BAAe,EACnBiC,iCACA,CAAC,2CAA2C,EAAEpF,KAAKyC,SAAS,CAC1D6C,sBACA,CAAC,CAAC;QAGN,MAAMG,YAAY;eAAIlB,YAAYmB,IAAI,CAACC,IAAI;SAAG;QAC9C,IAAIpB,YAAYqB,MAAM,CAACC,GAAG,EAAE;YAC1BJ,UAAUK,IAAI,CAAC;QACjB;QACA,IAAIvB,YAAYqB,MAAM,CAACG,KAAK,EAAE;YAC5BN,UAAUK,IAAI,CAAC;QACjB;QAEA,MAAME,iBAAiBC,IAAAA,sBAAe,EAACR;QACvC,MAAMS,UAA+B;YACnCC,YAAYC,IAAAA,sDAAiC,EAAC1B;YAC9C,GAAG1C,OAAOqE,WAAW,CACnBL,eAAepB,GAAG,CAAC,CAAC0B,WAAa;oBAC/BA;oBACA;wBAAC,CAAC,mBAAmB,EAAEA,aAAa,MAAM,WAAWA,SAAS,GAAG,CAAC;qBAAC;iBACpE,EACF;YACDC,aAAaP;QACf;QACA,MAAMQ,kBAAkB,CAAC,wBAAwB,EAAExG,KAAKyC,SAAS,CAC/DyD,SACA,uDAAuD,CAAC;QAC1D,MAAM/C,IAAAA,4BAAe,EACnBrD,IAAAA,UAAI,EAAC,IAAI,CAACN,OAAO,EAAE,UAAU,IAAI,CAACY,OAAO,EAAE,sBAC3CoG;QAEF,MAAMrD,IAAAA,4BAAe,EACnBrD,IAAAA,UAAI,EAAC,IAAI,CAACN,OAAO,EAAE,UAAU,IAAI,CAACY,OAAO,EAAE,oBAC3CqG,wCAAmB;IAEvB;IAEA,MAAcC,gCAA+C;YAK1CC;QAJjB,MAAMA,qBAAqB,IAAI,CAACC,wBAAwB,CACtD,IAAI,CAAC/F,mBAAmB,CAACwB,MAAM;QAGjC,MAAMwE,WAAWF,CAAAA,uCAAAA,kCAAAA,mBAAoBG,UAAU,CAAC,IAAI,qBAAnCH,gCAAqCE,QAAQ,KAAI,EAAE;QAEpE,MAAME,+BAA+BjH,IAAAA,UAAI,EACvC,IAAI,CAACN,OAAO,EACZ,UACA,IAAI,CAACY,OAAO,EACZ,CAAC,EAAE4G,+CAAoC,CAAC,CAAC;QAE3CtE,IAAAA,0CAAW,EAACqE;QACZ,MAAM5D,IAAAA,4BAAe,EACnB4D,8BACA/G,KAAKyC,SAAS,CAACoE,UAAU,MAAM;IAEnC;IAEA,MAAcI,6BAA4C;QACxD,MAAMC,wBAAwB,IAAI,CAACpD,mBAAmB,CACpD;YACE,IAAI,CAACpD,cAAc,CAACyG,GAAG,CAAChG,IAAAA,qBAAW,EAAC,SAAS,UAAU;YACvD,IAAI,CAACT,cAAc,CAACyG,GAAG,CAAChG,IAAAA,qBAAW,EAAC,SAAS,UAAU;SACxD,CAACoE,MAAM,CAAC6B;QAEX,MAAMC,4BAA4BvH,IAAAA,UAAI,EACpC,IAAI,CAACN,OAAO,EACZ,CAAC,SAAS,EAAEqE,yBAAc,CAAC,CAAC;QAE9BnB,IAAAA,0CAAW,EAAC2E;QACZ,MAAMlE,IAAAA,4BAAe,EACnBkE,2BACArH,KAAKyC,SAAS,CAACyE,uBAAuB,MAAM;IAEhD;IAEA,MAAMI,iBACJ5H,QAAgB,EAChBC,OAAwB,OAAO,EAChB;QACf,IAAI,CAACgB,aAAa,CAACO,GAAG,CACpBC,IAAAA,qBAAW,EAACxB,MAAM,UAAUD,WAC5B,MAAMH,oBACJ,IAAI,CAACC,OAAO,EACZ,CAAC,EAAE+H,6BAAkB,CAAC,KAAK,CAAC,EAC5B7H,UACAC;IAGN;IAEQ6H,mBAAmBlG,SAAqC,EAAE;QAChE,MAAMC,WAA6B;YACjCsE,KAAK,CAAC;YACN4B,oBAAoB;YACpB1E,OAAO,CAAC;YACR2E,sBAAsB;QACxB;QACA,KAAK,MAAMxF,KAAKZ,UAAW;YACzBU,OAAOC,MAAM,CAACV,SAASsE,GAAG,EAAE3D,EAAE2D,GAAG;YACjC7D,OAAOC,MAAM,CAACV,SAASwB,KAAK,EAAEb,EAAEa,KAAK;YAErCxB,SAASkG,kBAAkB,GACzBlG,SAASkG,kBAAkB,IAAIvF,EAAEuF,kBAAkB;YACrDlG,SAASmG,oBAAoB,GAC3BnG,SAASmG,oBAAoB,IAAIxF,EAAEwF,oBAAoB;QAC3D;QACA,OAAOnG;IACT;IAEA,MAAcoG,wBAAuC;QACnD,MAAMC,eAAe,IAAI,CAACJ,kBAAkB,CAAC,IAAI,CAAC7G,aAAa,CAAC0B,MAAM;QACtE,MAAMG,OAAOxC,KAAKyC,SAAS,CAACmF,cAAc,MAAM;QAEhD,MAAMC,uBAAuB/H,IAAAA,UAAI,EAC/B,IAAI,CAACN,OAAO,EACZ,UACA,CAAC,EAAE+H,6BAAkB,CAAC,KAAK,CAAC;QAE9B,MAAMO,qBAAqBhI,IAAAA,UAAI,EAC7B,IAAI,CAACN,OAAO,EACZ,UACA,CAAC,EAAE+H,6BAAkB,CAAC,GAAG,CAAC;QAE5B7E,IAAAA,0CAAW,EAACmF;QACZnF,IAAAA,0CAAW,EAACoF;QACZ,MAAM3E,IAAAA,4BAAe,EAAC0E,sBAAsBrF;QAC5C,MAAMW,IAAAA,4BAAe,EACnB2E,oBACA,CAAC,0BAA0B,EAAE9H,KAAKyC,SAAS,CAACD,MAAM,CAAC;IAEvD;IAEA,MAAMuF,qBACJrI,QAAgB,EAChBC,OAAwB,OAAO,EAChB;QACf,IAAI,CAACiB,iBAAiB,CAACM,GAAG,CACxBC,IAAAA,qBAAW,EAACxB,MAAM,UAAUD,WAC5B,MAAMH,oBACJ,IAAI,CAACC,OAAO,EACZwI,kCAAuB,EACvBtI,UACAC;IAGN;IAEQsI,uBAAuB3G,SAAqC,EAAE;QACpE,MAAMC,WAA6B,CAAC;QACpC,KAAK,MAAMW,KAAKZ,UAAW;YACzBU,OAAOC,MAAM,CAACV,UAAUW;QAC1B;QACA,OAAOX;IACT;IAEA,MAAc2G,wBAAuC;QACnD,MAAMC,mBAAmB,IAAI,CAACF,sBAAsB,CAClD,IAAI,CAACrH,iBAAiB,CAACyB,MAAM;QAE/B,MAAM+F,uBAAuBtI,IAAAA,UAAI,EAAC,IAAI,CAACN,OAAO,EAAEwI,kCAAuB;QACvE,MAAMK,iCAAiCvI,IAAAA,UAAI,EACzC,IAAI,CAACN,OAAO,EACZ,UACA,CAAC,EAAE8I,6CAAkC,CAAC,GAAG,CAAC;QAG5C,MAAM9F,OAAOxC,KAAKyC,SAAS,CAAC0F,kBAAkB,MAAM;QAEpDzF,IAAAA,0CAAW,EAAC0F;QACZ1F,IAAAA,0CAAW,EAAC2F;QACZ,MAAMlF,IAAAA,4BAAe,EAACiF,sBAAsB5F;QAC5C,MAAMW,IAAAA,4BAAe,EACnBkF,gCACA,CAAC,+BAA+B,EAAErI,KAAKyC,SAAS,CAACD,MAAM,CAAC;IAE5D;IAEA,MAAM+F,uBACJ7I,QAAgB,EAChBC,IAAwD,EACzC;QACf,IAAI,CAACkB,mBAAmB,CAACK,GAAG,CAC1BC,IAAAA,qBAAW,EACTxB,SAAS,gBAAgBA,SAAS,oBAAoB,SAASA,MAC/D,UACAD,WAEF,MAAMH,oBACJ,IAAI,CAACC,OAAO,EACZgJ,8BAAmB,EACnB9I,UACAC;IAGN;IAEA8I,sBAAsBzH,GAAa,EAAE;QACnC,OAAO,IAAI,CAACH,mBAAmB,CAACsG,GAAG,CAACnG;IACtC;IAEA0H,yBAAyB1H,GAAa,EAAE;QACtC,OAAO,IAAI,CAACH,mBAAmB,CAACE,MAAM,CAACC;IACzC;IAEQ4F,yBACNtF,SAAgD,EAC5B;QACpB,MAAMC,WAA+B;YACnCoH,SAAS;YACT7B,YAAY,CAAC;YACb8B,kBAAkB,EAAE;YACpBC,WAAW,CAAC;QACd;QACA,IAAIC,kBAAyDC;QAC7D,KAAK,MAAM7G,KAAKZ,UAAW;YACzBU,OAAOC,MAAM,CAACV,SAASsH,SAAS,EAAE3G,EAAE2G,SAAS;YAC7C7G,OAAOC,MAAM,CAACV,SAASuF,UAAU,EAAE5E,EAAE4E,UAAU;YAC/C,IAAI5E,EAAE4G,eAAe,EAAE;gBACrBA,kBAAkB5G,EAAE4G,eAAe;YACrC;QACF;QACA,MAAME,2BAA2B,CAC/BC;YAEA,OAAO;gBACL,GAAGA,GAAG;gBACNC,OAAO;uBAAKJ,CAAAA,mCAAAA,gBAAiBI,KAAK,KAAI,EAAE;uBAAMD,IAAIC,KAAK;iBAAC;YAC1D;QACF;QACA,KAAK,MAAMlI,OAAOgB,OAAO2D,IAAI,CAACpE,SAASuF,UAAU,EAAG;YAClD,MAAMqC,QAAQ5H,SAASuF,UAAU,CAAC9F,IAAI;YACtCO,SAASuF,UAAU,CAAC9F,IAAI,GAAGgI,yBAAyBG;QACtD;QACA,KAAK,MAAMnI,OAAOgB,OAAO2D,IAAI,CAACpE,SAASsH,SAAS,EAAG;YACjD,MAAMM,QAAQ5H,SAASsH,SAAS,CAAC7H,IAAI;YACrCO,SAASsH,SAAS,CAAC7H,IAAI,GAAGgI,yBAAyBG;QACrD;QACA,KAAK,MAAMF,OAAOjH,OAAOK,MAAM,CAACd,SAASsH,SAAS,EAAEO,MAAM,CACxDpH,OAAOK,MAAM,CAACd,SAASuF,UAAU,GAChC;YACD,KAAK,MAAMuC,WAAWJ,IAAIpC,QAAQ,CAAE;gBAClC,IAAI,CAACwC,QAAQC,MAAM,EAAE;oBACnBD,QAAQC,MAAM,GAAGC,IAAAA,0BAAY,EAACF,QAAQG,cAAc,EAAE,EAAE,EAAE;wBACxDC,WAAW;wBACXC,WAAW;wBACXC,QAAQ;oBACV,GAAGC,MAAM,CAACC,UAAU,CAAC,OAAO;gBAC9B;YACF;QACF;QACAtI,SAASqH,gBAAgB,GAAG5G,OAAO2D,IAAI,CAACpE,SAASuF,UAAU;QAE3D,OAAOvF;IACT;IAEA,MAAcuI,0BAAyC;QACrD,MAAMnD,qBAAqB,IAAI,CAACC,wBAAwB,CACtD,IAAI,CAAC/F,mBAAmB,CAACwB,MAAM;QAEjC,MAAM0H,yBAAyBjK,IAAAA,UAAI,EACjC,IAAI,CAACN,OAAO,EACZ,UACAgJ,8BAAmB;QAErB9F,IAAAA,0CAAW,EAACqH;QACZ,MAAM5G,IAAAA,4BAAe,EACnB4G,wBACA/J,KAAKyC,SAAS,CAACkE,oBAAoB,MAAM;IAE7C;IAEA,MAAMqD,kBAAkBtK,QAAgB,EAAiB;QACvD,IAAI,CAACoB,cAAc,CAACI,GAAG,CACrBC,IAAAA,qBAAW,EAAC,SAAS,UAAUzB,WAC/B,MAAMH,oBAAoB,IAAI,CAACC,OAAO,EAAEyK,yBAAc,EAAEvK;IAE5D;IAEQ8D,oBAAoBlC,SAAkC,EAAE;QAC9D,MAAMC,WAA0B,CAAC;QACjC,KAAK,MAAMW,KAAKZ,UAAW;YACzBU,OAAOC,MAAM,CAACV,UAAUW;QAC1B;QACA,OAAOX;IACT;IAEA,MAAc2I,qBAAoC;QAChD,MAAMC,gBAAgB,IAAI,CAAC3G,mBAAmB,CAAC,IAAI,CAAC1C,cAAc,CAACuB,MAAM;QACzE,MAAM+H,oBAAoBtK,IAAAA,UAAI,EAAC,IAAI,CAACN,OAAO,EAAE,UAAUyK,yBAAc;QACrEvH,IAAAA,0CAAW,EAAC0H;QACZ,MAAMjH,IAAAA,4BAAe,EACnBiH,mBACApK,KAAKyC,SAAS,CAAC0H,eAAe,MAAM;IAExC;IAEA,MAAME,eAAe,EACnB7F,WAAW,EACXC,kBAAkB,EAClBF,WAAW,EAKZ,EAAE;QACD,MAAM,IAAI,CAACpC,mBAAmB;QAC9B,MAAM,IAAI,CAACa,qBAAqB;QAChC,MAAM,IAAI,CAACM,qBAAqB;QAChC,MAAM,IAAI,CAACI,sCAAsC;QACjD,MAAM,IAAI,CAACY,kBAAkB,CAACC,aAAaC,aAAaC;QACxD,MAAM,IAAI,CAACwC,0BAA0B;QACrC,MAAM,IAAI,CAACiB,qBAAqB;QAChC,MAAM,IAAI,CAAC4B,uBAAuB;QAClC,MAAM,IAAI,CAACpD,6BAA6B;QACxC,MAAM,IAAI,CAACiB,qBAAqB;QAChC,MAAM,IAAI,CAACuC,kBAAkB;IAC/B;AACF"}