{"version":3,"sources":["../../src/server/load-components.ts"],"sourcesContent":["import type {\n  AppType,\n  DocumentType,\n  NextComponentType,\n} from '../shared/lib/utils'\nimport type { ClientReferenceManifest } from '../build/webpack/plugins/flight-manifest-plugin'\nimport type {\n  PageConfig,\n  GetStaticPaths,\n  GetServerSideProps,\n  GetStaticProps,\n} from '../types'\nimport type { RouteModule } from './route-modules/route-module'\nimport type { BuildManifest } from './get-page-files'\nimport type { ActionManifest } from '../build/webpack/plugins/flight-client-entry-plugin'\n\nimport {\n  BUILD_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  CLIENT_REFERENCE_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n  UNDERSCORE_NOT_FOUND_ROUTE,\n} from '../shared/lib/constants'\nimport { join } from 'path'\nimport { requirePage } from './require'\nimport { interopDefault } from '../lib/interop-default'\nimport { getTracer } from './lib/trace/tracer'\nimport { LoadComponentsSpan } from './lib/trace/constants'\nimport { evalManifest, loadManifest } from './load-manifest'\nimport { wait } from '../lib/wait'\nimport { setReferenceManifestsSingleton } from './app-render/encryption-utils'\nimport { createServerModuleMap } from './app-render/action-utils'\nimport type { DeepReadonly } from '../shared/lib/deep-readonly'\n\nexport type ManifestItem = {\n  id: number | string\n  files: string[]\n}\n\nexport type ReactLoadableManifest = { [moduleId: string]: ManifestItem }\n\n/**\n * A manifest entry type for the react-loadable-manifest.json.\n *\n * The whole manifest.json is a type of `Record<pathName, LoadableManifest>`\n * where pathName is a string-based key points to the path of the page contains\n * each dynamic imports.\n */\nexport interface LoadableManifest {\n  [k: string]: { id: string | number; files: string[] }\n}\n\nexport type LoadComponentsReturnType<NextModule = any> = {\n  Component: NextComponentType\n  pageConfig: PageConfig\n  buildManifest: DeepReadonly<BuildManifest>\n  subresourceIntegrityManifest?: DeepReadonly<Record<string, string>>\n  reactLoadableManifest: DeepReadonly<ReactLoadableManifest>\n  clientReferenceManifest?: DeepReadonly<ClientReferenceManifest>\n  serverActionsManifest?: any\n  Document: DocumentType\n  App: AppType\n  getStaticProps?: GetStaticProps\n  getStaticPaths?: GetStaticPaths\n  getServerSideProps?: GetServerSideProps\n  ComponentMod: NextModule\n  routeModule: RouteModule\n  isAppPath?: boolean\n  page: string\n}\n\n/**\n * Load manifest file with retries, defaults to 3 attempts.\n */\nexport async function loadManifestWithRetries<T extends object>(\n  manifestPath: string,\n  attempts = 3\n) {\n  while (true) {\n    try {\n      return loadManifest<T>(manifestPath)\n    } catch (err) {\n      attempts--\n      if (attempts <= 0) throw err\n\n      await wait(100)\n    }\n  }\n}\n\n/**\n * Load manifest file with retries, defaults to 3 attempts.\n */\nexport async function evalManifestWithRetries<T extends object>(\n  manifestPath: string,\n  attempts = 3\n) {\n  while (true) {\n    try {\n      return evalManifest<T>(manifestPath)\n    } catch (err) {\n      attempts--\n      if (attempts <= 0) throw err\n\n      await wait(100)\n    }\n  }\n}\n\nasync function loadClientReferenceManifest(\n  manifestPath: string,\n  entryName: string\n) {\n  try {\n    const context = await evalManifestWithRetries<{\n      __RSC_MANIFEST: { [key: string]: ClientReferenceManifest }\n    }>(manifestPath)\n    return context.__RSC_MANIFEST[entryName]\n  } catch (err) {\n    return undefined\n  }\n}\n\nasync function loadComponentsImpl<N = any>({\n  distDir,\n  page,\n  isAppPath,\n}: {\n  distDir: string\n  page: string\n  isAppPath: boolean\n}): Promise<LoadComponentsReturnType<N>> {\n  let DocumentMod = {}\n  let AppMod = {}\n  if (!isAppPath) {\n    ;[DocumentMod, AppMod] = await Promise.all([\n      requirePage('/_document', distDir, false),\n      requirePage('/_app', distDir, false),\n    ])\n  }\n\n  // Make sure to avoid loading the manifest for Route Handlers\n  const hasClientManifest =\n    isAppPath && (page.endsWith('/page') || page === UNDERSCORE_NOT_FOUND_ROUTE)\n\n  // Load the manifest files first\n  const [\n    buildManifest,\n    reactLoadableManifest,\n    clientReferenceManifest,\n    serverActionsManifest,\n  ] = await Promise.all([\n    loadManifestWithRetries<BuildManifest>(join(distDir, BUILD_MANIFEST)),\n    loadManifestWithRetries<ReactLoadableManifest>(\n      join(distDir, REACT_LOADABLE_MANIFEST)\n    ),\n    hasClientManifest\n      ? loadClientReferenceManifest(\n          join(\n            distDir,\n            'server',\n            'app',\n            page.replace(/%5F/g, '_') + '_' + CLIENT_REFERENCE_MANIFEST + '.js'\n          ),\n          page.replace(/%5F/g, '_')\n        )\n      : undefined,\n    isAppPath\n      ? loadManifestWithRetries<ActionManifest>(\n          join(distDir, 'server', SERVER_REFERENCE_MANIFEST + '.json')\n        ).catch(() => null)\n      : null,\n  ])\n\n  // Before requring the actual page module, we have to set the reference manifests\n  // to our global store so Server Action's encryption util can access to them\n  // at the top level of the page module.\n  if (serverActionsManifest && clientReferenceManifest) {\n    setReferenceManifestsSingleton({\n      clientReferenceManifest,\n      serverActionsManifest,\n      serverModuleMap: createServerModuleMap({\n        serverActionsManifest,\n        pageName: page,\n      }),\n    })\n  }\n\n  const ComponentMod = await requirePage(page, distDir, isAppPath)\n\n  const Component = interopDefault(ComponentMod)\n  const Document = interopDefault(DocumentMod)\n  const App = interopDefault(AppMod)\n\n  const { getServerSideProps, getStaticProps, getStaticPaths, routeModule } =\n    ComponentMod\n\n  return {\n    App,\n    Document,\n    Component,\n    buildManifest,\n    reactLoadableManifest,\n    pageConfig: ComponentMod.config || {},\n    ComponentMod,\n    getServerSideProps,\n    getStaticProps,\n    getStaticPaths,\n    clientReferenceManifest,\n    serverActionsManifest,\n    isAppPath,\n    page,\n    routeModule,\n  }\n}\n\nexport const loadComponents = getTracer().wrap(\n  LoadComponentsSpan.loadComponents,\n  loadComponentsImpl\n)\n"],"names":["evalManifestWithRetries","loadComponents","loadManifestWithRetries","manifestPath","attempts","loadManifest","err","wait","evalManifest","loadClientReferenceManifest","entryName","context","__RSC_MANIFEST","undefined","loadComponentsImpl","distDir","page","isAppPath","DocumentMod","AppMod","Promise","all","requirePage","hasClientManifest","endsWith","UNDERSCORE_NOT_FOUND_ROUTE","buildManifest","reactLoadableManifest","clientReferenceManifest","serverActionsManifest","join","BUILD_MANIFEST","REACT_LOADABLE_MANIFEST","replace","CLIENT_REFERENCE_MANIFEST","SERVER_REFERENCE_MANIFEST","catch","setReferenceManifestsSingleton","serverModuleMap","createServerModuleMap","pageName","ComponentMod","Component","interopDefault","Document","App","getServerSideProps","getStaticProps","getStaticPaths","routeModule","pageConfig","config","getTracer","wrap","LoadComponentsSpan"],"mappings":";;;;;;;;;;;;;;;;IA6FsBA,uBAAuB;eAAvBA;;IA2HTC,cAAc;eAAdA;;IA9ISC,uBAAuB;eAAvBA;;;2BApDf;sBACc;yBACO;gCACG;wBACL;4BACS;8BACQ;sBACtB;iCAC0B;6BACT;AA2C/B,eAAeA,wBACpBC,YAAoB,EACpBC,WAAW,CAAC;IAEZ,MAAO,KAAM;QACX,IAAI;YACF,OAAOC,IAAAA,0BAAY,EAAIF;QACzB,EAAE,OAAOG,KAAK;YACZF;YACA,IAAIA,YAAY,GAAG,MAAME;YAEzB,MAAMC,IAAAA,UAAI,EAAC;QACb;IACF;AACF;AAKO,eAAeP,wBACpBG,YAAoB,EACpBC,WAAW,CAAC;IAEZ,MAAO,KAAM;QACX,IAAI;YACF,OAAOI,IAAAA,0BAAY,EAAIL;QACzB,EAAE,OAAOG,KAAK;YACZF;YACA,IAAIA,YAAY,GAAG,MAAME;YAEzB,MAAMC,IAAAA,UAAI,EAAC;QACb;IACF;AACF;AAEA,eAAeE,4BACbN,YAAoB,EACpBO,SAAiB;IAEjB,IAAI;QACF,MAAMC,UAAU,MAAMX,wBAEnBG;QACH,OAAOQ,QAAQC,cAAc,CAACF,UAAU;IAC1C,EAAE,OAAOJ,KAAK;QACZ,OAAOO;IACT;AACF;AAEA,eAAeC,mBAA4B,EACzCC,OAAO,EACPC,IAAI,EACJC,SAAS,EAKV;IACC,IAAIC,cAAc,CAAC;IACnB,IAAIC,SAAS,CAAC;IACd,IAAI,CAACF,WAAW;QACb,CAACC,aAAaC,OAAO,GAAG,MAAMC,QAAQC,GAAG,CAAC;YACzCC,IAAAA,oBAAW,EAAC,cAAcP,SAAS;YACnCO,IAAAA,oBAAW,EAAC,SAASP,SAAS;SAC/B;IACH;IAEA,6DAA6D;IAC7D,MAAMQ,oBACJN,aAAcD,CAAAA,KAAKQ,QAAQ,CAAC,YAAYR,SAASS,qCAA0B,AAAD;IAE5E,gCAAgC;IAChC,MAAM,CACJC,eACAC,uBACAC,yBACAC,sBACD,GAAG,MAAMT,QAAQC,GAAG,CAAC;QACpBnB,wBAAuC4B,IAAAA,UAAI,EAACf,SAASgB,yBAAc;QACnE7B,wBACE4B,IAAAA,UAAI,EAACf,SAASiB,kCAAuB;QAEvCT,oBACId,4BACEqB,IAAAA,UAAI,EACFf,SACA,UACA,OACAC,KAAKiB,OAAO,CAAC,QAAQ,OAAO,MAAMC,oCAAyB,GAAG,QAEhElB,KAAKiB,OAAO,CAAC,QAAQ,QAEvBpB;QACJI,YACIf,wBACE4B,IAAAA,UAAI,EAACf,SAAS,UAAUoB,oCAAyB,GAAG,UACpDC,KAAK,CAAC,IAAM,QACd;KACL;IAED,iFAAiF;IACjF,4EAA4E;IAC5E,uCAAuC;IACvC,IAAIP,yBAAyBD,yBAAyB;QACpDS,IAAAA,+CAA8B,EAAC;YAC7BT;YACAC;YACAS,iBAAiBC,IAAAA,kCAAqB,EAAC;gBACrCV;gBACAW,UAAUxB;YACZ;QACF;IACF;IAEA,MAAMyB,eAAe,MAAMnB,IAAAA,oBAAW,EAACN,MAAMD,SAASE;IAEtD,MAAMyB,YAAYC,IAAAA,8BAAc,EAACF;IACjC,MAAMG,WAAWD,IAAAA,8BAAc,EAACzB;IAChC,MAAM2B,MAAMF,IAAAA,8BAAc,EAACxB;IAE3B,MAAM,EAAE2B,kBAAkB,EAAEC,cAAc,EAAEC,cAAc,EAAEC,WAAW,EAAE,GACvER;IAEF,OAAO;QACLI;QACAD;QACAF;QACAhB;QACAC;QACAuB,YAAYT,aAAaU,MAAM,IAAI,CAAC;QACpCV;QACAK;QACAC;QACAC;QACApB;QACAC;QACAZ;QACAD;QACAiC;IACF;AACF;AAEO,MAAMhD,iBAAiBmD,IAAAA,iBAAS,IAAGC,IAAI,CAC5CC,8BAAkB,CAACrD,cAAc,EACjCa"}