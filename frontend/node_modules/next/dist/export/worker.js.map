{"version":3,"sources":["../../src/export/worker.ts"],"sourcesContent":["import type {\n  ExportPageInput,\n  ExportPageResult,\n  ExportRouteResult,\n  ExportedPageFile,\n  FileWriter,\n  WorkerRenderOpts,\n} from './types'\n\nimport '../server/node-environment'\n\nprocess.env.NEXT_IS_EXPORT_WORKER = 'true'\n\nimport { extname, join, dirname, sep } from 'path'\nimport fs from 'fs/promises'\nimport { loadComponents } from '../server/load-components'\nimport { isDynamicRoute } from '../shared/lib/router/utils/is-dynamic'\nimport { normalizePagePath } from '../shared/lib/page-path/normalize-page-path'\nimport { requireFontManifest } from '../server/require'\nimport { normalizeLocalePath } from '../shared/lib/i18n/normalize-locale-path'\nimport { trace } from '../trace'\nimport { setHttpClientAndAgentOptions } from '../server/setup-http-agent-env'\nimport isError from '../lib/is-error'\nimport { addRequestMeta } from '../server/request-meta'\nimport { normalizeAppPath } from '../shared/lib/router/utils/app-paths'\n\nimport { createRequestResponseMocks } from '../server/lib/mock-request'\nimport { isAppRouteRoute } from '../lib/is-app-route-route'\nimport { hasNextSupport } from '../telemetry/ci-info'\nimport { exportAppRoute } from './routes/app-route'\nimport { exportAppPage } from './routes/app-page'\nimport { exportPages } from './routes/pages'\nimport { getParams } from './helpers/get-params'\nimport { createIncrementalCache } from './helpers/create-incremental-cache'\nimport { isPostpone } from '../server/lib/router-utils/is-postpone'\nimport { isDynamicUsageError } from './helpers/is-dynamic-usage-error'\nimport { isBailoutToCSRError } from '../shared/lib/lazy-dynamic/bailout-to-csr'\nimport {\n  turborepoTraceAccess,\n  TurborepoAccessTraceResult,\n} from '../build/turborepo-access-trace'\n\nconst envConfig = require('../shared/lib/runtime-config.external')\n\n;(globalThis as any).__NEXT_DATA__ = {\n  nextExport: true,\n}\n\nasync function exportPageImpl(\n  input: ExportPageInput,\n  fileWriter: FileWriter\n): Promise<ExportRouteResult | undefined> {\n  const {\n    dir,\n    path,\n    pathMap,\n    distDir,\n    pagesDataDir,\n    buildExport = false,\n    serverRuntimeConfig,\n    subFolders = false,\n    optimizeFonts,\n    optimizeCss,\n    disableOptimizedLoading,\n    debugOutput = false,\n    cacheMaxMemorySize,\n    fetchCache,\n    fetchCacheKeyPrefix,\n    cacheHandler,\n    enableExperimentalReact,\n    ampValidatorPath,\n    trailingSlash,\n    enabledDirectories,\n  } = input\n\n  if (enableExperimentalReact) {\n    process.env.__NEXT_EXPERIMENTAL_REACT = 'true'\n  }\n\n  const {\n    page,\n\n    // Check if this is an `app/` page.\n    _isAppDir: isAppDir = false,\n\n    // Check if this should error when dynamic usage is detected.\n    _isDynamicError: isDynamicError = false,\n\n    // If this page supports partial prerendering, then we need to pass that to\n    // the renderOpts.\n    _isRoutePPREnabled: isRoutePPREnabled,\n\n    // Pull the original query out.\n    query: originalQuery = {},\n  } = pathMap\n\n  try {\n    let query = { ...originalQuery }\n    const pathname = normalizeAppPath(page)\n    const isDynamic = isDynamicRoute(page)\n    const outDir = isAppDir ? join(distDir, 'server/app') : input.outDir\n\n    let params: { [key: string]: string | string[] } | undefined\n\n    const filePath = normalizePagePath(path)\n    const ampPath = `${filePath}.amp`\n    let renderAmpPath = ampPath\n\n    let updatedPath = query.__nextSsgPath || path\n    delete query.__nextSsgPath\n\n    let locale = query.__nextLocale || input.renderOpts.locale\n    delete query.__nextLocale\n\n    if (input.renderOpts.locale) {\n      const localePathResult = normalizeLocalePath(\n        path,\n        input.renderOpts.locales\n      )\n\n      if (localePathResult.detectedLocale) {\n        updatedPath = localePathResult.pathname\n        locale = localePathResult.detectedLocale\n\n        if (locale === input.renderOpts.defaultLocale) {\n          renderAmpPath = `${normalizePagePath(updatedPath)}.amp`\n        }\n      }\n    }\n\n    // We need to show a warning if they try to provide query values\n    // for an auto-exported page since they won't be available\n    const hasOrigQueryValues = Object.keys(originalQuery).length > 0\n\n    // Check if the page is a specified dynamic route\n    const { pathname: nonLocalizedPath } = normalizeLocalePath(\n      path,\n      input.renderOpts.locales\n    )\n\n    if (isDynamic && page !== nonLocalizedPath) {\n      const normalizedPage = isAppDir ? normalizeAppPath(page) : page\n\n      params = getParams(normalizedPage, updatedPath)\n      if (params) {\n        query = {\n          ...query,\n          ...params,\n        }\n      }\n    }\n\n    const { req, res } = createRequestResponseMocks({ url: updatedPath })\n\n    // If this is a status code page, then set the response code.\n    for (const statusCode of [404, 500]) {\n      if (\n        [\n          `/${statusCode}`,\n          `/${statusCode}.html`,\n          `/${statusCode}/index.html`,\n        ].some((p) => p === updatedPath || `/${locale}${p}` === updatedPath)\n      ) {\n        res.statusCode = statusCode\n      }\n    }\n\n    // Ensure that the URL has a trailing slash if it's configured.\n    if (trailingSlash && !req.url?.endsWith('/')) {\n      req.url += '/'\n    }\n\n    if (\n      locale &&\n      buildExport &&\n      input.renderOpts.domainLocales &&\n      input.renderOpts.domainLocales.some(\n        (dl) =>\n          dl.defaultLocale === locale || dl.locales?.includes(locale || '')\n      )\n    ) {\n      addRequestMeta(req, 'isLocaleDomain', true)\n    }\n\n    envConfig.setConfig({\n      serverRuntimeConfig,\n      publicRuntimeConfig: input.renderOpts.runtimeConfig,\n    })\n\n    const getHtmlFilename = (p: string) =>\n      subFolders ? `${p}${sep}index.html` : `${p}.html`\n\n    let htmlFilename = getHtmlFilename(filePath)\n\n    // dynamic routes can provide invalid extensions e.g. /blog/[...slug] returns an\n    // extension of `.slug]`\n    const pageExt = isDynamic || isAppDir ? '' : extname(page)\n    const pathExt = isDynamic || isAppDir ? '' : extname(path)\n\n    // force output 404.html for backwards compat\n    if (path === '/404.html') {\n      htmlFilename = path\n    }\n    // Make sure page isn't a folder with a dot in the name e.g. `v1.2`\n    else if (pageExt !== pathExt && pathExt !== '') {\n      const isBuiltinPaths = ['/500', '/404'].some(\n        (p) => p === path || p === path + '.html'\n      )\n      // If the ssg path has .html extension, and it's not builtin paths, use it directly\n      // Otherwise, use that as the filename instead\n      const isHtmlExtPath = !isBuiltinPaths && path.endsWith('.html')\n      htmlFilename = isHtmlExtPath ? getHtmlFilename(path) : path\n    } else if (path === '/') {\n      // If the path is the root, just use index.html\n      htmlFilename = 'index.html'\n    }\n\n    const baseDir = join(outDir, dirname(htmlFilename))\n    let htmlFilepath = join(outDir, htmlFilename)\n\n    await fs.mkdir(baseDir, { recursive: true })\n\n    // If the fetch cache was enabled, we need to create an incremental\n    // cache instance for this page.\n    const incrementalCache =\n      isAppDir && fetchCache\n        ? await createIncrementalCache({\n            cacheHandler,\n            cacheMaxMemorySize,\n            fetchCacheKeyPrefix,\n            distDir,\n            dir,\n            enabledDirectories,\n            // skip writing to disk in minimal mode for now, pending some\n            // changes to better support it\n            flushToDisk: !hasNextSupport,\n          })\n        : undefined\n\n    // Handle App Routes.\n    if (isAppDir && isAppRouteRoute(page)) {\n      return await exportAppRoute(\n        req,\n        res,\n        params,\n        page,\n        incrementalCache,\n        distDir,\n        htmlFilepath,\n        fileWriter,\n        input.renderOpts.experimental\n      )\n    }\n\n    const components = await loadComponents({\n      distDir,\n      page,\n      isAppPath: isAppDir,\n    })\n\n    const renderOpts: WorkerRenderOpts = {\n      ...components,\n      ...input.renderOpts,\n      ampPath: renderAmpPath,\n      params,\n      optimizeFonts,\n      optimizeCss,\n      disableOptimizedLoading,\n      fontManifest: optimizeFonts ? requireFontManifest(distDir) : undefined,\n      locale,\n      supportsDynamicResponse: false,\n      experimental: {\n        ...input.renderOpts.experimental,\n        isRoutePPREnabled,\n      },\n      waitUntil: undefined,\n      onClose: undefined,\n    }\n\n    if (hasNextSupport) {\n      renderOpts.isRevalidate = true\n    }\n\n    // Handle App Pages\n    if (isAppDir) {\n      // Set the incremental cache on the renderOpts, that's how app page's\n      // consume it.\n      renderOpts.incrementalCache = incrementalCache\n\n      return await exportAppPage(\n        req,\n        res,\n        page,\n        path,\n        pathname,\n        query,\n        renderOpts,\n        htmlFilepath,\n        debugOutput,\n        isDynamicError,\n        fileWriter\n      )\n    }\n\n    return await exportPages(\n      req,\n      res,\n      path,\n      page,\n      query,\n      htmlFilepath,\n      htmlFilename,\n      ampPath,\n      subFolders,\n      outDir,\n      ampValidatorPath,\n      pagesDataDir,\n      buildExport,\n      isDynamic,\n      hasOrigQueryValues,\n      renderOpts,\n      components,\n      fileWriter\n    )\n  } catch (err) {\n    console.error(\n      `\\nError occurred prerendering page \"${path}\". Read more: https://nextjs.org/docs/messages/prerender-error\\n`\n    )\n    if (!isBailoutToCSRError(err)) {\n      console.error(isError(err) && err.stack ? err.stack : err)\n    }\n\n    return { error: true }\n  }\n}\n\nexport default async function exportPage(\n  input: ExportPageInput\n): Promise<ExportPageResult | undefined> {\n  // Configure the http agent.\n  setHttpClientAndAgentOptions({\n    httpAgentOptions: input.httpAgentOptions,\n  })\n\n  const files: ExportedPageFile[] = []\n  const baseFileWriter: FileWriter = async (\n    type,\n    path,\n    content,\n    encodingOptions = 'utf-8'\n  ) => {\n    await fs.mkdir(dirname(path), { recursive: true })\n    await fs.writeFile(path, content, encodingOptions)\n    files.push({ type, path })\n  }\n\n  const exportPageSpan = trace('export-page-worker', input.parentSpanId)\n\n  const start = Date.now()\n\n  const turborepoAccessTraceResult = new TurborepoAccessTraceResult()\n  // Export the page.\n  const result = await exportPageSpan.traceAsyncFn(() =>\n    turborepoTraceAccess(\n      () => exportPageImpl(input, baseFileWriter),\n      turborepoAccessTraceResult\n    )\n  )\n\n  // If there was no result, then we can exit early.\n  if (!result) return\n\n  // If there was an error, then we can exit early.\n  if ('error' in result) {\n    return { error: result.error, duration: Date.now() - start, files: [] }\n  }\n\n  // Otherwise we can return the result.\n  return {\n    duration: Date.now() - start,\n    files,\n    ampValidations: result.ampValidations,\n    revalidate: result.revalidate,\n    metadata: result.metadata,\n    ssgNotFound: result.ssgNotFound,\n    hasEmptyPrelude: result.hasEmptyPrelude,\n    hasPostponed: result.hasPostponed,\n    turborepoAccessTraceResult: turborepoAccessTraceResult.serialize(),\n  }\n}\n\nprocess.on('unhandledRejection', (err: unknown) => {\n  // if it's a postpone error, it'll be handled later\n  // when the postponed promise is actually awaited.\n  if (isPostpone(err)) {\n    return\n  }\n\n  // we don't want to log these errors\n  if (isDynamicUsageError(err)) {\n    return\n  }\n\n  console.error(err)\n})\n\nprocess.on('rejectionHandled', () => {\n  // It is ok to await a Promise late in Next.js as it allows for better\n  // prefetching patterns to avoid waterfalls. We ignore logging these.\n  // We should've already errored in anyway unhandledRejection.\n})\n"],"names":["exportPage","process","env","NEXT_IS_EXPORT_WORKER","envConfig","require","globalThis","__NEXT_DATA__","nextExport","exportPageImpl","input","fileWriter","dir","path","pathMap","distDir","pagesDataDir","buildExport","serverRuntimeConfig","subFolders","optimizeFonts","optimizeCss","disableOptimizedLoading","debugOutput","cacheMaxMemorySize","fetchCache","fetchCacheKeyPrefix","cacheHandler","enableExperimentalReact","ampValidatorPath","trailingSlash","enabledDirectories","__NEXT_EXPERIMENTAL_REACT","page","_isAppDir","isAppDir","_isDynamicError","isDynamicError","_isRoutePPREnabled","isRoutePPREnabled","query","originalQuery","req","pathname","normalizeAppPath","isDynamic","isDynamicRoute","outDir","join","params","filePath","normalizePagePath","ampPath","renderAmpPath","updatedPath","__nextSsgPath","locale","__nextLocale","renderOpts","localePathResult","normalizeLocalePath","locales","detectedLocale","defaultLocale","hasOrigQueryValues","Object","keys","length","nonLocalizedPath","normalizedPage","getParams","res","createRequestResponseMocks","url","statusCode","some","p","endsWith","domainLocales","dl","includes","addRequestMeta","setConfig","publicRuntimeConfig","runtimeConfig","getHtmlFilename","sep","htmlFilename","pageExt","extname","pathExt","isBuiltinPaths","isHtmlExtPath","baseDir","dirname","htmlFilepath","fs","mkdir","recursive","incrementalCache","createIncrementalCache","flushToDisk","hasNextSupport","undefined","isAppRouteRoute","exportAppRoute","experimental","components","loadComponents","isAppPath","fontManifest","requireFontManifest","supportsDynamicResponse","waitUntil","onClose","isRevalidate","exportAppPage","exportPages","err","console","error","isBailoutToCSRError","isError","stack","setHttpClientAndAgentOptions","httpAgentOptions","files","baseFileWriter","type","content","encodingOptions","writeFile","push","exportPageSpan","trace","parentSpanId","start","Date","now","turborepoAccessTraceResult","TurborepoAccessTraceResult","result","traceAsyncFn","turborepoTraceAccess","duration","ampValidations","revalidate","metadata","ssgNotFound","hasEmptyPrelude","hasPostponed","serialize","on","isPostpone","isDynamicUsageError"],"mappings":"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"}