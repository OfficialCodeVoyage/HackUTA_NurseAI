{"version":3,"sources":["../../src/client/on-recoverable-error.ts"],"sourcesContent":["import { isBailoutToCSRError } from '../shared/lib/lazy-dynamic/bailout-to-csr'\n\n// x-ref: https://github.com/facebook/react/blob/d4bc16a7d69eb2ea38a88c8ac0b461d5f72cdcab/packages/react-dom/src/client/ReactDOMRoot.js#L83\nconst defaultOnRecoverableError =\n  typeof reportError === 'function'\n    ? // In modern browsers, reportError will dispatch an error event,\n      // emulating an uncaught JavaScript error.\n      reportError\n    : (error: any) => {\n        window.console.error(error)\n      }\n\nexport function onRecoverableError(\n  err: unknown,\n  errorInfo: { componentStack?: string }\n) {\n  // In development mode, pass along the component stack to the error\n  if (process.env.NODE_ENV === 'development' && errorInfo.componentStack) {\n    ;(err as any)._componentStack = errorInfo.componentStack\n  }\n  // Using default react onRecoverableError\n\n  // Skip certain custom errors which are not expected to be reported on client\n  if (isBailoutToCSRError(err)) return\n\n  defaultOnRecoverableError(err)\n}\n"],"names":["onRecoverableError","defaultOnRecoverableError","reportError","error","window","console","err","errorInfo","process","env","NODE_ENV","componentStack","_componentStack","isBailoutToCSRError"],"mappings":";;;;+BAYgBA;;;eAAAA;;;8BAZoB;AAEpC,2IAA2I;AAC3I,MAAMC,4BACJ,OAAOC,gBAAgB,aAEnB,0CAA0C;AAC1CA,cACA,CAACC;IACCC,OAAOC,OAAO,CAACF,KAAK,CAACA;AACvB;AAEC,SAASH,mBACdM,GAAY,EACZC,SAAsC;IAEtC,mEAAmE;IACnE,IAAIC,QAAQC,GAAG,CAACC,QAAQ,KAAK,iBAAiBH,UAAUI,cAAc,EAAE;QACpEL,IAAYM,eAAe,GAAGL,UAAUI,cAAc;IAC1D;IACA,yCAAyC;IAEzC,6EAA6E;IAC7E,IAAIE,IAAAA,iCAAmB,EAACP,MAAM;IAE9BL,0BAA0BK;AAC5B"}