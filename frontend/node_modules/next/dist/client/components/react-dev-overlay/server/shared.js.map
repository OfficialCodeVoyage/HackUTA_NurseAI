{"version":3,"sources":["../../../../../src/client/components/react-dev-overlay/server/shared.ts"],"sourcesContent":["import type { StackFrame } from 'stacktrace-parser'\nimport type { ServerResponse } from 'http'\nimport { codeFrameColumns } from 'next/dist/compiled/babel/code-frame'\nimport isInternal, {\n  nextInternalsRe,\n  reactNodeModulesRe,\n  reactVendoredRe,\n} from '../../../../shared/lib/is-internal'\n\nexport type SourcePackage = 'react' | 'next'\n\nexport interface OriginalStackFrameResponse {\n  originalStackFrame?: StackFrame | null\n  originalCodeFrame?: string | null\n  /** We use this to group frames in the error overlay */\n  sourcePackage?: SourcePackage | null\n}\n\nconst nextMethodRe = /(^__webpack_.*|node_modules[\\\\/]next[\\\\/])/\n\n/** Given a frame, it parses which package it belongs to. */\nexport function findSourcePackage({\n  file,\n  methodName,\n}: Partial<{ file: string | null; methodName: string | null }>):\n  | SourcePackage\n  | undefined {\n  if (file) {\n    // matching React first since vendored would match under `next` too\n    if (reactVendoredRe.test(file) || reactNodeModulesRe.test(file)) {\n      return 'react'\n    } else if (nextInternalsRe.test(file)) {\n      return 'next'\n    }\n  }\n\n  if (methodName) {\n    if (nextMethodRe.test(methodName)) {\n      return 'next'\n    }\n  }\n}\n\n/**\n * It looks up the code frame of the traced source.\n * @note It ignores Next.js/React internals, as these can often be huge bundled files.\n */\nexport function getOriginalCodeFrame(\n  frame: StackFrame,\n  source: string | null\n): string | null | undefined {\n  if (!source || isInternal(frame.file)) {\n    return null\n  }\n\n  return codeFrameColumns(\n    source,\n    {\n      start: {\n        // 1-based, but -1 means start line without highlighting\n        line: frame.lineNumber ?? -1,\n        // 1-based, but 0 means whole line without column highlighting\n        column: frame.column ?? 0,\n      },\n    },\n    { forceColor: true }\n  )\n}\n\nexport function noContent(res: ServerResponse) {\n  res.statusCode = 204\n  res.end('No Content')\n}\n\nexport function badRequest(res: ServerResponse) {\n  res.statusCode = 400\n  res.end('Bad Request')\n}\n\nexport function internalServerError(res: ServerResponse, e?: any) {\n  res.statusCode = 500\n  res.end(e ?? 'Internal Server Error')\n}\n\nexport function json(res: ServerResponse, data: any) {\n  res\n    .setHeader('Content-Type', 'application/json')\n    .end(Buffer.from(JSON.stringify(data)))\n}\n"],"names":["badRequest","findSourcePackage","getOriginalCodeFrame","internalServerError","json","noContent","nextMethodRe","file","methodName","reactVendoredRe","test","reactNodeModulesRe","nextInternalsRe","frame","source","isInternal","codeFrameColumns","start","line","lineNumber","column","forceColor","res","statusCode","end","e","data","setHeader","Buffer","from","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;IA0EgBA,UAAU;eAAVA;;IArDAC,iBAAiB;eAAjBA;;IA0BAC,oBAAoB;eAApBA;;IAgCAC,mBAAmB;eAAnBA;;IAKAC,IAAI;eAAJA;;IAfAC,SAAS;eAATA;;;;2BAnEiB;sEAK1B;AAWP,MAAMC,eAAe;AAGd,SAASL,kBAAkB,KAG4B;IAH5B,IAAA,EAChCM,IAAI,EACJC,UAAU,EACkD,GAH5B;IAMhC,IAAID,MAAM;QACR,mEAAmE;QACnE,IAAIE,2BAAe,CAACC,IAAI,CAACH,SAASI,8BAAkB,CAACD,IAAI,CAACH,OAAO;YAC/D,OAAO;QACT,OAAO,IAAIK,2BAAe,CAACF,IAAI,CAACH,OAAO;YACrC,OAAO;QACT;IACF;IAEA,IAAIC,YAAY;QACd,IAAIF,aAAaI,IAAI,CAACF,aAAa;YACjC,OAAO;QACT;IACF;AACF;AAMO,SAASN,qBACdW,KAAiB,EACjBC,MAAqB;IAErB,IAAI,CAACA,UAAUC,IAAAA,mBAAU,EAACF,MAAMN,IAAI,GAAG;QACrC,OAAO;IACT;QAOYM,mBAEEA;IAPd,OAAOG,IAAAA,2BAAgB,EACrBF,QACA;QACEG,OAAO;YACL,wDAAwD;YACxDC,MAAML,CAAAA,oBAAAA,MAAMM,UAAU,YAAhBN,oBAAoB,CAAC;YAC3B,8DAA8D;YAC9DO,QAAQP,CAAAA,gBAAAA,MAAMO,MAAM,YAAZP,gBAAgB;QAC1B;IACF,GACA;QAAEQ,YAAY;IAAK;AAEvB;AAEO,SAAShB,UAAUiB,GAAmB;IAC3CA,IAAIC,UAAU,GAAG;IACjBD,IAAIE,GAAG,CAAC;AACV;AAEO,SAASxB,WAAWsB,GAAmB;IAC5CA,IAAIC,UAAU,GAAG;IACjBD,IAAIE,GAAG,CAAC;AACV;AAEO,SAASrB,oBAAoBmB,GAAmB,EAAEG,CAAO;IAC9DH,IAAIC,UAAU,GAAG;IACjBD,IAAIE,GAAG,CAACC,YAAAA,IAAK;AACf;AAEO,SAASrB,KAAKkB,GAAmB,EAAEI,IAAS;IACjDJ,IACGK,SAAS,CAAC,gBAAgB,oBAC1BH,GAAG,CAACI,OAAOC,IAAI,CAACC,KAAKC,SAAS,CAACL;AACpC"}