{"version":3,"sources":["../../../src/client/components/is-hydration-error.ts"],"sourcesContent":["import isError from '../../lib/is-error'\n\nconst hydrationErrorRegex =\n  /hydration failed|while hydrating|content does not match|did not match/i\n\nconst reactUnifiedMismatchWarning = `Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used`\n\nconst reactHydrationErrorDocLink = 'https://react.dev/link/hydration-mismatch'\n\nexport const getDefaultHydrationErrorMessage = () => {\n  return (\n    reactUnifiedMismatchWarning +\n    '\\nSee more info here: https://nextjs.org/docs/messages/react-hydration-error'\n  )\n}\n\nexport function isHydrationError(error: unknown): boolean {\n  return isError(error) && hydrationErrorRegex.test(error.message)\n}\n\nexport function isReactHydrationErrorStack(stack: string): boolean {\n  return stack.startsWith(reactUnifiedMismatchWarning)\n}\n\nexport function getHydrationErrorStackInfo(rawMessage: string): {\n  message: string | null\n  link?: string\n  stack?: string\n  diff?: string\n} {\n  rawMessage = rawMessage.replace(/^Error: /, '')\n  if (!isReactHydrationErrorStack(rawMessage)) {\n    return { message: null }\n  }\n  rawMessage = rawMessage.slice(reactUnifiedMismatchWarning.length + 1).trim()\n  const [message, trailing] = rawMessage.split(`${reactHydrationErrorDocLink}`)\n  const trimmedMessage = message.trim()\n  // React built-in hydration diff starts with a newline, checking if length is > 1\n  if (trailing && trailing.length > 1) {\n    const stacks: string[] = []\n    const diffs: string[] = []\n    trailing.split('\\n').forEach((line) => {\n      if (line.trim() === '') return\n      if (line.trim().startsWith('at ')) {\n        stacks.push(line)\n      } else {\n        diffs.push(line)\n      }\n    })\n\n    return {\n      message: trimmedMessage,\n      link: reactHydrationErrorDocLink,\n      diff: diffs.join('\\n'),\n      stack: stacks.join('\\n'),\n    }\n  } else {\n    return {\n      message: trimmedMessage,\n      link: reactHydrationErrorDocLink,\n      stack: trailing, // without hydration diff\n    }\n  }\n}\n"],"names":["getDefaultHydrationErrorMessage","getHydrationErrorStackInfo","isHydrationError","isReactHydrationErrorStack","hydrationErrorRegex","reactUnifiedMismatchWarning","reactHydrationErrorDocLink","error","isError","test","message","stack","startsWith","rawMessage","replace","slice","length","trim","trailing","split","trimmedMessage","stacks","diffs","forEach","line","push","link","diff","join"],"mappings":";;;;;;;;;;;;;;;;;IASaA,+BAA+B;eAA/BA;;IAeGC,0BAA0B;eAA1BA;;IARAC,gBAAgB;eAAhBA;;IAIAC,0BAA0B;eAA1BA;;;;kEApBI;AAEpB,MAAMC,sBACJ;AAEF,MAAMC,8BAA+B;AAErC,MAAMC,6BAA6B;AAE5B,MAAMN,kCAAkC;IAC7C,OACEK,8BACA;AAEJ;AAEO,SAASH,iBAAiBK,KAAc;IAC7C,OAAOC,IAAAA,gBAAO,EAACD,UAAUH,oBAAoBK,IAAI,CAACF,MAAMG,OAAO;AACjE;AAEO,SAASP,2BAA2BQ,KAAa;IACtD,OAAOA,MAAMC,UAAU,CAACP;AAC1B;AAEO,SAASJ,2BAA2BY,UAAkB;IAM3DA,aAAaA,WAAWC,OAAO,CAAC,YAAY;IAC5C,IAAI,CAACX,2BAA2BU,aAAa;QAC3C,OAAO;YAAEH,SAAS;QAAK;IACzB;IACAG,aAAaA,WAAWE,KAAK,CAACV,4BAA4BW,MAAM,GAAG,GAAGC,IAAI;IAC1E,MAAM,CAACP,SAASQ,SAAS,GAAGL,WAAWM,KAAK,CAAC,AAAC,KAAEb;IAChD,MAAMc,iBAAiBV,QAAQO,IAAI;IACnC,iFAAiF;IACjF,IAAIC,YAAYA,SAASF,MAAM,GAAG,GAAG;QACnC,MAAMK,SAAmB,EAAE;QAC3B,MAAMC,QAAkB,EAAE;QAC1BJ,SAASC,KAAK,CAAC,MAAMI,OAAO,CAAC,CAACC;YAC5B,IAAIA,KAAKP,IAAI,OAAO,IAAI;YACxB,IAAIO,KAAKP,IAAI,GAAGL,UAAU,CAAC,QAAQ;gBACjCS,OAAOI,IAAI,CAACD;YACd,OAAO;gBACLF,MAAMG,IAAI,CAACD;YACb;QACF;QAEA,OAAO;YACLd,SAASU;YACTM,MAAMpB;YACNqB,MAAML,MAAMM,IAAI,CAAC;YACjBjB,OAAOU,OAAOO,IAAI,CAAC;QACrB;IACF,OAAO;QACL,OAAO;YACLlB,SAASU;YACTM,MAAMpB;YACNK,OAAOO;QACT;IACF;AACF"}