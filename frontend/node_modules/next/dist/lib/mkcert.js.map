{"version":3,"sources":["../../src/lib/mkcert.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport { getCacheDirectory } from './helpers/get-cache-directory'\nimport * as Log from '../build/output/log'\nimport { execSync } from 'child_process'\nconst { WritableStream } = require('node:stream/web') as {\n  WritableStream: typeof global.WritableStream\n}\n\nconst MKCERT_VERSION = 'v1.4.4'\n\nexport interface SelfSignedCertificate {\n  key: string\n  cert: string\n  rootCA?: string\n}\n\nfunction getBinaryName() {\n  const platform = process.platform\n  const arch = process.arch === 'x64' ? 'amd64' : process.arch\n\n  if (platform === 'win32') {\n    return `mkcert-${MKCERT_VERSION}-windows-${arch}.exe`\n  }\n  if (platform === 'darwin') {\n    return `mkcert-${MKCERT_VERSION}-darwin-${arch}`\n  }\n  if (platform === 'linux') {\n    return `mkcert-${MKCERT_VERSION}-linux-${arch}`\n  }\n\n  throw new Error(`Unsupported platform: ${platform}`)\n}\n\nasync function downloadBinary() {\n  try {\n    const binaryName = getBinaryName()\n    const cacheDirectory = getCacheDirectory('mkcert')\n    const binaryPath = path.join(cacheDirectory, binaryName)\n\n    if (fs.existsSync(binaryPath)) {\n      return binaryPath\n    }\n\n    const downloadUrl = `https://github.com/FiloSottile/mkcert/releases/download/${MKCERT_VERSION}/${binaryName}`\n\n    await fs.promises.mkdir(cacheDirectory, { recursive: true })\n\n    Log.info(`Downloading mkcert package...`)\n\n    const response = await fetch(downloadUrl)\n\n    if (!response.ok || !response.body) {\n      throw new Error(`request failed with status ${response.status}`)\n    }\n\n    Log.info(`Download response was successful, writing to disk`)\n\n    const binaryWriteStream = fs.createWriteStream(binaryPath)\n\n    await response.body.pipeTo(\n      new WritableStream({\n        write(chunk) {\n          return new Promise((resolve, reject) => {\n            binaryWriteStream.write(chunk, (error) => {\n              if (error) {\n                reject(error)\n                return\n              }\n\n              resolve()\n            })\n          })\n        },\n        close() {\n          return new Promise((resolve, reject) => {\n            binaryWriteStream.close((error) => {\n              if (error) {\n                reject(error)\n                return\n              }\n\n              resolve()\n            })\n          })\n        },\n      })\n    )\n\n    await fs.promises.chmod(binaryPath, 0o755)\n\n    return binaryPath\n  } catch (err) {\n    Log.error('Error downloading mkcert:', err)\n  }\n}\n\nexport async function createSelfSignedCertificate(\n  host?: string,\n  certDir: string = 'certificates'\n): Promise<SelfSignedCertificate | undefined> {\n  try {\n    const binaryPath = await downloadBinary()\n    if (!binaryPath) throw new Error('missing mkcert binary')\n\n    const resolvedCertDir = path.resolve(process.cwd(), `./${certDir}`)\n\n    await fs.promises.mkdir(resolvedCertDir, {\n      recursive: true,\n    })\n\n    const keyPath = path.resolve(resolvedCertDir, 'localhost-key.pem')\n    const certPath = path.resolve(resolvedCertDir, 'localhost.pem')\n\n    Log.info(\n      'Attempting to generate self signed certificate. This may prompt for your password'\n    )\n\n    const defaultHosts = ['localhost', '127.0.0.1', '::1']\n\n    const hosts =\n      host && !defaultHosts.includes(host)\n        ? [...defaultHosts, host]\n        : defaultHosts\n\n    execSync(\n      `\"${binaryPath}\" -install -key-file \"${keyPath}\" -cert-file \"${certPath}\" ${hosts.join(\n        ' '\n      )}`,\n      { stdio: 'ignore' }\n    )\n\n    const caLocation = execSync(`\"${binaryPath}\" -CAROOT`).toString().trim()\n\n    if (!fs.existsSync(keyPath) || !fs.existsSync(certPath)) {\n      throw new Error('Certificate files not found')\n    }\n\n    Log.info(`CA Root certificate created in ${caLocation}`)\n    Log.info(`Certificates created in ${resolvedCertDir}`)\n\n    const gitignorePath = path.resolve(process.cwd(), './.gitignore')\n\n    if (fs.existsSync(gitignorePath)) {\n      const gitignore = await fs.promises.readFile(gitignorePath, 'utf8')\n      if (!gitignore.includes(certDir)) {\n        Log.info('Adding certificates to .gitignore')\n\n        await fs.promises.appendFile(gitignorePath, `\\n${certDir}`)\n      }\n    }\n\n    return {\n      key: keyPath,\n      cert: certPath,\n      rootCA: `${caLocation}/rootCA.pem`,\n    }\n  } catch (err) {\n    Log.error(\n      'Failed to generate self-signed certificate. Falling back to http.',\n      err\n    )\n  }\n}\n"],"names":["createSelfSignedCertificate","WritableStream","require","MKCERT_VERSION","getBinaryName","platform","process","arch","Error","downloadBinary","binaryName","cacheDirectory","getCacheDirectory","binaryPath","path","join","fs","existsSync","downloadUrl","promises","mkdir","recursive","Log","info","response","fetch","ok","body","status","binaryWriteStream","createWriteStream","pipeTo","write","chunk","Promise","resolve","reject","error","close","chmod","err","host","certDir","resolvedCertDir","cwd","keyPath","certPath","defaultHosts","hosts","includes","execSync","stdio","caLocation","toString","trim","gitignorePath","gitignore","readFile","appendFile","key","cert","rootCA"],"mappings":"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"}